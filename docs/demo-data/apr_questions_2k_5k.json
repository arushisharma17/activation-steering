{
  "train": [
    {
      "question": "Fix the error in: `def recevied ( self , message = \"\" ) : self . push ( Hello ( \"hello\" ) , \"hello\" , self . channel )`. Return only the corrected line. [SINGLE_TOKEN]"
    },
    {
      "question": "Replace the buggy snippet with a correct one: `result = self . send ( RPC ( * params ) , c , t , errors = True )`  [pattern=SINGLE_TOKEN]"
    },
    {
      "question": "This line is buggy: `super ( Client , self ) . __init__ ( channel = channel , ** kwargs )`. Provide the correct version only. [SAME_FUNCTION_LESS_ARGS]"
    },
    {
      "question": "Apply the minimal change that makes this line correct: `result = self . _low_level_execute_command ( cmd = script_cmd , tmp = None , sudoable = sudoable )`  (SINGLE_TOKEN)"
    },
    {
      "question": "This line is buggy: `module = self . _execute_module ( module_name = setup , module_args = { filter : 'ansible_pkg_mgr' } , task_vars = task_vars )`. Provide the correct version only. [SINGLE_TOKEN]"
    },
    {
      "question": "Identify the issue in `for group in self . groups : group . vars = combine_vars ( group . vars , self . get_group_vars ( group ) )` and provide the corrected single-line fix. [ADD_METHOD_CALL]"
    },
    {
      "question": "Fix the error in: `parser = get_file_parser ( fullpath , loader )`. Return only the corrected line. [SAME_FUNCTION_MORE_ARGS]"
    },
    {
      "question": "This line is buggy: `salt = salt_field [ len ( 'salt='  : ]`. Provide the correct version only. [SINGLE_TOKEN]"
    },
    {
      "question": "Fix the following statement so it is correct: `handler = reprhandler ( self . root , handler )` (Pattern: SAME_FUNCTION_LESS_ARGS)"
    },
    {
      "question": "Given the buggy code: `self . start ( process = process , link = True )`, rewrite it into a correct version. (Bug type: SINGLE_TOKEN)"
    },
    {
      "question": "Produce the corrected version of: `return \"\"`  (family: SINGLE_TOKEN)"
    },
    {
      "question": "Replace the buggy snippet with a correct one: `start_response ( status , headers , exc_info )`  [pattern=ADD_FUNCTION_AROUND_EXPRESSION]"
    },
    {
      "question": "Replace the buggy snippet with a correct one: `response . headers [ \"Sec-WebSocket-Accept\" ] = accept`  [pattern=ADD_METHOD_CALL]"
    },
    {
      "question": "This line is buggy: `s = s . decode ( encoding )`. Provide the correct version only. [SAME_FUNCTION_MORE_ARGS]"
    },
    {
      "question": "Fix the error in: `self . _buffer = \"\"`. Return only the corrected line. [ADD_FUNCTION_AROUND_EXPRESSION]"
    },
    {
      "question": "Apply the minimal change that makes this line correct: `if s [ 0 ] == u ( \":\" ) : prefix , s = s [ 1 : ] . split ( u ( \" \" ) , 1 )`  (MORE_SPECIFIC_IF)"
    },
    {
      "question": "Replace the buggy snippet with a correct one: `on_done ( newsock )`  [pattern=SAME_FUNCTION_MORE_ARGS]"
    },
    {
      "question": "Identify the issue in `def test_file_quoating ( webapp ) : url = \"{0:s}{1:s}\" . format ( webapp . server . http . base , quote ( \"/static/#foobar.txt\" ) ) f = urlopen ( url )` and provide the corrected single-line fix. [SINGLE_TOKEN]"
    },
    {
      "question": "Fix the error in: `if ops is None and timeout is None : ops = [ 'get' , 'fetch' , 'count' ]`. Return only the corrected line. [MORE_SPECIFIC_IF]"
    },
    {
      "question": "Given the buggy code: `return result`, rewrite it into a correct version. (Bug type: ADD_FUNCTION_AROUND_EXPRESSION)"
    },
    {
      "question": "Identify the issue in `self . user = User . objects . create ( username = 'Suor' )` and provide the corrected single-line fix. [SAME_FUNCTION_MORE_ARGS]"
    },
    {
      "question": "Produce the corrected version of: `if src_json == None or src_json == '' : raise RouteParserException ( 'src_json is None or empty' )`  (family: CHANGE_BINARY_OPERATOR)"
    },
    {
      "question": "Identify the issue in `except urllib2 . HTTPError , e : print \"Failed to read LKGR - HTTP error \" + e . code` and provide the corrected single-line fix. [ADD_FUNCTION_AROUND_EXPRESSION]"
    },
    {
      "question": "Fix the error in: `options . goma_dir = os . path . join ( BUILD_DIR , 'goma' , 'mac10.6' )`. Return only the corrected line. [SAME_FUNCTION_LESS_ARGS]"
    },
    {
      "question": "Fix the error in: `args [ 'gclient_spec' ] = args [ 'gclient_spec' ] . replace ( '$$WK_REV$$' , revision or '' )`. Return only the corrected line. [ADD_FUNCTION_AROUND_EXPRESSION]"
    },
    {
      "question": "Produce the corrected version of: `usePTY = Fals`  (family: SINGLE_TOKEN)"
    },
    {
      "question": "Apply the minimal change that makes this line correct: `def init ( self , process = False , workers = DEFAULT_WORKERS , channel = channel ) : if not hasattr ( current_thread ( ) , \"_children\" ) : current_thread ( ) . _children = WeakKeyDictionary ( )`  (SINGLE_TOKEN)"
    },
    {
      "question": "Fix the error in: `def _on_requeste ( self , erequest , error ) : request , response = erequest . args`. Return only the corrected line. [SINGLE_TOKEN]"
    },
    {
      "question": "Fix the following statement so it is correct: `stage1 = parse_qsl ( data )` (Pattern: SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Fix the following statement so it is correct: `if not options . no_cygwin : win_cmd = 'c:\\\\cygwin\\\\bin\\\\bash --login -c \"%s\"' % ( win_cmd . replace ( '\"' , '\\\\\"' ) )` (Pattern: MORE_SPECIFIC_IF)"
    },
    {
      "question": "This line is buggy: `dest_parent_dir = os . path . join ( config . Archive . www_dir_base , results_dir_basename , build_name )`. Provide the correct version only. [ADD_METHOD_CALL]"
    },
    {
      "question": "Replace the buggy snippet with a correct one: `if chromium_utils . IsWindows ( ) :`  [pattern=MORE_SPECIFIC_IF]"
    },
    {
      "question": "Fix the following statement so it is correct: `def ChromiumASANFactory ( self , target = 'Release' , clobber = False , tests = None , mode = None , slave_type = 'Tester' , options = None , compile_timeout = 1200 , build_url = None , project = None , factory_properties = None ) :` (Pattern: SINGLE_TOKEN)"
    },
    {
      "question": "Fix the error in: `def ChromiumASANFactory ( self , target = 'Release' , clobber = False , tests = None , mode = None , slave_type = None , options = None , compile_timeout = 1200 , build_url = None , project = None , factory_properties = None ) :`. Return only the corrected line. [SINGLE_TOKEN]"
    },
    {
      "question": "Correct the following line while preserving intent: `try : execfile ( path , local_vars ) except Exception as e : print >> sys . stderr , 'WARNING: cannot exec ' + path`  (SINGLE_TOKEN)"
    },
    {
      "question": "Identify the issue in `gpu_data = self . PathJoin ( self . _build_dir , '..' , 'gpu_data' )` and provide the corrected single-line fix. [SAME_FUNCTION_LESS_ARGS]"
    },
    {
      "question": "Replace the buggy snippet with a correct one: `ids = obj_model . name_search ( cr , uid , id )`  [pattern=SAME_FUNCTION_MORE_ARGS]"
    },
    {
      "question": "Fix the error in: `for order_part in m2o_order . split ( \",\" , 1 ) : m2o_order_list . append ( order_part . strip ( ) . split ( \" \" , 1 ) [ 0 ] . strip ( ) )`. Return only the corrected line. [SAME_FUNCTION_LESS_ARGS]"
    },
    {
      "question": "Apply the minimal change that makes this line correct: `if ids : cr . execute ( \"select m.id, m.rrule, m.date, m.date_deadline, m.duration, \\\n                             m.exdate, m.exrule, m.recurrent_id, m.recurrent_uid from \" + self . _table + \" m where m.id = ANY(%s)\" , ( ids , ) )`  (MORE_SPECIFIC_IF)"
    },
    {
      "question": "Given the buggy code: `ids = obj_model . name_search ( cr , uid , id , operator = '=' )`, rewrite it into a correct version. (Bug type: SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Replace the buggy snippet with a correct one: `result [ invoice . id ] = m . amount_residual_currency`  [pattern=SINGLE_TOKEN]"
    },
    {
      "question": "Apply the minimal change that makes this line correct: `result [ invoice . id ] = m . amount_residual_currency`  (SINGLE_TOKEN)"
    },
    {
      "question": "Given the buggy code: `if not ( ( len ( atts ) == 1 and atts [ 0 ] [ 0 ] == 'sign_in' ) or ( atts [ 0 ] [ 0 ] != atts [ 1 ] [ 0 ] and atts [ 0 ] [ 1 ] != atts [ 1 ] [ 1 ] ) ) : return False`, rewrite it into a correct version. (Bug type: MORE_SPECIFIC_IF)"
    },
    {
      "question": "Apply the minimal change that makes this line correct: `obj_crm_meeting . unlink ( cr , uid , [ record . case_id ] )`  (ADD_FUNCTION_AROUND_EXPRESSION)"
    },
    {
      "question": "Given the buggy code: `if not ( ( len ( atts ) == 1 and atts [ 0 ] [ 0 ] == 'sign_in' ) or ( atts [ 0 ] [ 0 ] != atts [ 1 ] [ 0 ] and atts [ 0 ] [ 1 ] != atts [ 1 ] [ 1 ] ) ) : return False`, rewrite it into a correct version. (Bug type: MORE_SPECIFIC_IF)"
    },
    {
      "question": "Correct the following line while preserving intent: `bin = self . get_lib ( cursor , uid , company . id )`  (SAME_FUNCTION_LESS_ARGS)"
    },
    {
      "question": "Apply the minimal change that makes this line correct: `yTicks = '[%s]' % ', ' . join ( [ \"{v:%d}\" % i for i in range ( timeRange + 1 ) ] )`  (ADD_FUNCTION_AROUND_EXPRESSION)"
    },
    {
      "question": "Given the buggy code: `for filename in glob . glob ( '*.zip' ) : os . remove ( filename )`, rewrite it into a correct version. (Bug type: ADD_FUNCTION_AROUND_EXPRESSION)"
    },
    {
      "question": "Replace the buggy snippet with a correct one: `command . extend ( [ '--time-out-ms' , options . time_out_ms ] )`  [pattern=ADD_FUNCTION_AROUND_EXPRESSION]"
    },
    {
      "question": "Produce the corrected version of: `return AdminReadOnlyDecorator ( self . _original_admin . get_related_entity_admin ( entity ) )`  (family: SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Fix the following statement so it is correct: `self . assertEqual ( editor . get_value ( ) , None )` (Pattern: SINGLE_TOKEN)"
    },
    {
      "question": "Fix the error in: `open_html_in_print_preview_from_gui_thread ( html , self . html_document , self . page_size , self . page_orientation )`. Return only the corrected line. [SAME_FUNCTION_LESS_ARGS]"
    },
    {
      "question": "Produce the corrected version of: `test_name + '.app' ) _ , test_exe_path = get_build_dir_and_exe_path_mac ( options , options . target , 'iossim' )`  (family: ADD_FUNCTION_AROUND_EXPRESSION)"
    },
    {
      "question": "Produce the corrected version of: `self . run_gclient ( 'sync' , '--nohooks' )`  (family: SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Fix the error in: `if self . unicode_format != None : value_str = self . unicode_format ( value )`. Return only the corrected line. [MORE_SPECIFIC_IF]"
    },
    {
      "question": "Apply the minimal change that makes this line correct: `self . run_gclient ( 'sync' , '--nohooks' , '--delete_unversioned_trees' )`  (SAME_FUNCTION_LESS_ARGS)"
    },
    {
      "question": "Given the buggy code: `return self . value . encode ( 'utf-8' )`, rewrite it into a correct version. (Bug type: ADD_FUNCTION_AROUND_EXPRESSION)"
    },
    {
      "question": "This line is buggy: `row_data = RowDataFromObject ( entity , fields , None , 0 )`. Provide the correct version only. [SAME_FUNCTION_LESS_ARGS]"
    },
    {
      "question": "Fix the following statement so it is correct: `if hasattr ( admin , 'form_size' ) : self . setMinimumSize ( admin . form_size [ 0 ] , admin . form_size [ 1 ] )` (Pattern: MORE_SPECIFIC_IF)"
    },
    {
      "question": "This line is buggy: `if options . src_dir == 'v8' : clobber_dir = os . path . dirname ( clobber_dir )`. Provide the correct version only. [ADD_FUNCTION_AROUND_EXPRESSION]"
    },
    {
      "question": "Produce the corrected version of: `for path in glob . iglob ( os . path . join ( slave_path , '*' , 'isolate*' ) ) : print 'Removing %s' % path cleanup_directory ( path ) safe_rmdir ( path )`  (family: SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Fix the error in: `row = [ revision , '<td class=\"revision\"><a href=\"%s\" target=\"_blank\">%s</a></td>\\n' % ( tmpl % urllib . quote ( revision ) , revision ) ]`. Return only the corrected line. [ADD_FUNCTION_AROUND_EXPRESSION]"
    },
    {
      "question": "Fix the error in: `def klp_builder ( c ) : pass`. Return only the corrected line. [SINGLE_TOKEN]"
    },
    {
      "question": "Fix the error in: `list . append ( ' key=\"' + str ( key ) + '\"' )`. Return only the corrected line. [ADD_FUNCTION_AROUND_EXPRESSION]"
    },
    {
      "question": "Identify the issue in `self . data = valuelist [ 0 ]` and provide the corrected single-line fix. [ADD_METHOD_CALL]"
    },
    {
      "question": "This line is buggy: `target_dir = os . path . join ( os . path . dirname ( options . build_dir ) , options . target )`. Provide the correct version only. [SAME_FUNCTION_MORE_ARGS]"
    },
    {
      "question": "This line is buggy: `if 'compile' in test_filters :`. Provide the correct version only. [MORE_SPECIFIC_IF]"
    },
    {
      "question": "Apply the minimal change that makes this line correct: `if test_data_item is None : annotator_step . emit ( 'step returned non-zero exit code: %d' % step_result . retcode )`  (MORE_SPECIFIC_IF)"
    },
    {
      "question": "Apply the minimal change that makes this line correct: `config_obj . set_val ( val . pop ( ) )`  (SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Identify the issue in `result [ k ] = v % original` and provide the corrected single-line fix. [ADD_FUNCTION_AROUND_EXPRESSION]"
    },
    {
      "question": "Apply the minimal change that makes this line correct: `self . AddTestStep ( chromium_step . AnnotatedCommand , 'Running Bisection' , cmd , timeout = 30 * 60 )`  (SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Fix the following statement so it is correct: `return out . splitlines ( )` (Pattern: ADD_FUNCTION_AROUND_EXPRESSION)"
    },
    {
      "question": "This line is buggy: `if hostname in [ 'build28-m1' , 'build58-m1' ] : patterns = 'win_toolchain\\\\vs2013_files,third_party' env [ 'GOMA_GLOBAL_FILEID_CACHE_PATTERNS' ] = patterns`. Provide the correct version only. [ADD_METHOD_CALL]"
    },
    {
      "question": "Apply the minimal change that makes this line correct: `hostname = socket . gethostname ( ) . split ( '.' ) [ 0 ]`  (ADD_METHOD_CALL)"
    },
    {
      "question": "Given the buggy code: `if buf == '\\r' : buf = '\\n'`, rewrite it into a correct version. (Bug type: MORE_SPECIFIC_IF)"
    },
    {
      "question": "Given the buggy code: `value = self . m . properties . get ( 'use_mirror' )`, rewrite it into a correct version. (Bug type: SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Apply the minimal change that makes this line correct: `if ext not in SERIALIZERS : raise Exception ( 'The package to support %s is not installed.' % ext )`  (MORE_SPECIFIC_IF)"
    },
    {
      "question": "Given the buggy code: `return`, rewrite it into a correct version. (Bug type: SINGLE_TOKEN)"
    },
    {
      "question": "Correct the following line while preserving intent: `SubprocessFailed as e : raise GclientSyncFailed ( e . message , e . code )`  (SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "This line is buggy: `yield self . list_devices ( )`. Provide the correct version only. [SAME_FUNCTION_MORE_ARGS]"
    },
    {
      "question": "Correct the following line while preserving intent: `yield api . chromium_android . device_status_check ( )`  (SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Given the buggy code: `parse . add_option ( '--gyp_env' , action = 'append' , help = 'Environment variables to pass into gclient runhooks.' )`, rewrite it into a correct version. (Bug type: SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Produce the corrected version of: `if git ( 'diff' , deps_file , cwd = repo_base ) . strip ( ) : return True`  (family: SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "This line is buggy: `cm = _GetCacheManager ( pm , cache_dir = args . cache_directory )`. Provide the correct version only. [SAME_FUNCTION_MORE_ARGS]"
    },
    {
      "question": "This line is buggy: `print json . dumps ( data , indent = 2 , separators = ( ',' , ': ' ) )`. Provide the correct version only. [SAME_FUNCTION_MORE_ARGS]"
    },
    {
      "question": "Fix the following statement so it is correct: `self . AddTestStep ( chromium_step . AnnotatedCommand , 'Preparing for Bisection' , cmd )` (Pattern: SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Correct the following line while preserving intent: `shutil . rmtree ( self . homedir )`  (SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Given the buggy code: `if not ctypes . windll . kernel32 . CreateSymbolicLinkA ( str ( dst ) , str ( src ) , 1 ) : raise ctypes . WinError ( )`, rewrite it into a correct version. (Bug type: ADD_FUNCTION_AROUND_EXPRESSION)"
    },
    {
      "question": "Fix the error in: `builder . get ( 'can_merge_requests' , True ) ,`. Return only the corrected line. [SINGLE_TOKEN]"
    },
    {
      "question": "Identify the issue in `def unique ( self ) :` and provide the corrected single-line fix. [SINGLE_TOKEN]"
    },
    {
      "question": "Replace the buggy snippet with a correct one: `return client . getPage ( endpoint , agent = 'buildbot' )`  [pattern=SAME_FUNCTION_MORE_ARGS]"
    },
    {
      "question": "Correct the following line while preserving intent: `result [ k ] = str ( v ) % original`  (ADD_FUNCTION_AROUND_EXPRESSION)"
    },
    {
      "question": "Replace the buggy snippet with a correct one: `subprocess . call ( [ 'adb' , 'push' , afile , device_root ] )`  [pattern=SINGLE_TOKEN]"
    },
    {
      "question": "Identify the issue in `if result is RETRY : sleep_backoff = 4 ** attempt sleep_time = random . randint ( sleep_backoff , int ( sleep_backoff * 1.2 ) ) print '===backing off, sleeping for %d secs===' % sleep_time` and provide the corrected single-line fix. [MORE_SPECIFIC_IF]"
    },
    {
      "question": "Produce the corrected version of: `call ( * cmd )`  (family: SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "This line is buggy: `self . m . git ( 'checkout' , self . c . chromite_branch , name = 'checkout chromite branch [%s]' % ( self . c . chromite_branch ) )`. Provide the correct version only. [ADD_FUNCTION_AROUND_EXPRESSION]"
    },
    {
      "question": "Identify the issue in `return body` and provide the corrected single-line fix. [ADD_METHOD_CALL]"
    },
    {
      "question": "Fix the following statement so it is correct: `full_cmd = [ cmd ] + args` (Pattern: ADD_FUNCTION_AROUND_EXPRESSION)"
    },
    {
      "question": "Produce the corrected version of: `revision = subprocess . check_output ( [ 'python' , update_script , '--print-revision' ] , shell = True )`  (family: SAME_FUNCTION_LESS_ARGS)"
    },
    {
      "question": "Given the buggy code: `files = api . file . listdir ( 'listing go bin' , go_bin )`, rewrite it into a correct version. (Bug type: ADD_FUNCTION_AROUND_EXPRESSION)"
    },
    {
      "question": "Fix the error in: `for f in first_list & second_list : first_file = os . path . join ( first_dir , f ) second_file = os . path . join ( second_dir , f ) if filecmp . cmp ( first_file , second_file , shallow = False ) :`. Return only the corrected line. [ADD_FUNCTION_AROUND_EXPRESSION]"
    },
    {
      "question": "This line is buggy: `test_args = orig_config . get ( 'test_args' , [ ] ) + [ '--random-seed' , failure_dict [ 'random_seed' ] , ]`. Provide the correct version only. [ADD_FUNCTION_AROUND_EXPRESSION]"
    },
    {
      "question": "Apply the minimal change that makes this line correct: `step_text = step . getText ( )`  (ADD_FUNCTION_AROUND_EXPRESSION)"
    },
    {
      "question": "Apply the minimal change that makes this line correct: `api . gsutil . upload ( source , bucket , dest , args , name = ( 'upload ' + dest ) )`  (ADD_FUNCTION_AROUND_EXPRESSION)"
    },
    {
      "question": "Given the buggy code: `gsutil_upload ( api , hashes_result . raw_io . output , 'chromium-browser-official' , destination + '.hashes' , args = [ '-a' , 'public-read' ] )`, rewrite it into a correct version. (Bug type: ADD_FUNCTION_AROUND_EXPRESSION)"
    },
    {
      "question": "Identify the issue in `step_text = step . getText ( )` and provide the corrected single-line fix. [ADD_FUNCTION_AROUND_EXPRESSION]"
    },
    {
      "question": "Replace the buggy snippet with a correct one: `build_dir = build_directory . GetBuildOutputDirectory ( )`  [pattern=SAME_FUNCTION_MORE_ARGS]"
    },
    {
      "question": "Fix the following statement so it is correct: `timestamp_string = api . properties . get ( 'current_time' )` (Pattern: SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "This line is buggy: `subprocess . check_call ( [ os . path . join ( BASE_DIR , 'scripts' , 'tools' , 'runit.py' ) , os . path . join ( BASE_DIR , 'scripts' , 'tools' , 'dump_master_cfg.py' ) , 'masters/%s' % master , f . name ] )`. Provide the correct version only. [ADD_FUNCTION_AROUND_EXPRESSION]"
    },
    {
      "question": "This line is buggy: `append ( ( pathjoin ( loadPath , \"Latest Recordings\" ) , \"Latest Recordings\" , cmtLRec ) )`. Provide the correct version only. [ADD_FUNCTION_AROUND_EXPRESSION]"
    },
    {
      "question": "Replace the buggy snippet with a correct one: `if os . path . splitext ( m ) [ 1 ] in extList : count += 1 if bsize :`  [pattern=ADD_METHOD_CALL]"
    },
    {
      "question": "Correct the following line while preserving intent: `self . updateEventInfo ( )`  (SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Fix the following statement so it is correct: `schedulers . append ( SingleBranchScheduler ( name = scheduler_name , branch = 'master' , treeStableTimer = 60 , builderNames = builder_names ) )` (Pattern: ADD_FUNCTION_AROUND_EXPRESSION)"
    },
    {
      "question": "Fix the error in: `recipe = api . properties [ 'exp_try_recipe' ]`. Return only the corrected line. [ADD_FUNCTION_AROUND_EXPRESSION]"
    },
    {
      "question": "Fix the following statement so it is correct: `api . step ( 'drive sample_app' , [ 'flutter' , 'drive' , '--verbose' ] , cwd = app_path , ok_ret = ( 0 , 1 ) )` (Pattern: SAME_FUNCTION_LESS_ARGS)"
    },
    {
      "question": "Fix the error in: `parser . add_argument ( '--attempts' , default = 1 , help = 'Number of times to retry.' )`. Return only the corrected line. [SAME_FUNCTION_MORE_ARGS]"
    },
    {
      "question": "Produce the corrected version of: `if checkvalues in val : return truevalue`  (family: CHANGE_BINARY_OPERATOR)"
    },
    {
      "question": "Produce the corrected version of: `pass`  (family: SINGLE_TOKEN)"
    },
    {
      "question": "Fix the error in: `strict = d . getVar ( \"BB_STRICT_CHECKSUM\" , \"1\" ) or \"0\"`. Return only the corrected line. [SINGLE_TOKEN]"
    },
    {
      "question": "This line is buggy: `if item in self . graph [ node ] : self . deps_array [ node ] [ 0 ] -= 1`. Provide the correct version only. [ADD_METHOD_CALL]"
    },
    {
      "question": "Identify the issue in `filtered = filter ( lambda v : v not in removes , value . split ( \" \" ) )` and provide the corrected single-line fix. [SAME_FUNCTION_LESS_ARGS]"
    },
    {
      "question": "This line is buggy: `def setUp ( self ) : \"\"\"This code is executed before each test method.\"\"\" if not Wic . image_is_ready :`. Provide the correct version only. [SINGLE_TOKEN]"
    },
    {
      "question": "Given the buggy code: `queryset = Machine . objects . filter ( layer_version__in = self . get_project_layer_versions ( self ) )`, rewrite it into a correct version. (Bug type: SAME_FUNCTION_LESS_ARGS)"
    },
    {
      "question": "Correct the following line while preserving intent: `result = runCmd ( 'git rev-parse --show-toplevel' )`  (SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Replace the buggy snippet with a correct one: `if newlines [ - 1 ] == '\\n' and line == '\\n' : continue`  [pattern=MORE_SPECIFIC_IF]"
    },
    {
      "question": "Correct the following line while preserving intent: `if p [ 'part_type' ] :`  (MORE_SPECIFIC_IF)"
    },
    {
      "question": "Produce the corrected version of: `self . assertEqual ( result . status , 0 )`  (family: SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Fix the error in: `if expand : self . expand_cache [ var ] . value = value`. Return only the corrected line. [MORE_SPECIFIC_IF]"
    },
    {
      "question": "Replace the buggy snippet with a correct one: `if value . startswith ( '/' ) and not '\\n' in value : dirvars [ value ] = var`  [pattern=MORE_SPECIFIC_IF]"
    },
    {
      "question": "Fix the error in: `if self . server_socket : self . server_socket . close ( ) self . server_socket = None`. Return only the corrected line. [MORE_SPECIFIC_IF]"
    },
    {
      "question": "Correct the following line while preserving intent: `f = tempfile . NamedTemporaryFile ( dir = \"/tmp/s/\" , delete = False )`  (SAME_FUNCTION_LESS_ARGS)"
    },
    {
      "question": "Fix the following statement so it is correct: `f = i [ 0 ]` (Pattern: ADD_FUNCTION_AROUND_EXPRESSION)"
    },
    {
      "question": "Correct the following line while preserving intent: `def test_foo ( self ) : bitbake_cmd = '-c configure emptytest' error_msg = 'ERROR: emptytest: The new md5 checksum is 8d777f385d3dfec8815d20f7496026dc'`  (SINGLE_TOKEN)"
    },
    {
      "question": "Produce the corrected version of: `def_destsuffix = \"%s/\" % os . path . basename ( subdir )`  (family: ADD_METHOD_CALL)"
    },
    {
      "question": "Produce the corrected version of: `recipe_info [ 'version' ] = event . _depgraph [ 'pn' ] [ pn ] [ 'version' ]`  (family: ADD_METHOD_CALL)"
    },
    {
      "question": "Correct the following line while preserving intent: `self . contains [ k ] = parser . contains [ k ]`  (ADD_METHOD_CALL)"
    },
    {
      "question": "Apply the minimal change that makes this line correct: `kernel_ver = open ( kernel_abi_ver_file ) . read ( )`  (ADD_METHOD_CALL)"
    },
    {
      "question": "Produce the corrected version of: `for pkg in registered_pkgs : self . pm . save_rpmpostinist ( pkg )`  (family: ADD_METHOD_CALL)"
    },
    {
      "question": "Apply the minimal change that makes this line correct: `status_file = os . path . join ( self . image_rootfs , self . d . getVar ( 'OPKGLIBDIR' , True ) , \"opkg\" , \"status\" )`  (ADD_METHOD_CALL)"
    },
    {
      "question": "Given the buggy code: `localdata . setVar ( 'OVERRIDES' , 'task-%s:%s' % ( task [ 3 : ] , d . getVar ( 'OVERRIDES' , False ) ) )`, rewrite it into a correct version. (Bug type: ADD_METHOD_CALL)"
    },
    {
      "question": "Fix the error in: `if format == \"file\" : tmp_output = \"\" for line in output . split ( '\\n' ) : pkg , pkg_file , pkg_arch = line . split ( )`. Return only the corrected line. [MORE_SPECIFIC_IF]"
    },
    {
      "question": "Replace the buggy snippet with a correct one: `progressbar . ProgressBar . __init__ ( self , maxval , [ self . msg + \": \" ] + widgets )`  [pattern=SAME_FUNCTION_MORE_ARGS]"
    },
    {
      "question": "Given the buggy code: `entry [ 'childcount' ] = Target_File . objects . filter ( directory__path = o . path ) . all ( ) . count ( )`, rewrite it into a correct version. (Bug type: SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Apply the minimal change that makes this line correct: `if event . taskpid != 0 and event . levelno <= format . NOTE : continue`  (MORE_SPECIFIC_IF)"
    },
    {
      "question": "Identify the issue in `seq = eval ( seqStr )` and provide the corrected single-line fix. [ADD_FUNCTION_AROUND_EXPRESSION]"
    },
    {
      "question": "Fix the error in: `widgets . ROI . __init__ ( self , [ 0 , 0 ] , [ 1 , 1 ] )`. Return only the corrected line. [SAME_FUNCTION_MORE_ARGS]"
    },
    {
      "question": "Produce the corrected version of: `return QtGui . QGraphicsObject . sceneTransform ( )`  (family: SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Apply the minimal change that makes this line correct: `response = butler . queryMetadata ( datasetType = 'src' , key = None , format = [ 'filter' ] , dataId = dId )`  (SAME_FUNCTION_LESS_ARGS)"
    },
    {
      "question": "Apply the minimal change that makes this line correct: `if \"BBEVENTLOG\" is os . environ : options . writeeventlog = os . environ [ \"BBEVENTLOG\" ]`  (CHANGE_BINARY_OPERATOR)"
    },
    {
      "question": "Identify the issue in `popen = subprocess . Popen ( \"which cve-check-tool\" , shell = True , stdout = subprocess . PIPE )` and provide the corrected single-line fix. [SAME_FUNCTION_MORE_ARGS]"
    },
    {
      "question": "Produce the corrected version of: `return len ( frozenset ( self ) )`  (family: ADD_FUNCTION_AROUND_EXPRESSION)"
    },
    {
      "question": "This line is buggy: `if 'fakeroot' in taskdep and taskname in taskdep [ 'fakeroot' ] : if not self . rq . fakeworker : self . rq . start_fakeworker ( self ) self . rq . fakeworker . stdin . write ( \"<runtask>\" + pickle . dumps ( ( fn , realtask , taskname , True , self . cooker . collection . get_file_appends ( fn ) , None ) ) + \"</runtask>\" )`. Provide the correct version only. [MORE_SPECIFIC_IF]"
    },
    {
      "question": "Replace the buggy snippet with a correct one: `self . progress_chunk = max ( self . toparse / 100 , 1 )`  [pattern=ADD_FUNCTION_AROUND_EXPRESSION]"
    },
    {
      "question": "Apply the minimal change that makes this line correct: `self . assertEqual ( result . status , 0 )`  (SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Correct the following line while preserving intent: `ver_info = out . rstrip ( ) . split ( '\\n' )`  (ADD_METHOD_CALL)"
    },
    {
      "question": "Fix the following statement so it is correct: `parser . add_argument ( '-s' , '--skip' , help = 'Skip specified recipes (comma-separated without spaces, wildcards allowed)' , metavar = 'PNLIST' )` (Pattern: SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Fix the error in: `pager . communicate ( help )`. Return only the corrected line. [ADD_FUNCTION_AROUND_EXPRESSION]"
    },
    {
      "question": "Fix the following statement so it is correct: `furl = urllib2 . urlopen ( req )` (Pattern: SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Fix the error in: `def list_uasge ( ) : usage ( \"list [-q]:\\n\\t-q\\tOnly print the name and version of the packages\" )`. Return only the corrected line. [SINGLE_TOKEN]"
    },
    {
      "question": "Given the buggy code: `if not giturl in localremotes : raise BuildSetupException ( \"Existing git repository at %s, but with different remotes ('%s', expected '%s'). Toaster will not continue out of fear of damaging something.\" % ( localdirname , \", \" . join ( localremotes . split ( \"\\n\" ) ) , giturl ) )`, rewrite it into a correct version. (Bug type: MORE_SPECIFIC_IF)"
    },
    {
      "question": "Produce the corrected version of: `with open ( os . path . join ( os . getenv ( 'BUILDDIR' ) , '.runbuilds.pid' ) ) as pidf : os . kill ( int ( pidf . read ( ) ) , SIGUSR1 )`  (family: SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Fix the error in: `ret = subprocess . call ( cmd , stdout = f if logfile else None , stderr = subprocess . STDOUT , shell = True )`. Return only the corrected line. [SAME_FUNCTION_MORE_ARGS]"
    },
    {
      "question": "Identify the issue in `if len ( spike ) >= minspk : misi = numpy . mean ( numpy . diff ( spike [ - 3 : ] ) ) ar [ i ] = misi / fisi [ i ]` and provide the corrected single-line fix. [MORE_SPECIFIC_IF]"
    },
    {
      "question": "Correct the following line while preserving intent: `ret = BeautifulSoup ( td ) . text`  (SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Correct the following line while preserving intent: `for line in output . splitlines ( ) : if line . startswith ( 'data.tar.' ) : datafile = line break`  (ADD_METHOD_CALL)"
    },
    {
      "question": "Correct the following line while preserving intent: `return datetime ( 1970 , 1 , 1 ) + timedelta ( seconds = secs )`  (ADD_FUNCTION_AROUND_EXPRESSION)"
    },
    {
      "question": "Fix the error in: `tool_stderr_value = result [ 1 ]`. Return only the corrected line. [ADD_METHOD_CALL]"
    },
    {
      "question": "Identify the issue in `analysis . append ( stdout )` and provide the corrected single-line fix. [ADD_METHOD_CALL]"
    },
    {
      "question": "Fix the error in: `if tolines [ - 1 ] . strip ( ) != '' : tolines . append ( '\\n' )`. Return only the corrected line. [MORE_SPECIFIC_IF]"
    },
    {
      "question": "Fix the error in: `else : pbar = BBProgress ( \"0: %s (pid %s) \" % ( activetasks [ t ] [ \"title\" ] , t ) , 100 )`. Return only the corrected line. [SAME_FUNCTION_MORE_ARGS]"
    },
    {
      "question": "Correct the following line while preserving intent: `srcfile = os . path . basename ( parseres . path )`  (ADD_METHOD_CALL)"
    },
    {
      "question": "Correct the following line while preserving intent: `ret = self . target . run ( 'reboot &' ) [ 0 ]`  (SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Given the buggy code: `def test_layer_git_revisions_are_displayed_and_do_not_fail_without_git_repo ( self ) :`, rewrite it into a correct version. (Bug type: SINGLE_TOKEN)"
    },
    {
      "question": "This line is buggy: `part . add_argument ( '--no-table' )`. Provide the correct version only. [SAME_FUNCTION_MORE_ARGS]"
    },
    {
      "question": "This line is buggy: `self . description = unicode ( description ) if description else None`. Provide the correct version only. [SINGLE_TOKEN]"
    },
    {
      "question": "Identify the issue in `return plain . strip ( '\\x00' )` and provide the corrected single-line fix. [ADD_METHOD_CALL]"
    },
    {
      "question": "Given the buggy code: `return plain . strip ( '\\x00' )`, rewrite it into a correct version. (Bug type: ADD_METHOD_CALL)"
    },
    {
      "question": "Correct the following line while preserving intent: `pageid = pages . keys ( ) [ 0 ]`  (ADD_FUNCTION_AROUND_EXPRESSION)"
    },
    {
      "question": "Apply the minimal change that makes this line correct: `def test_suggsetion_none ( self ) : \"\"\"Test getting a suggestion when there is no suggestion.\"\"\" search , suggestion = wikipedia . search ( \"qmxjsudek\" , suggestion = True ) self . assertEqual ( search , [ ] )`  (SINGLE_TOKEN)"
    },
    {
      "question": "Apply the minimal change that makes this line correct: `return defer . succeed ( None )`  (SINGLE_TOKEN)"
    },
    {
      "question": "Produce the corrected version of: `git_alts_file . write ( self . reference )`  (family: ADD_FUNCTION_AROUND_EXPRESSION)"
    },
    {
      "question": "Given the buggy code: `return SourceStamp ( branch = self . branch , revision = got_revision , patch = self . patch , repository = self . repository , project = self . project )`, rewrite it into a correct version. (Bug type: SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "This line is buggy: `try : changes = self . getChanges ( request ) except ValueError as err : request . setResponseCode ( 400 , err . args [ 0 ] ) return err . args [ 0 ]`. Provide the correct version only. [SINGLE_TOKEN]"
    },
    {
      "question": "Fix the following statement so it is correct: `def __init__ ( self , repourl , branch = 'master' , workdir = None , pollinterval = 10 * 60 , gitbin = 'git' , usetimestamps = True , category = None , project = None ) :` (Pattern: SINGLE_TOKEN)"
    },
    {
      "question": "Fix the error in: `def smoothPaht ( path ) : pass`. Return only the corrected line. [SINGLE_TOKEN]"
    },
    {
      "question": "Given the buggy code: `if ( currCell . weight != 100 ) : evalNeighbor ( currCell , current ) traversal . append ( G [ index ] )`, rewrite it into a correct version. (Bug type: MORE_SPECIFIC_IF)"
    },
    {
      "question": "Given the buggy code: `return`, rewrite it into a correct version. (Bug type: SINGLE_TOKEN)"
    },
    {
      "question": "Fix the following statement so it is correct: `x = p . new_variable ( )` (Pattern: SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Correct the following line while preserving intent: `return True`  (SINGLE_TOKEN)"
    },
    {
      "question": "This line is buggy: `array ( [ [ False , False , True ] , [ False , True , False ] , [ True , False , True ] ] )`. Provide the correct version only. [SAME_FUNCTION_MORE_ARGS]"
    },
    {
      "question": "Produce the corrected version of: `if p == 'ascii' and working [ p ] [ 'ratio' ] == 0. : break`  (family: MORE_SPECIFIC_IF)"
    },
    {
      "question": "Fix the following statement so it is correct: `return str ( self ) . encode ( encoding )` (Pattern: SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Given the buggy code: `if not callable ( attr ) and not attr . startswith ( \"__\" ) and attr != \"makeBlock\" : if block . __dict__ [ attr ] in [ \"\" , [ ] , None , { } ] : del ( block . __dict__ [ attr ] )`, rewrite it into a correct version. (Bug type: MORE_SPECIFIC_IF)"
    },
    {
      "question": "Correct the following line while preserving intent: `topics = forum . topics . order_by ( '-sticky' ) . select_related ( )`  (SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Fix the error in: `response [ 'Content-Disposition' ] = 'attachment; filename=%s' % attachment . name`. Return only the corrected line. [ADD_METHOD_CALL]"
    },
    {
      "question": "Produce the corrected version of: `return HttpResponseRedirect ( reverse ( 'djangobb:forum_profile' ) )`  (family: SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Given the buggy code: `return self . single_stream ( 'tokens' , paths = None , doc_ids = doc_ids , cache_list = cache_list )`, rewrite it into a correct version. (Bug type: SINGLE_TOKEN)"
    },
    {
      "question": "Replace the buggy snippet with a correct one: `print \"[FritzCallhtml2utf8] ValueError \" + key + \"/\" + codepoint`  [pattern=ADD_FUNCTION_AROUND_EXPRESSION]"
    },
    {
      "question": "Fix the following statement so it is correct: `EPGSelection . __init__ ( * args )` (Pattern: SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Replace the buggy snippet with a correct one: `if suggestions : if not self . shown : self . show ( ) self . suggestionlist . update ( suggestions )`  [pattern=MORE_SPECIFIC_IF]"
    },
    {
      "question": "Given the buggy code: `center_pos = np . mean ( util . most_neighbor_clustering ( center_ls , 5 ) )`, rewrite it into a correct version. (Bug type: SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Fix the error in: `head3 = self . font3 . render ( str ( self . scores ) , 1 , ( white ) )`. Return only the corrected line. [ADD_FUNCTION_AROUND_EXPRESSION]"
    },
    {
      "question": "Given the buggy code: `def get_constructor ( self ) : rv = \"\" for i , stepper in enumerate ( self . stepperList ) : rv += \"const char {0:s}_index = {1:d};\\n\" . format ( stepper . label , i )`, rewrite it into a correct version. (Bug type: SINGLE_TOKEN)"
    },
    {
      "question": "Produce the corrected version of: `html = self . urlread ( url ) . decode ( 'utf-8' )`  (family: ADD_FUNCTION_AROUND_EXPRESSION)"
    },
    {
      "question": "Fix the error in: `else : path = info [ 'name' ]`. Return only the corrected line. [ADD_METHOD_CALL]"
    },
    {
      "question": "This line is buggy: `return true`. Provide the correct version only. [SINGLE_TOKEN]"
    },
    {
      "question": "This line is buggy: `assert_response ( response , jsonp )`. Provide the correct version only. [SAME_FUNCTION_MORE_ARGS]"
    },
    {
      "question": "Apply the minimal change that makes this line correct: `for action in self . actions : self . tree . addVersion ( action . id , action . prevId )`  (ADD_FUNCTION_AROUND_EXPRESSION)"
    },
    {
      "question": "Apply the minimal change that makes this line correct: `return Object . getName ( )`  (SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Fix the error in: `def db_retrieve_script_pass ( script ) : \"\"\" Retrieves a script value \"\"\"`. Return only the corrected line. [SINGLE_TOKEN]"
    },
    {
      "question": "Replace the buggy snippet with a correct one: `if not os . path . exists ( new_local_path ) and script . get ( test ) == False : os . makedirs ( new_local_path )`  [pattern=SINGLE_TOKEN]"
    },
    {
      "question": "Replace the buggy snippet with a correct one: `uri = uri + \"?\" + urlencode ( params )`  [pattern=ADD_METHOD_CALL]"
    },
    {
      "question": "Given the buggy code: `print 'skip task %s/%s (%s) as the status is %s' % ( t [ 'id' ] , t [ 'index' ] , t [ 'name' ] . encode ( default_encoding ) , t [ 'status_text' ] )`, rewrite it into a correct version. (Bug type: ADD_FUNCTION_AROUND_EXPRESSION)"
    },
    {
      "question": "Fix the error in: `task = lixian_query . get_task_by_id ( id )`. Return only the corrected line. [SAME_FUNCTION_MORE_ARGS]"
    },
    {
      "question": "Apply the minimal change that makes this line correct: `link = 'http://dynamic.cloud.vip.xunlei.com/interface/get_torrent?userid=%s&infoid=%s' % ( self . id , sha1 )`  (ADD_METHOD_CALL)"
    },
    {
      "question": "Fix the following statement so it is correct: `time_dirs . sort ( )` (Pattern: SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Given the buggy code: `def _get_poin_data_map ( self ) : \"\"\" get map for mesh pointwise data\n         \"\"\"`, rewrite it into a correct version. (Bug type: SINGLE_TOKEN)"
    },
    {
      "question": "This line is buggy: `response [ 'keymap' ] [ p [ i ] . upper ( ) ] = \"arc_\" + p`. Provide the correct version only. [ADD_METHOD_CALL]"
    },
    {
      "question": "Apply the minimal change that makes this line correct: `ss_output = geniass_post_p . stdout . read ( )`  (ADD_METHOD_CALL)"
    },
    {
      "question": "Apply the minimal change that makes this line correct: `port_path_list = self . config [ 'port_path_list' ]`  (ADD_FUNCTION_AROUND_EXPRESSION)"
    },
    {
      "question": "Fix the following statement so it is correct: `conn . request ( 'POST' , url_soup . path , ann_obj . get_document_text ( ) , headers = req_headers )` (Pattern: ADD_METHOD_CALL)"
    },
    {
      "question": "Apply the minimal change that makes this line correct: `Messager . error ( err_str )`  (SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Identify the issue in `if end >= ostart and start <= oend : Messager . error ( 'Text-bound annotation spans overlap' ) raise IdedAnnotationLineSyntaxError ( id , self . ann_line , self . ann_line_num + 1 , input_file_path )` and provide the corrected single-line fix. [CHANGE_BINARY_OPERATOR]"
    },
    {
      "question": "Fix the error in: `def do_GET ( self ) : query = parse_qs ( urlparse ( self . path ) . query )`. Return only the corrected line. [SINGLE_TOKEN]"
    },
    {
      "question": "Produce the corrected version of: `methodBox = self . parent ( ) . parent ( ) . parent ( )`  (family: ADD_METHOD_CALL)"
    },
    {
      "question": "Correct the following line while preserving intent: `self . vtPipeline = self . vtController . current_pipeline`  (ADD_FUNCTION_AROUND_EXPRESSION)"
    },
    {
      "question": "This line is buggy: `def photo_url ( self ) : return \"https://graph.facebook.com/{0}/picture\" . format ( self . uid )`. Provide the correct version only. [SINGLE_TOKEN]"
    },
    {
      "question": "Correct the following line while preserving intent: `nr_ev = dict ( )`  (SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Fix the following statement so it is correct: `logging . debug ( ' - environment: ' + environment )` (Pattern: ADD_FUNCTION_AROUND_EXPRESSION)"
    },
    {
      "question": "This line is buggy: `path = self . getInternalPiconOld ( self , refstr )`. Provide the correct version only. [SAME_FUNCTION_LESS_ARGS]"
    },
    {
      "question": "Produce the corrected version of: `hash = sha_constructor ( settings . SECRET_KEY + unicode ( user . id ) + user . is_active + user . email + unicode ( timestamp ) ) . hexdigest ( ) [ : : 2 ]`  (family: ADD_FUNCTION_AROUND_EXPRESSION)"
    },
    {
      "question": "Fix the following statement so it is correct: `if cellWidget is not None : return cellWidget . canvas` (Pattern: MORE_SPECIFIC_IF)"
    },
    {
      "question": "Replace the buggy snippet with a correct one: `if not ( TypeHelper . isKnownType ( args [ 0 ] ) ) : self . error ( Messages . Error . NO_SUCH_TYPE % args [ 0 ] )`  [pattern=MORE_SPECIFIC_IF]"
    },
    {
      "question": "This line is buggy: `residue = chain . residues . get ( oldID = residue_props [ 'oldID' ] )`. Provide the correct version only. [ADD_FUNCTION_AROUND_EXPRESSION]"
    },
    {
      "question": "Produce the corrected version of: `annotations [ stddev ] = StdDev ( field [ 1 ] , sample = True )`  (family: SAME_FUNCTION_LESS_ARGS)"
    },
    {
      "question": "Correct the following line while preserving intent: `parts = probe_str . split ( 3 )`  (SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Apply the minimal change that makes this line correct: `return put_method ( request , Card )`  (SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Identify the issue in `schema = BallotSchema ( )` and provide the corrected single-line fix. [ADD_METHOD_CALL]"
    },
    {
      "question": "Produce the corrected version of: `return self . getPLSContent ( callback )`  (family: SAME_FUNCTION_LESS_ARGS)"
    },
    {
      "question": "Fix the error in: `for i in root . getFiles ( \"/usr/lib/enigma2/python/Plugins/Extensions/GoogleMaps/\" ) : l = lambda name , filepath : self . openFolderRoot ( name , filepath ) list . append ( ( i [ 0 ] , i [ 1 ] , l ) )`. Return only the corrected line. [SINGLE_TOKEN]"
    },
    {
      "question": "Identify the issue in `basename = filename . encode ( 'ascii' , 'ignore' )` and provide the corrected single-line fix. [ADD_METHOD_CALL]"
    },
    {
      "question": "This line is buggy: `payload = { \"internal_status\" : internal_status , 'pipeline_error_detail' : None }`. Provide the correct version only. [SINGLE_TOKEN]"
    },
    {
      "question": "Fix the following statement so it is correct: `parser . add_argument ( '--passphrase' , required = False , help = 'Passphrase to unlock the singing key' )` (Pattern: SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Replace the buggy snippet with a correct one: `my_str += \"%s = %s\\n\" % ( option , self . config . get ( section , option , '' ) , )`  [pattern=SAME_FUNCTION_LESS_ARGS]"
    },
    {
      "question": "Correct the following line while preserving intent: `except ValueError : os . makedirs ( homedir )`  (SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Fix the error in: `p = _subprocess . Popen ( [ command ] + list ( self . version_options ) , stdin = popen_stdin , stdout = _subprocess . PIPE , stderr = _subprocess . PIPE , close_fds = True , shell = False , universal_newlines = True )`. Return only the corrected line. [SAME_FUNCTION_LESS_ARGS]"
    },
    {
      "question": "Replace the buggy snippet with a correct one: `include_path = os . path . join ( '~' , rel_path )`  [pattern=ADD_FUNCTION_AROUND_EXPRESSION]"
    },
    {
      "question": "Fix the error in: `fr_name = ' ' . join ( [ word . capitalize ( ) for word in fr_names [ n ] . split ( ' ' ) ] )`. Return only the corrected line. [ADD_METHOD_CALL]"
    },
    {
      "question": "Identify the issue in `return make_resource_from_httperror ( self . _get ( self , * args , ** kwargs ) )` and provide the corrected single-line fix. [SAME_FUNCTION_LESS_ARGS]"
    },
    {
      "question": "Fix the error in: `where = [ \"\"\"\n                            \"forum_rootnode_doc\".\"node_id\" = \"forum_node\".\"id\" AND (\"forum_rootnode_doc\".\"document\" @@ to_tsquery('english', %s) OR\n                            \"forum_node\".\"title\" ILIKE '\"\"\" + keywords + \"\"\"%%')\n                            \"\"\" ] ,`. Return only the corrected line. [ADD_METHOD_CALL]"
    },
    {
      "question": "Identify the issue in `for key , tag in list : if len ( tag ) > settings . FORM_MAX_LENGTH_OF_TAG or len ( tag ) < settings . FORM_MIN_LENGTH_OF_TAG : raise forms . ValidationError ( _ ( 'please use between %(min)s and %(max)s characters in you tags' ) % { 'min' : settings . FORM_MIN_LENGTH_OF_TAG , 'max' : settings . FORM_MAX_LENGTH_OF_TAG } ) if not tagname_re . match ( tag ) :` and provide the corrected single-line fix. [ADD_METHOD_CALL]"
    },
    {
      "question": "Identify the issue in `auto = request . GET . get ( 'auto' )` and provide the corrected single-line fix. [SAME_FUNCTION_MORE_ARGS]"
    },
    {
      "question": "Fix the error in: `return self == question . author and self . reputation >= settings . REP_TO_REOPEN_OWN`. Return only the corrected line. [ADD_FUNCTION_AROUND_EXPRESSION]"
    },
    {
      "question": "Apply the minimal change that makes this line correct: `self . _description = mark_safe ( description )`  (ADD_FUNCTION_AROUND_EXPRESSION)"
    },
    {
      "question": "Correct the following line while preserving intent: `if self . playing ( ) : self . volume . set_property ( \"volume\" , value )`  (MORE_SPECIFIC_IF)"
    },
    {
      "question": "This line is buggy: `self . add ( self . video_queue , self . colorspc )`. Provide the correct version only. [SAME_FUNCTION_LESS_ARGS]"
    },
    {
      "question": "Replace the buggy snippet with a correct one: `make_orig_app ( MEI_tree , original_staves )`  [pattern=SAME_FUNCTION_MORE_ARGS]"
    },
    {
      "question": "Fix the following statement so it is correct: `binder = Binder ( )` (Pattern: SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Produce the corrected version of: `return super ( TypeManager , self ) . order_by ( 'parent__id' ) . reverse ( )`  (family: ADD_METHOD_CALL)"
    },
    {
      "question": "Identify the issue in `return super ( SerializedField , self ) . get_db_prep_save ( value , connection )` and provide the corrected single-line fix. [SAME_FUNCTION_LESS_ARGS]"
    },
    {
      "question": "Identify the issue in `if k != query_arg and k != kwargs_arg : mopts [ k if not k . startswith ( '--' ) else k [ 2 : ] ] = v` and provide the corrected single-line fix. [MORE_SPECIFIC_IF]"
    },
    {
      "question": "Produce the corrected version of: `return coll . get ( id = kwargs [ 'id' ] )`  (family: ADD_FUNCTION_AROUND_EXPRESSION)"
    },
    {
      "question": "Replace the buggy snippet with a correct one: `err_str = err_str + ( Messages . Info . POSSIBALE_ARGUMENTS_COMBINATIONS + str ( context_variants ) )`  [pattern=CHANGE_BINARY_OPERATOR]"
    },
    {
      "question": "Fix the error in: `if has_valid_attr ( syncb_command . settings , 'JSON_DOCUMENT' ) : session . file_name = getattr ( syncb_command . settings , document_name ) syncb_command . sessions . append ( session )`. Return only the corrected line. [SINGLE_TOKEN]"
    },
    {
      "question": "Apply the minimal change that makes this line correct: `if hasattr ( obj , 'modified_by'  : modified_by = obj . get_modified_by ( ) if modified_by : return modified_by . get_full_name ( )`  (SINGLE_TOKEN)"
    },
    {
      "question": "Fix the error in: `self . log_info ( p )`. Return only the corrected line. [ADD_METHOD_CALL]"
    },
    {
      "question": "Correct the following line while preserving intent: `return TemplateSyntaxError ( \"Undefined variable '{}'\" . format ( other ) )`  (SINGLE_TOKEN)"
    },
    {
      "question": "Fix the error in: `for key , fields in self . fieldset : res = '' for field_name in fields : field = form . fields [ field_name ]`. Return only the corrected line. [ADD_METHOD_CALL]"
    },
    {
      "question": "Identify the issue in `CaseType = Required ( Enum ( 'iph4bt' , 'iph4tough' , 'iph4vibe' , 'iph3bt' , 'iph3tough' , 'ipt4gbt' , 'bb9900bt' , 'kindlefirebt' , 'ssgs3vibe' , 'iph5bt' , 'iph5vibe' , 'iph5cbt' , 'iph5xtreme' , 'iph6bt' , 'iph6tough' , 'iph655bt' , 'iph655tough' , 'ipad4bt' , 'ipadminitough' , 'ipt5gbt' , 'ssgn2tough' , 'bbz10tough' , 'ssgs4bt' , 'ssgs4vibe' ) ) ,` and provide the corrected single-line fix. [SAME_FUNCTION_MORE_ARGS]"
    },
    {
      "question": "This line is buggy: `sys . stdout . write ( \", \" + arg [ 0 ] )`. Provide the correct version only. [ADD_FUNCTION_AROUND_EXPRESSION]"
    },
    {
      "question": "Produce the corrected version of: `_logger . log ( DupToLoggerLevel ( verb_level ) , unicode ( s , \"utf8\" ) )`  (family: SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Correct the following line while preserving intent: `_logger . log ( DupToLoggerLevel ( verb_level ) , s )`  (ADD_FUNCTION_AROUND_EXPRESSION)"
    },
    {
      "question": "This line is buggy: `expand_fn ( arg )`. Provide the correct version only. [ADD_METHOD_CALL]"
    },
    {
      "question": "Fix the error in: `handler = logging . FileHandler ( filename , 'w' )`. Return only the corrected line. [SAME_FUNCTION_LESS_ARGS]"
    },
    {
      "question": "Produce the corrected version of: `handler = logging . FileHandler ( filename , 'w' )`  (family: SAME_FUNCTION_LESS_ARGS)"
    },
    {
      "question": "Apply the minimal change that makes this line correct: `responce = api . subscribe ( fields = self . serialize_fields ( ) , list_ids = self . serialize_list_id ( ) , tags = self . serialize_tags ( ) , double_optin = self . double_optin )`  (SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Given the buggy code: `self . log_error ( request )`, rewrite it into a correct version. (Bug type: SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Fix the following statement so it is correct: `if change : instance = formsets [ 0 ] . queryset [ 0 ] instance . update_optin_email ( request ) instance . save ( )` (Pattern: MORE_SPECIFIC_IF)"
    },
    {
      "question": "Apply the minimal change that makes this line correct: `if ProjectModel . objects . filter ( members = request . user . id ) : return render ( request , 'project_management/project.html' , context ) else : raise Http404   No newline at end of file`  (SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Correct the following line while preserving intent: `line . strip ( ) and self . atomic_spec_factory ( line ) . add_to_import_data ( )`  (ADD_METHOD_CALL)"
    },
    {
      "question": "Fix the following statement so it is correct: `return { 'size' : sobject [ 'content-length' ] }` (Pattern: ADD_FUNCTION_AROUND_EXPRESSION)"
    },
    {
      "question": "Replace the buggy snippet with a correct one: `need_approval = RegisteredUser . objects . filter ( registered = True ) . filter ( approved = False )`  [pattern=ADD_METHOD_CALL]"
    },
    {
      "question": "Fix the following statement so it is correct: `self . write_tsv ( self , json_items )` (Pattern: SAME_FUNCTION_LESS_ARGS)"
    },
    {
      "question": "Fix the error in: `self . oauth_http ( self , method , uri , False )`. Return only the corrected line. [SAME_FUNCTION_LESS_ARGS]"
    },
    {
      "question": "Replace the buggy snippet with a correct one: `def __init__ ( self , duration = 2.0 , callback = None , defaults = None , ** style ) : defaults = defaults or { } style [ \"duration\" ] = duration`  [pattern=SINGLE_TOKEN]"
    },
    {
      "question": "Produce the corrected version of: `status_info = [ status for status in STATUS if status [ 'code' ] == code ]`  (family: ADD_FUNCTION_AROUND_EXPRESSION)"
    },
    {
      "question": "Identify the issue in `call_service ( '/capability_server/get_providers' , 'not_a_pkg/NotAnInterface' )` and provide the corrected single-line fix. [SAME_FUNCTION_MORE_ARGS]"
    },
    {
      "question": "Fix the following statement so it is correct: `return function ( * args , ** kwargs )` (Pattern: SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "This line is buggy: `smach . StateMachine . add ( 'WAITING_TRY_AGAIN' , Waiting_to_execute ( self . robot ) , transitions = { 'done' : 'EXECUTE_TRY_AGAIN' , 'preempted' : 'preempted' } )`. Provide the correct version only. [SAME_FUNCTION_MORE_ARGS]"
    },
    {
      "question": "Fix the following statement so it is correct: `matches2 = re . findall ( pattern3 , text )` (Pattern: ADD_FUNCTION_AROUND_EXPRESSION)"
    },
    {
      "question": "This line is buggy: `proc = subprocess . Popen ( args , stderr = subprocess . PIPE , stdout = subprocess . PIPE )`. Provide the correct version only. [SAME_FUNCTION_MORE_ARGS]"
    },
    {
      "question": "Apply the minimal change that makes this line correct: `self . _package_manager . add_package ( packageName , args , keywords )`  (SAME_FUNCTION_LESS_ARGS)"
    },
    {
      "question": "Correct the following line while preserving intent: `if m . generation_high and m . generation_high . id < current_generation . id : raise Exception , \"Area %s found, but not in current generation %s\" % ( m , current_generation )`  (MORE_SPECIFIC_IF)"
    },
    {
      "question": "Apply the minimal change that makes this line correct: `if len ( entities ) > 1 : rospy . loginfo ( 'choosing best entity from this list (name->weight):\\n\\t%s' , zip ( names , weights ) ) self . _current = min ( entities , key = self . weight_function ) else :`  (CHANGE_BINARY_OPERATOR)"
    },
    {
      "question": "Identify the issue in `answer = self . _robot . ears . recognize ( \"(yes|no)\" , { } , 10 )` and provide the corrected single-line fix. [SAME_FUNCTION_LESS_ARGS]"
    },
    {
      "question": "Identify the issue in `outcomes = options` and provide the corrected single-line fix. [ADD_FUNCTION_AROUND_EXPRESSION]"
    },
    {
      "question": "This line is buggy: `workshops = event . workshops . order_by ( '?' ) [ : 3 ]`. Provide the correct version only. [ADD_METHOD_CALL]"
    },
    {
      "question": "This line is buggy: `ticket , created = Ticket . objects . update_or_create ( code = code , event = event , defaults = ticket_data )`. Provide the correct version only. [ADD_METHOD_CALL]"
    },
    {
      "question": "Replace the buggy snippet with a correct one: `desc = registry . get_descriptor_by_name ( * ( type_str . split ( ':' ) ) )`  [pattern=SAME_FUNCTION_MORE_ARGS]"
    },
    {
      "question": "Apply the minimal change that makes this line correct: `self . delete_module ( * ( sigstring . split ( ':' ) ) )`  (SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Fix the error in: `if self . animation_step == self . num_animation_steps : self . animation_step = 1 self . timer . stop ( ) self . controller . animate_layout = False`. Return only the corrected line. [CHANGE_BINARY_OPERATOR]"
    },
    {
      "question": "Identify the issue in `if connector . obj . get_output ( connector . port ) == InvalidOutput : self . removeInputConnector ( iport , connector )` and provide the corrected single-line fix. [CHANGE_BINARY_OPERATOR]"
    },
    {
      "question": "Replace the buggy snippet with a correct one: `if ( 'file' in function . name . lower ( ) ) : browseButton = QMethodFileChooser ( self , lineEdit ) self . layout ( ) . addWidget ( browseButton , pIndex , 2 )`  [pattern=MORE_SPECIFIC_IF]"
    },
    {
      "question": "Fix the following statement so it is correct: `spec = s . split ( ':' )` (Pattern: SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "This line is buggy: `raise ModuleError ( \"unrecognized operation: '%s'\" % op )`. Provide the correct version only. [SAME_FUNCTION_MORE_ARGS]"
    },
    {
      "question": "Produce the corrected version of: `self . title = ' ' . join ( [ 'AMWG Diagnostics Set 1' , seasonid , 'means' , region ] ) + '\\n'`  (family: ADD_FUNCTION_AROUND_EXPRESSION)"
    },
    {
      "question": "Produce the corrected version of: `vw . makeName ( 'ptr_%s_%.8x' % ( tgtname , ptr ) )`  (family: SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Produce the corrected version of: `self . assertIs ( offset , - 1 )`  (family: ADD_FUNCTION_AROUND_EXPRESSION)"
    },
    {
      "question": "Fix the error in: `spaths = self . getSymbolikPaths ( fva , paths = paths , args = args , maxpath = maxpath )`. Return only the corrected line. [SAME_FUNCTION_MORE_ARGS]"
    },
    {
      "question": "Apply the minimal change that makes this line correct: `if rtype == vivisect . RTYPE_BASERELOC : vw . makePointer ( va , follow = True )`  (MORE_SPECIFIC_IF)"
    },
    {
      "question": "Replace the buggy snippet with a correct one: `self . curs = QtGui . QCursor ( self )`  [pattern=SAME_FUNCTION_LESS_ARGS]"
    },
    {
      "question": "Replace the buggy snippet with a correct one: `MemoryCanvas . __init__ ( self , mem , syms = None )`  [pattern=SINGLE_TOKEN]"
    },
    {
      "question": "This line is buggy: `MemoryCanvas . __init__ ( self , mem , syms = None )`. Provide the correct version only. [SINGLE_TOKEN]"
    },
    {
      "question": "Fix the following statement so it is correct: `parser = argparse . ArgumentParser ( description = 'Local MathHub Tool.' )` (Pattern: SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "This line is buggy: `return translated`. Provide the correct version only. [ADD_FUNCTION_AROUND_EXPRESSION]"
    },
    {
      "question": "Replace the buggy snippet with a correct one: `self . games = [ Game ( self . players [ i % 2 ] , self . players [ ( i + 1 ) % 2 ] ) for i in xrange ( self . numberOfGames ) ]`  [pattern=SAME_FUNCTION_MORE_ARGS]"
    },
    {
      "question": "Produce the corrected version of: `self . colWidth = 5000`  (family: SINGLE_TOKEN)"
    },
    {
      "question": "Apply the minimal change that makes this line correct: `def UndateUnsatisfy ( self , DocProbVec , lUnsatisfy ) : for i in range ( len ( lUnsatisfy ) ) : score = DocProbVec . GetDim ( str ( i ) ) lUnsatisfy [ i ] *= 1 - score`  (SINGLE_TOKEN)"
    },
    {
      "question": "Given the buggy code: `def UndateUnsatisfy ( self , DocProbVec , lUnsatisfy ) : if [ ] == lUnsatisfy : return SumTopProb = sum ( DocProbVec . hDim . values ( ) )`, rewrite it into a correct version. (Bug type: SINGLE_TOKEN)"
    },
    {
      "question": "Given the buggy code: `lDocProbVec = self . GetDocProb ( qid , lDoc )`, rewrite it into a correct version. (Bug type: SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Given the buggy code: `self . mrender = RenderCenter ( self . msizes , self . mbackground )`, rewrite it into a correct version. (Bug type: ADD_METHOD_CALL)"
    },
    {
      "question": "Apply the minimal change that makes this line correct: `if ( ( vartype ( value ) != \"QUrl\" ) and ( value . find ( \"://\" ) > 0 ) ) : value = QUrl ( value )`  (ADD_FUNCTION_AROUND_EXPRESSION)"
    },
    {
      "question": "Correct the following line while preserving intent: `if limitToOne : values = [ values [ 0 ] ]`  (MORE_SPECIFIC_IF)"
    },
    {
      "question": "Replace the buggy snippet with a correct one: `g . setStops ( zip ( pos , color ) )`  [pattern=ADD_FUNCTION_AROUND_EXPRESSION]"
    },
    {
      "question": "Replace the buggy snippet with a correct one: `doc = xml . parseString ( xmlStr )`  [pattern=ADD_METHOD_CALL]"
    },
    {
      "question": "This line is buggy: `assert_raises ( AlreadyOwned , m2 . acquire )`. Provide the correct version only. [SAME_FUNCTION_MORE_ARGS]"
    },
    {
      "question": "This line is buggy: `r . submit ( \"spam\" , \"overview for \" + parent . author . name , url = \"http://reddit.com/user/\" + parent . author . name )`. Provide the correct version only. [SAME_FUNCTION_MORE_ARGS]"
    },
    {
      "question": "Correct the following line while preserving intent: `h = Hash ( 'sha1' , group )`  (SAME_FUNCTION_LESS_ARGS)"
    },
    {
      "question": "Identify the issue in `if result != \"\" and result [ 0 ] == \"-\" : i = lindex ( self . warningsList , \"BUG001\" , 0 ) if i != None :` and provide the corrected single-line fix. [MORE_SPECIFIC_IF]"
    },
    {
      "question": "Replace the buggy snippet with a correct one: `show_nav = kwargs . get ( 'show_nav' )`  [pattern=SAME_FUNCTION_MORE_ARGS]"
    },
    {
      "question": "Produce the corrected version of: `c . hsva = h , s , v , a`  (family: ADD_FUNCTION_AROUND_EXPRESSION)"
    },
    {
      "question": "Produce the corrected version of: `if s : rect = pygame . draw . circle ( srf , s , pos , r , wt ) . inflate ( wt , wt )`  (family: MORE_SPECIFIC_IF)"
    },
    {
      "question": "Produce the corrected version of: `S , j , out = range ( 256 ) , 0 , [ ]`  (family: ADD_FUNCTION_AROUND_EXPRESSION)"
    },
    {
      "question": "Apply the minimal change that makes this line correct: `return xmlrpclib . Binary ( open ( path ) . read ( 0 ) )`  (SAME_FUNCTION_LESS_ARGS)"
    },
    {
      "question": "Produce the corrected version of: `decoder = FfmpegDecoder ( info [ \"path\" ] , self . reactor , self . replayGain ( info ) )`  (family: ADD_METHOD_CALL)"
    },
    {
      "question": "Produce the corrected version of: `args . session . add ( Topic ( words = ', ' . join ( topic [ 1 : ] ) ) )`  (family: SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Replace the buggy snippet with a correct one: `cages = \", \" . join ( [ self . cage_stays [ i ] . cage_id + \"(\" + self . cage_stays [ i ] . start_date + \" - \" + self . cage_stays [ i ] . start_date + \")\" for i in range ( len ( self . cage_stays ) ) ] ) ,`  [pattern=ADD_FUNCTION_AROUND_EXPRESSION]"
    },
    {
      "question": "Fix the following statement so it is correct: `value = getattr ( self . sim . _target , self . attribute )` (Pattern: ADD_METHOD_CALL)"
    },
    {
      "question": "Correct the following line while preserving intent: `super ( SillySim , self ) . __init__ ( stepfunc , self . target )`  (SAME_FUNCTION_LESS_ARGS)"
    },
    {
      "question": "Produce the corrected version of: `if log_file : log_file . close ( ) sys . stdout = stdout_old`  (family: MORE_SPECIFIC_IF)"
    },
    {
      "question": "Apply the minimal change that makes this line correct: `return render_template ( \"jobs.html\" , jobs = sorted ( sched . get_jobs ( ) ) , media = media , datetime = datetime . now ( ) , current_job = current_job , _ = translation . ugettext , perms = perms , player = media_player )`  (ADD_METHOD_CALL)"
    },
    {
      "question": "Fix the error in: `return urlparse . urlunsplit ( ( scheme , netloc , path , qs , anchor ) )`. Return only the corrected line. [ADD_METHOD_CALL]"
    },
    {
      "question": "Identify the issue in `return Rational ( int ( p ) , q )` and provide the corrected single-line fix. [ADD_FUNCTION_AROUND_EXPRESSION]"
    },
    {
      "question": "Correct the following line while preserving intent: `if '+' in op : register , offset = op . split ( '+' ) offset = hex_to_num ( offset ) elif '-' in op :`  (MORE_SPECIFIC_IF)"
    },
    {
      "question": "Correct the following line while preserving intent: `if item . text ( ) == 'Offloaded' : self . _avResListWidget . setCurrentRow ( index ) item . setCheckState ( 2 ) else :`  (ADD_FUNCTION_AROUND_EXPRESSION)"
    },
    {
      "question": "Fix the following statement so it is correct: `cumu += perc_v` (Pattern: SINGLE_TOKEN)"
    },
    {
      "question": "Identify the issue in `def test_ln_args ( ) : assert Order ( ln ( 2 * x ) ) . expr == ln ( x ) assert Order ( ln ( y * x ) ) . expr == ln ( x ) + ln ( y ) assert Order ( ln ( x ** 3 ) ) . expr == ln ( x )` and provide the corrected single-line fix. [SINGLE_TOKEN]"
    },
    {
      "question": "Produce the corrected version of: `if self . options [ report . lower ( ) ] [ 'enabled' ] : return True else : return False`  (family: MORE_SPECIFIC_IF)"
    },
    {
      "question": "Replace the buggy snippet with a correct one: `if \"PE32\" in file_info [ \"type\" ] : static = PortableExecutable ( self . _file_path ) . process ( )`  [pattern=MORE_SPECIFIC_IF]"
    },
    {
      "question": "Replace the buggy snippet with a correct one: `assert 4j * x != 4.0 * x * I`  [pattern=CHANGE_BINARY_OPERATOR]"
    },
    {
      "question": "Produce the corrected version of: `fh = logging . FileHandler ( os . path . join ( \"log\" , \"cuckoo.log\" ) )`  (family: SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Replace the buggy snippet with a correct one: `argument [ \"value\" ] = convert_to_printable ( arg_value )`  [pattern=ADD_METHOD_CALL]"
    },
    {
      "question": "Replace the buggy snippet with a correct one: `print ( '1' )`  [pattern=SAME_FUNCTION_LESS_ARGS]"
    },
    {
      "question": "Correct the following line while preserving intent: `if self . size < 10 * 1024 and time_range < 1.0 : return`  (CHANGE_BINARY_OPERATOR)"
    },
    {
      "question": "Apply the minimal change that makes this line correct: `self . expect_and_run_command ( '-D%s=%s' % definition . items ( ) [ 0 ] )`  (ADD_FUNCTION_AROUND_EXPRESSION)"
    },
    {
      "question": "Produce the corrected version of: `self . assertEqual ( brid_dict . keys ( ) , [ 77 ] )`  (family: ADD_FUNCTION_AROUND_EXPRESSION)"
    },
    {
      "question": "Apply the minimal change that makes this line correct: `count_query = query . count ( )`  (ADD_METHOD_CALL)"
    },
    {
      "question": "Replace the buggy snippet with a correct one: `for arg in constructorArgs : if arg not in BuildStep . parms : bad ( arg ) del constructorArgs [ arg ]`  [pattern=ADD_FUNCTION_AROUND_EXPRESSION]"
    },
    {
      "question": "Produce the corrected version of: `undecodableText = p4change [ 2 ] + b\"\\x81\"`  (family: ADD_METHOD_CALL)"
    },
    {
      "question": "Identify the issue in `unilist . append ( unicode ( line , 'utf-8' ) )` and provide the corrected single-line fix. [SAME_FUNCTION_MORE_ARGS]"
    },
    {
      "question": "Correct the following line while preserving intent: `dict ( external_idstring = 'extid' , reason = 'rsn1' , sourcestamps = [ 91 ] , submitted_at = datetime2epoch ( datetime . datetime ( 1978 , 6 , 15 , 12 , 31 , 15 ) ) , complete_at = datetime2epoch ( datetime . datetime ( 1979 , 6 , 15 , 12 , 31 , 15 ) ) , complete = False , results = - 1 , bsid = 91 )`  (SINGLE_TOKEN)"
    },
    {
      "question": "Given the buggy code: `if hasattr ( LogFile , fromFullPath ) : return LogFile . fromFullPath ( path , rotateLength = rotateLength , maxRotatedFiles = maxRotatedFiles )`, rewrite it into a correct version. (Bug type: SINGLE_TOKEN)"
    },
    {
      "question": "Correct the following line while preserving intent: `x = 10 ** 80 / 3 + 10 ** 70 * j / 7`  (CHANGE_BINARY_OPERATOR)"
    },
    {
      "question": "Fix the following statement so it is correct: `return { type : 'text/plain' , 'value' : '' }` (Pattern: SINGLE_TOKEN)"
    },
    {
      "question": "Replace the buggy snippet with a correct one: `except Exception as e : raise _error . IMAPAuthenticationError ( server = server , username = username )`  [pattern=SAME_FUNCTION_MORE_ARGS]"
    },
    {
      "question": "Correct the following line while preserving intent: `print ( 'xml_document:' , self . xml_document )`  (SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Fix the following statement so it is correct: `if ( re . search ( \"_US$\" , sample_data . dcc_project_code )  : icgc_or_tcga = \"TCGA\"` (Pattern: SINGLE_TOKEN)"
    },
    {
      "question": "Identify the issue in `return det` and provide the corrected single-line fix. [ADD_METHOD_CALL]"
    },
    {
      "question": "Correct the following line while preserving intent: `if _allow_origin_cb : response . headers [ 'Access-Control-Allow-Origin' ] = _allow_origin_cb ( request . headers [ 'Origin' ] ) else :`  (MORE_SPECIFIC_IF)"
    },
    {
      "question": "Given the buggy code: `_segyio . write_textheader ( self . xfd , index , val )`, rewrite it into a correct version. (Bug type: ADD_FUNCTION_AROUND_EXPRESSION)"
    },
    {
      "question": "This line is buggy: `if last_map [ d . name ] == c : node . setChecked ( True )`. Provide the correct version only. [MORE_SPECIFIC_IF]"
    },
    {
      "question": "Correct the following line while preserving intent: `return CommonFunctions . ReadPlist ( f )`  (SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Identify the issue in `return \"No hosting servers can be found, if this is portal, update the settings to include a hosting server.\"` and provide the corrected single-line fix. [SINGLE_TOKEN]"
    },
    {
      "question": "Produce the corrected version of: `idstring = ' in (' + ',' . join ( idlist ) + ')'`  (family: ADD_FUNCTION_AROUND_EXPRESSION)"
    },
    {
      "question": "Identify the issue in `if instance . app_config . template_prefix : return os . path . join ( instance . app_config . template_prefix , self . base_render_template ) else : return os . path . join ( 'djangocms_blog' , self . base_render_template )` and provide the corrected single-line fix. [MORE_SPECIFIC_IF]"
    },
    {
      "question": "This line is buggy: `return queryset`. Provide the correct version only. [ADD_METHOD_CALL]"
    },
    {
      "question": "Identify the issue in `result = re . search ( \"(?P<url>https?://[^\\s]+)\" , stdout ) if stdout else None` and provide the corrected single-line fix. [ADD_METHOD_CALL]"
    },
    {
      "question": "Given the buggy code: `d = xml_python ( xapi , options , options [ 'print_result' ] )`, rewrite it into a correct version. (Bug type: SAME_FUNCTION_LESS_ARGS)"
    },
    {
      "question": "Fix the following statement so it is correct: `_log ( DEBUG1 , 'api_version: %s, 0x%06x' , _api_version , _api_version )` (Pattern: ADD_FUNCTION_AROUND_EXPRESSION)"
    },
    {
      "question": "This line is buggy: `if vid == None : vid = 'reduced_' + mv . id`. Provide the correct version only. [CHANGE_BINARY_OPERATOR]"
    },
    {
      "question": "Correct the following line while preserving intent: `if args . filters != None and len ( args . filters ) >= i : if args . filters [ i ] in [ 'None' , 'none' , 'no' ] : self . _opts [ key ] [ index ] [ 'filter' ] = None else :`  (CHANGE_BINARY_OPERATOR)"
    },
    {
      "question": "Given the buggy code: `if time_bnds not in varnames : addVariable ( g , 'time_bnds' , typedict [ 'time_bnds' ] , axisdict [ 'time_bnds' ] , attdict [ 'time_bnds' ] )`, rewrite it into a correct version. (Bug type: SINGLE_TOKEN)"
    },
    {
      "question": "Fix the following statement so it is correct: `soup = BeautifulSoup . BeautifulSoup ( html_string )` (Pattern: SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "This line is buggy: `language = request . GET . get ( 'language' , None )`. Provide the correct version only. [SINGLE_TOKEN]"
    },
    {
      "question": "This line is buggy: `item = { 'name' : name , 'type' : entry_type , 'size' : self . _GetSizeFromRec ( v ) if entry_type == EntryType . FILES else 0 }`. Provide the correct version only. [SAME_FUNCTION_MORE_ARGS]"
    },
    {
      "question": "Fix the error in: `super ( ) . _GetDomainUserInfo ( self )`. Return only the corrected line. [SAME_FUNCTION_LESS_ARGS]"
    },
    {
      "question": "This line is buggy: `super ( ) . _GetDarwinFoldersInfo ( self )`. Provide the correct version only. [SAME_FUNCTION_LESS_ARGS]"
    },
    {
      "question": "Replace the buggy snippet with a correct one: `bugs . order_by ( '-last_touched' )`  [pattern=SAME_FUNCTION_MORE_ARGS]"
    },
    {
      "question": "Fix the error in: `{ } < / script > \"\"\" . replace ( CODE_HERE , code )`. Return only the corrected line. [SINGLE_TOKEN]"
    },
    {
      "question": "This line is buggy: `def __init__ ( self , image = None , network = 'HOST' , port_mappings = None , parameters = None , privileged = None , force_pull_image = None , ** kwargs ) : self . image = image if network :`. Provide the correct version only. [SINGLE_TOKEN]"
    },
    {
      "question": "Given the buggy code: `def __init__ ( self , name = None , container_port = None , host_port = 0 , service_port = None , protocol = 'tcp' , labels = None ) : self . name = name self . container_port = container_port self . host_port = host_port`, rewrite it into a correct version. (Bug type: SINGLE_TOKEN)"
    },
    {
      "question": "Given the buggy code: `raw_query = str ( userquery )`, rewrite it into a correct version. (Bug type: ADD_METHOD_CALL)"
    },
    {
      "question": "Fix the error in: `if hasattr ( self . item_list . get_current_block_item ( ) , 'durability' ) : self . item_list . get_current_block_item ( ) . durability -= 1 if self . item_list . get_current_block_item ( ) . durability <= 0 : self . item_list . remove_current_block ( )`. Return only the corrected line. [MORE_SPECIFIC_IF]"
    },
    {
      "question": "This line is buggy: `available_projects = [ k [ 'project__name' ] for k in bugs . values ( 'project__name' ) . distinct ( ) ]`. Provide the correct version only. [ADD_METHOD_CALL]"
    },
    {
      "question": "Fix the error in: `return cls . objects . get ( joined )`. Return only the corrected line. [ADD_METHOD_CALL]"
    },
    {
      "question": "Fix the following statement so it is correct: `maze = '4x5.txt'` (Pattern: ADD_FUNCTION_AROUND_EXPRESSION)"
    },
    {
      "question": "Given the buggy code: `s = [ x , xDot ]`, rewrite it into a correct version. (Bug type: ADD_FUNCTION_AROUND_EXPRESSION)"
    },
    {
      "question": "This line is buggy: `return Article . objects . order_by ( '-create_time' ) [ : 5 ]`. Provide the correct version only. [ADD_METHOD_CALL]"
    },
    {
      "question": "This line is buggy: `self . title = title`. Provide the correct version only. [ADD_METHOD_CALL]"
    },
    {
      "question": "Apply the minimal change that makes this line correct: `for location in locations : code_id_tuples . extend ( location . code_id_tuples ( ) )`  (ADD_METHOD_CALL)"
    },
    {
      "question": "Correct the following line while preserving intent: `if seek_until_line < 0 : return`  (CHANGE_BINARY_OPERATOR)"
    },
    {
      "question": "Produce the corrected version of: `with open ( filename , 'rb' ) as characterFile : returnDict = json . load ( characterFile )`  (family: SAME_FUNCTION_LESS_ARGS)"
    },
    {
      "question": "Fix the error in: `def json_dump ( encoding_var , file_ptr , indent = 0 ) :`. Return only the corrected line. [SINGLE_TOKEN]"
    },
    {
      "question": "Fix the following statement so it is correct: `cfg . CONF ( [ ] )` (Pattern: SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Given the buggy code: `def test_metaquery2_non_admin ( self ) : data = self . get ( '/meters?metadata.tag=four.counter' , headers = { \"X-Roles\" : \"Member\" , \"X-Tenant-Id\" : \"project-666\" } )`, rewrite it into a correct version. (Bug type: SINGLE_TOKEN)"
    },
    {
      "question": "Apply the minimal change that makes this line correct: `state [ 'headers' ] . append ( ( 'Content-Length' , len ( body [ 0 ] ) ) )`  (ADD_FUNCTION_AROUND_EXPRESSION)"
    },
    {
      "question": "Apply the minimal change that makes this line correct: `return self . nova_client . floating_ips . list ( )`  (SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Correct the following line while preserving intent: `ns = s`  (ADD_METHOD_CALL)"
    },
    {
      "question": "Correct the following line while preserving intent: `if seek_after == 0 : yield lines`  (MORE_SPECIFIC_IF)"
    },
    {
      "question": "Apply the minimal change that makes this line correct: `results = util . parse_zmap_results ( filename , location_name , results )`  (ADD_FUNCTION_AROUND_EXPRESSION)"
    },
    {
      "question": "Correct the following line while preserving intent: `codes_cdf = np . sort ( codes . values ( ) ) [ : : - 1 ]`  (ADD_FUNCTION_AROUND_EXPRESSION)"
    },
    {
      "question": "Apply the minimal change that makes this line correct: `if inner_result not in remove_obj : if str ( result . location_id ) == str ( inner_result . location_id ) : if result . rtt < inner_result . rtt : remove_obj . append ( inner_result )`  (MORE_SPECIFIC_IF)"
    },
    {
      "question": "Produce the corrected version of: `for key , value in stats : logger . info ( '{} len {} percent {}' . format ( key , value , value / sum_stats ) )`  (family: ADD_METHOD_CALL)"
    },
    {
      "question": "Given the buggy code: `with open ( file_path ) as geoname_file : for line in geoname_file : columns = line [ 0 : - 1 ] . split ( '\\t' )`, rewrite it into a correct version. (Bug type: SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Fix the following statement so it is correct: `for name , value in kwargs : setattr ( self , name , value )` (Pattern: ADD_METHOD_CALL)"
    },
    {
      "question": "Apply the minimal change that makes this line correct: `protocol = MeasurementProtocol ( measurement_result [ MeasurementKey . protocol . value ] )`  (ADD_METHOD_CALL)"
    },
    {
      "question": "Fix the error in: `line_queue . put ( line )`. Return only the corrected line. [ADD_METHOD_CALL]"
    },
    {
      "question": "Identify the issue in `parser . add_argument ( '-mt' , '--probes-per-measurement' , default = 1 , help = 'Maximum amount of probes used per measurement' )` and provide the corrected single-line fix. [SAME_FUNCTION_MORE_ARGS]"
    },
    {
      "question": "Replace the buggy snippet with a correct one: `return db_session . query ( Probe ) . filter_by ( probe_id = probe_id ) . first ( )`  [pattern=ADD_METHOD_CALL]"
    },
    {
      "question": "Fix the following statement so it is correct: `except TypeError : print ( \"{} has not been calibrated yet!\" )` (Pattern: ADD_METHOD_CALL)"
    },
    {
      "question": "Fix the error in: `circuit = Circuit ( state , cp )`. Return only the corrected line. [SAME_FUNCTION_LESS_ARGS]"
    },
    {
      "question": "Fix the following statement so it is correct: `key = j . apps . system . contentmanager . extensions . datatables . storInCache ( fields = fields , nativequery = nativequery )` (Pattern: SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Given the buggy code: `return request . content . decode ( \"utf-8\" )`, rewrite it into a correct version. (Bug type: ADD_FUNCTION_AROUND_EXPRESSION)"
    },
    {
      "question": "Replace the buggy snippet with a correct one: `if issubclass ( ct . model_class ( ) , Publishable ) or '%s.%s' % ( ct . app_label , ct . model ) in NON_PUBLISHABLE_CTS : acts . append ( ct )`  [pattern=MORE_SPECIFIC_IF]"
    },
    {
      "question": "Fix the following statement so it is correct: `if not has_category_permission ( user , form . instance . category , delete_perm ) : self . _non_form_errors = _ ( 'Object deletion is not permitted.' ) continue` (Pattern: MORE_SPECIFIC_IF)"
    },
    {
      "question": "Correct the following line while preserving intent: `url . append ( '/' . join ( map ( lambda x : slugify ( _ ( x ) ) , bits ) ) )`  (ADD_FUNCTION_AROUND_EXPRESSION)"
    },
    {
      "question": "Identify the issue in `service_type = None ,` and provide the corrected single-line fix. [SINGLE_TOKEN]"
    },
    {
      "question": "Produce the corrected version of: `sock = listen ( bind_addr )`  (family: SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Fix the error in: `self . assertTrue ( isinstance ( ret , Exception ) , type ( ret ) )`. Return only the corrected line. [SAME_FUNCTION_LESS_ARGS]"
    },
    {
      "question": "Correct the following line while preserving intent: `container , obj = split_path ( path , 0 , 2 )`  (SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Given the buggy code: `losc_urls . sieve ( gw150914_urls , blah = None )`, rewrite it into a correct version. (Bug type: ADD_FUNCTION_AROUND_EXPRESSION)"
    },
    {
      "question": "This line is buggy: `archived_in_swestore = filesystem . list_runs_in_swestore ( path = config . get ( 'cleanup' ) . get ( 'swestore' ) , no_ext = True )`. Provide the correct version only. [ADD_METHOD_CALL]"
    },
    {
      "question": "Given the buggy code: `return self . resource_registry . delete_association ( association , datastore_name )`, rewrite it into a correct version. (Bug type: SAME_FUNCTION_LESS_ARGS)"
    },
    {
      "question": "Fix the following statement so it is correct: `svc . clients . resource_registry . delete . assert_called_once_with ( myret )` (Pattern: SINGLE_TOKEN)"
    },
    {
      "question": "Fix the following statement so it is correct: `f . write ( '%s is %.2f%% complete (down: %.1f kb/s up: %.1f kB/s peers: %d) %s\\n' % ( path , s . progress * 100 , s . download_rate / 1000 , s . upload_rate / 1000 , s . num_peers , \"\" ) )` (Pattern: ADD_METHOD_CALL)"
    },
    {
      "question": "Identify the issue in `return self . get_query_set ( ) . get ( content_type = content_type , object_id = obj . pk )` and provide the corrected single-line fix. [SAME_FUNCTION_MORE_ARGS]"
    },
    {
      "question": "Correct the following line while preserving intent: `parser . add_argument ( '--os-cacert' , metavar = '<ca-certificate>' , default = env ( 'OS_CA_CERT' ) , help = 'Defaults to env[OS_CACERT]' )`  (SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Produce the corrected version of: `restore_table ( options , r , dumper )`  (family: SAME_FUNCTION_LESS_ARGS)"
    },
    {
      "question": "This line is buggy: `freeze_table ( options . db , options . schema , options . table , options . cluster )`. Provide the correct version only. [SAME_FUNCTION_MORE_ARGS]"
    },
    {
      "question": "This line is buggy: `obj [ 'result' ] = j . html . escape ( )`. Provide the correct version only. [SAME_FUNCTION_MORE_ARGS]"
    },
    {
      "question": "This line is buggy: `super ( PlacementInlineFormset , self ) . __init__ ( instance = instance , data = data , files = files , prefix = prefix )`. Provide the correct version only. [SAME_FUNCTION_LESS_ARGS]"
    },
    {
      "question": "Apply the minimal change that makes this line correct: `if i < self . initial_form_count ( ) : kwargs [ 'instance' ] = self . get_queryset ( ) [ i ]`  (MORE_SPECIFIC_IF)"
    },
    {
      "question": "Fix the error in: `InstrumentException . __init__ ( error_code , msg )`. Return only the corrected line. [SAME_FUNCTION_MORE_ARGS]"
    },
    {
      "question": "Given the buggy code: `prefix = self . CFG . get ( \"prefix\" , get_sys_name ( ) )`, rewrite it into a correct version. (Bug type: ADD_METHOD_CALL)"
    },
    {
      "question": "Replace the buggy snippet with a correct one: `if map ( lambda x : x . name , sec ) . count ( AWS_SEC_GROUP ) : puts ( green ( \"\\n******** Group {0} exists!********\\n\" . format ( AWS_SEC_GROUP ) ) ) return True else :`  [pattern=ADD_METHOD_CALL]"
    },
    {
      "question": "Fix the following statement so it is correct: `engine = create_engine ( get_db_connstr ( dbconf , tmpdb = tmpdb ) , echo = echo )` (Pattern: SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Replace the buggy snippet with a correct one: `first_message_entry_text = inbox_document . get_element_by_id ( '_table_1' )`  [pattern=ADD_METHOD_CALL]"
    },
    {
      "question": "Given the buggy code: `intro_text += etree . tostring ( testIntro , encoding = 'utf-8' , with_comments = False , pretty_print = True )`, rewrite it into a correct version. (Bug type: SAME_FUNCTION_LESS_ARGS)"
    },
    {
      "question": "Correct the following line while preserving intent: `image_URL = image_URL . split ( ' ' ) [ - 1 ]`  (ADD_FUNCTION_AROUND_EXPRESSION)"
    },
    {
      "question": "Fix the following statement so it is correct: `if clippingmask . user == None : clippingmask . width_start = border clippingmask . width_stop = image_param . width - border clippingmask . height_start = copy . deepcopy ( topline_width_stop )` (Pattern: CHANGE_BINARY_OPERATOR)"
    },
    {
      "question": "Apply the minimal change that makes this line correct: `self . nova_driver . boot_vm ( image_name , flavor_name , [ ] , instance_name , networks )`  (SAME_FUNCTION_LESS_ARGS)"
    },
    {
      "question": "Fix the error in: `card_xml_file . write ( \"<set>\\n<name>\" + set_obj [ \"code\" ] + \"</name>\\n\" \"<longname>\" + set_obj [ \"name\" ] + \"</longname>\\n\" \"<settype>\" + set_obj [ \"set_type\" ] + \"</settype>\\n\" \"<releasedate>\" + set_obj [ \"released_at\" ] + \"</releasedate>\\n\" \"</set>\\n\" )`. Return only the corrected line. [ADD_METHOD_CALL]"
    },
    {
      "question": "Apply the minimal change that makes this line correct: `return self . getVal ( \"Processing[1].ProcessingDirectory\" )`  (ADD_FUNCTION_AROUND_EXPRESSION)"
    },
    {
      "question": "Correct the following line while preserving intent: `self . _flags = BuildFlags ( asan , debug , fuzzing )`  (SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Given the buggy code: `shutil . copy ( os . path . join ( 'gtest' , 'dependentlibs.list.gtest' ) , os . path . join ( path , 'dependentlibs.list.gtest' ) )`, rewrite it into a correct version. (Bug type: SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Correct the following line while preserving intent: `def on_stop ( self ) : self . stop_service ( ) if self . user_role_event_subscriber is not None :`  (SINGLE_TOKEN)"
    },
    {
      "question": "Fix the following statement so it is correct: `if param . default is not None : rep_node . attrib [ \"max\" ] = \"1\"` (Pattern: MORE_SPECIFIC_IF)"
    },
    {
      "question": "Fix the error in: `parser = DesignFileParser ( instance . design , instance )`. Return only the corrected line. [SAME_FUNCTION_LESS_ARGS]"
    },
    {
      "question": "Correct the following line while preserving intent: `assets = Asset . objects . filter ( tags__in = subTags )`  (ADD_METHOD_CALL)"
    },
    {
      "question": "This line is buggy: `err : await ctx . send ( embed = discord . Embed ( title = f'Failed to load {cog_name}:' , description = err , colour = discord . Colour . red ( ) ) )`. Provide the correct version only. [ADD_FUNCTION_AROUND_EXPRESSION]"
    },
    {
      "question": "Fix the following statement so it is correct: `z_init = np . zeros ( Nvar )` (Pattern: SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Identify the issue in `mT = 1. / ( 1. - mT )` and provide the corrected single-line fix. [CHANGE_BINARY_OPERATOR]"
    },
    {
      "question": "Fix the following statement so it is correct: `self . socketIO = SocketIO ( 'https://globalchemireg.sgc.ox.ac.uk' , self . port , LoggingNamespace , transports = [ 'websocket' ] )` (Pattern: SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Apply the minimal change that makes this line correct: `if ph4_type != \"c_of_m\" : clusters [ ph4_type ] = cluster_dp ( type_dict [ ph4_type ] [ \"coords\" ] , C_OF_M_LAMBDA , type_dict [ ph4_type ] [ \"mols\" ] ) else : clusters [ ph4_type ] = cluster_dp ( type_dict [ ph4_type ] [ \"coords\" ] , PH4_LAMBDA , type_dict [ ph4_type ] [ \"mols\" ] )`  (CHANGE_BINARY_OPERATOR)"
    },
    {
      "question": "Given the buggy code: `fixer . addSolvent ( boxSize , positiveIon , negativeIon , ionicStrength )`, rewrite it into a correct version. (Bug type: SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Identify the issue in `message += e . output` and provide the corrected single-line fix. [ADD_FUNCTION_AROUND_EXPRESSION]"
    },
    {
      "question": "Produce the corrected version of: `return e`  (family: SINGLE_TOKEN)"
    },
    {
      "question": "This line is buggy: `for layer_id in O [ 'n_encoder_layers' ] : params = get_init ( O [ 'encoder' ] ) ( O , params , prefix = 'encoder' , nin = O [ 'dim_word' ] , dim = O [ 'dim' ] , layer_id = layer_id ) params = get_init ( O [ 'encoder' ] ) ( O , params , prefix = 'encoder_r' , nin = O [ 'dim_word' ] , dim = O [ 'dim' ] , layer_id = layer_id )`. Provide the correct version only. [ADD_FUNCTION_AROUND_EXPRESSION]"
    },
    {
      "question": "Replace the buggy snippet with a correct one: `print ( 'New Result' , result )`  [pattern=ADD_FUNCTION_AROUND_EXPRESSION]"
    },
    {
      "question": "Fix the following statement so it is correct: `CFG = final_cfg ( request )` (Pattern: SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Fix the following statement so it is correct: `interior_pt = get_interior_point ( halfspaces , num_bound = 0 )` (Pattern: SINGLE_TOKEN)"
    },
    {
      "question": "Replace the buggy snippet with a correct one: `block . nonce = cache . get ( counter )`  [pattern=SINGLE_TOKEN]"
    },
    {
      "question": "Given the buggy code: `data = embed_data ( to_embed = merkle_root , api_key = settings . BLOCKCYPHER_API_TOKEN , coin_symbol = settings . CHAIN )`, rewrite it into a correct version. (Bug type: SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Correct the following line while preserving intent: `len ( self . medic_name ) + len ( self . medic_cedula ) + len ( self . medic_hospital ) + len ( self . patient_name ) + len ( self . patient_age ) + len ( str ( self . get_formatted_date ( ) ) ) + self . timestamp . isoformat ( )`  (ADD_FUNCTION_AROUND_EXPRESSION)"
    },
    {
      "question": "Fix the error in: `next_url = request . args . get ( 'next' , None )`. Return only the corrected line. [SINGLE_TOKEN]"
    },
    {
      "question": "Replace the buggy snippet with a correct one: `minimal_metadata is True`  [pattern=CHANGE_BINARY_OPERATOR]"
    },
    {
      "question": "Replace the buggy snippet with a correct one: `else : eia = pd . read_csv ( stored_file_name )`  [pattern=SAME_FUNCTION_MORE_ARGS]"
    },
    {
      "question": "This line is buggy: `else : eia = pd . read_csv ( stored_file_name )`. Provide the correct version only. [SAME_FUNCTION_MORE_ARGS]"
    },
    {
      "question": "Produce the corrected version of: `assert uint > 0`  (family: CHANGE_BINARY_OPERATOR)"
    },
    {
      "question": "Fix the error in: `resolved_pd = BUILTIN_PACKAGES`. Return only the corrected line. [ADD_METHOD_CALL]"
    },
    {
      "question": "Replace the buggy snippet with a correct one: `assert dut . o_firstdata == dut . i_datas [ 0 ]`  [pattern=ADD_FUNCTION_AROUND_EXPRESSION]"
    },
    {
      "question": "Identify the issue in `if end < start : raise ValueError ( \"End cannot be less than start\" )` and provide the corrected single-line fix. [MORE_SPECIFIC_IF]"
    },
    {
      "question": "Produce the corrected version of: `s = seq [ bin . start : bin . end ]`  (family: ADD_FUNCTION_AROUND_EXPRESSION)"
    },
    {
      "question": "Apply the minimal change that makes this line correct: `chromsizes = bioframe . read_chromsizes ( testdir + \"/test_data/test.chrom.sizes\" )`  (SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Produce the corrected version of: `def test_cancelled_amout ( order_trustlines , exchange_proxy , testnetworks , maker , taker ) : order = order_trustlines exchange_contract = testnetworks [ 1 ]`  (family: SINGLE_TOKEN)"
    },
    {
      "question": "Apply the minimal change that makes this line correct: `return transaction_id`  (ADD_METHOD_CALL)"
    },
    {
      "question": "Correct the following line while preserving intent: `def shape ( self ) : self . Y = 0.0`  (SINGLE_TOKEN)"
    },
    {
      "question": "Apply the minimal change that makes this line correct: `def insertblock ( block_data , Protocol , block_height , txcount ) : BlockTime = datetime . datetime . utcfromtimestamp ( block_data [ 'result' ] [ 'time' ] ) version = block_data [ 'result' ] [ 'version' ] if block_height > 0 :`  (SINGLE_TOKEN)"
    },
    {
      "question": "Produce the corrected version of: `sens = 1.0 / ( ( pi / pl ) * np . mean ( dep ) )`  (family: ADD_FUNCTION_AROUND_EXPRESSION)"
    },
    {
      "question": "Fix the following statement so it is correct: `cn_states = pd . concat ( [ cn_states , pd . DataFrame ( sv_cn_states ) ] ) [ 0 ] . values` (Pattern: ADD_FUNCTION_AROUND_EXPRESSION)"
    },
    {
      "question": "Produce the corrected version of: `def notfound ( self ) : return { }`  (family: SINGLE_TOKEN)"
    },
    {
      "question": "Fix the error in: `if hasattr ( self , '_has_create_stream' ) or self . _has_create_stream : asyncio . ensure_future ( self . stop_stream_task ( self . _back_stream_task ) ) self . _has_create_stream = False`. Return only the corrected line. [CHANGE_BINARY_OPERATOR]"
    },
    {
      "question": "Correct the following line while preserving intent: `if k_max > 0 : hit_scores [ pred_idx ] = pred_relation [ 'score' ] gt_detected [ k_max ] = True`  (CHANGE_BINARY_OPERATOR)"
    },
    {
      "question": "Produce the corrected version of: `if not self . running_program and not self . sleep_until : self . write_prompt ( \"\\n\" )`  (family: MORE_SPECIFIC_IF)"
    },
    {
      "question": "Correct the following line while preserving intent: `while ( iter != None and model . get_value ( iter , 0 ) != config [ 'type' ] ) : iter = model . iter_next ( iter )`  (ADD_METHOD_CALL)"
    },
    {
      "question": "Replace the buggy snippet with a correct one: `while ( iter != None and model . get_value ( iter , 0 ) != config [ 'type' ] ) : iter = model . iter_next ( iter )`  [pattern=ADD_METHOD_CALL]"
    },
    {
      "question": "Apply the minimal change that makes this line correct: `while ( iter != None and model . get_value ( iter , 0 ) != config [ 'type' ] ) : iter = model . iter_next ( iter )`  (ADD_METHOD_CALL)"
    },
    {
      "question": "Replace the buggy snippet with a correct one: `CustomError . error ( detail )`  [pattern=SAME_FUNCTION_MORE_ARGS]"
    },
    {
      "question": "Given the buggy code: `wTree . get_widget ( \"txt_port\" ) . set_text ( config [ 'port' ] )`, rewrite it into a correct version. (Bug type: ADD_FUNCTION_AROUND_EXPRESSION)"
    },
    {
      "question": "Produce the corrected version of: `res [ i ] = tools . human_size ( val )`  (family: ADD_FUNCTION_AROUND_EXPRESSION)"
    },
    {
      "question": "Fix the following statement so it is correct: `if context . get ( 'bin_size' , False ) : res [ i ] = tools . human_size ( long ( val ) ) else : res [ i ] = val` (Pattern: MORE_SPECIFIC_IF)"
    },
    {
      "question": "Produce the corrected version of: `return ( html . replace ( '&lt;' , '<' ) . replace ( '&gt;' , '>' ) . replace ( '</br>' , '' ) , report_type )`  (family: ADD_METHOD_CALL)"
    },
    {
      "question": "Given the buggy code: `action . addParameter ( moduleId , m . getNumFunctions ( ) , i , f . name , p . name , p . value ( ) , p . type , \"\" )`, rewrite it into a correct version. (Bug type: ADD_FUNCTION_AROUND_EXPRESSION)"
    },
    {
      "question": "This line is buggy: `if mobj . _date_name in mobj . _columns : res [ act . id ] . append ( ( False , 'calendar' ) )`. Provide the correct version only. [MORE_SPECIFIC_IF]"
    },
    {
      "question": "Given the buggy code: `raise except_osv ( 'Error' , _ ( \"The sum of the data (2nd field) is null.\\nWe can't draw a pie chart !\" ) )`, rewrite it into a correct version. (Bug type: ADD_FUNCTION_AROUND_EXPRESSION)"
    },
    {
      "question": "This line is buggy: `filename = ndimage_file . copy_to_spider ( filename , temp_spider_file )`. Provide the correct version only. [ADD_FUNCTION_AROUND_EXPRESSION]"
    },
    {
      "question": "Apply the minimal change that makes this line correct: `self . set ( ** { varname : value } )`  (ADD_FUNCTION_AROUND_EXPRESSION)"
    },
    {
      "question": "Replace the buggy snippet with a correct one: `params = read ( options . param_file )`  [pattern=SAME_FUNCTION_MORE_ARGS]"
    },
    {
      "question": "Replace the buggy snippet with a correct one: `ndimage_utility . replace_outlier ( win , dust_sigma , xray_sigma , win )`  [pattern=SAME_FUNCTION_MORE_ARGS]"
    },
    {
      "question": "Given the buggy code: `format . write ( output , alignvals , header = \"epsi,theta,phi,ref_num,id,psi,tx,ty,nproj,ang_diff,cc_rot,spsi,sx,sy,mirror,micrograph,stack_id,defocus\" . split ( ',' ) )`, rewrite it into a correct version. (Bug type: ADD_FUNCTION_AROUND_EXPRESSION)"
    },
    {
      "question": "Fix the error in: `def tightmask ( spi , filename , outputfile , threshold = 0.0 , ndilate = 1 , gk_size = 3 , gk_sigma = 3.0 , pre_filter = 0.0 , apix = 1.0 , mask_output = None , ** extra ) :`. Return only the corrected line. [SINGLE_TOKEN]"
    },
    {
      "question": "Fix the error in: `angle_range = angular_restriction ( ** extra )`. Return only the corrected line. [SAME_FUNCTION_MORE_ARGS]"
    },
    {
      "question": "Fix the error in: `gmm = mixture . GMM ( n_components = 2 , covariance_type = 'spherical' )`. Return only the corrected line. [SAME_FUNCTION_LESS_ARGS]"
    },
    {
      "question": "Given the buggy code: `parser . change_default ( log_level = 3 )`, rewrite it into a correct version. (Bug type: SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Given the buggy code: `format . write ( output , numpy . asarray ( vals ) , header = \"id,select\" . split ( ',' ) )`, rewrite it into a correct version. (Bug type: SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Fix the error in: `else : vol = eman2_utility . finalize_nn4 ( recon1 , recon )`. Return only the corrected line. [SAME_FUNCTION_MORE_ARGS]"
    },
    {
      "question": "Apply the minimal change that makes this line correct: `self . canv . setFont ( \"Helvetica\" , utils . unit_get ( 8 ) )`  (ADD_FUNCTION_AROUND_EXPRESSION)"
    },
    {
      "question": "Apply the minimal change that makes this line correct: `relaxng_doc = etree . parse ( file ( 'import_xml.rng' ) )`  (ADD_FUNCTION_AROUND_EXPRESSION)"
    },
    {
      "question": "Identify the issue in `start = img . shape [ 0 ] * ( 8.0 / pixel_diameter )` and provide the corrected single-line fix. [ADD_FUNCTION_AROUND_EXPRESSION]"
    },
    {
      "question": "Apply the minimal change that makes this line correct: `bin_factor = self . parent ( ) . micrographDecimationFactor ( ) ,`  (ADD_FUNCTION_AROUND_EXPRESSION)"
    },
    {
      "question": "Apply the minimal change that makes this line correct: `id , mic , part = val [ id_col ] , val [ mic_col ] , val [ stack_id_col ]`  (ADD_FUNCTION_AROUND_EXPRESSION)"
    },
    {
      "question": "Produce the corrected version of: `label . append ( [ \"%s@%s\" % ( str ( id ) . zfill ( idlen ) , filename ) , str ( mic ) , defocus_dict [ mic ] . defocus , voltage , cs , ampcont , len ( group ) - 1 , \"%s@%s\" % ( str ( part ) . zfill ( idlen ) , str ( mic ) ) ] )`  (family: ADD_FUNCTION_AROUND_EXPRESSION)"
    },
    {
      "question": "This line is buggy: `def estimate_resolution ( filename1 , filename2 , spi , outputfile , resolution_mask = 'N' , res_edge_width = 3 , res_threshold = 'A' , res_ndilate = 0 , res_gk_size = 3 , res_gk_sigma = 5.0 , res_filter = 0.0 , dpi = None , disable_sigmoid = None , disable_scale = None , disable_gs = False , ** extra ) :`. Provide the correct version only. [SINGLE_TOKEN]"
    },
    {
      "question": "Correct the following line while preserving intent: `val = input ( 'Are you sure you want to delete these files? (Yes or No)' ) . strip ( )`  (ADD_FUNCTION_AROUND_EXPRESSION)"
    },
    {
      "question": "Correct the following line while preserving intent: `if vmax == 0 : raise ValueError , \"No information in image\"`  (SINGLE_TOKEN)"
    },
    {
      "question": "Fix the following statement so it is correct: `if db_name is PoolManager . _pools : logger . notifyChannel ( 'dbpool' , netsvc . LOG_INFO , 'Closing all connections to %s' % ( db_name , ) ) PoolManager . _pools [ db_name ] . closeall ( ) del PoolManager . _pools [ db_name ]` (Pattern: CHANGE_BINARY_OPERATOR)"
    },
    {
      "question": "Identify the issue in `d = xml . dom . minidom . parseString ( obj . arch )` and provide the corrected single-line fix. [ADD_FUNCTION_AROUND_EXPRESSION]"
    },
    {
      "question": "Given the buggy code: `if self . _columns [ field ] . _classic_write : if ( not totranslate ) or not self . _columns [ field ] . translate : upd0 . append ( '\"' + field + '\"=' + self . _columns [ field ] . _symbol_set [ 0 ] ) upd1 . append ( self . _columns [ field ] . _symbol_set [ 1 ] ( vals [ field ] ) )`, rewrite it into a correct version. (Bug type: MORE_SPECIFIC_IF)"
    },
    {
      "question": "Identify the issue in `except Exception , e : self . log ( 'exception' , e )` and provide the corrected single-line fix. [ADD_FUNCTION_AROUND_EXPRESSION]"
    },
    {
      "question": "Correct the following line while preserving intent: `refine . setup_log ( output )`  (SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Fix the error in: `if use_small_angle_alignment ( spi , align [ curr_slice ] , use_flip , ** extra ) : del extra [ 'theta_end' ] angle_doc , angle_num = spi . vo_ea ( theta_end = extra [ 'angle_range' ] , outputfile = angle_cache , ** extra ) if shuffle_angles :`. Return only the corrected line. [MORE_SPECIFIC_IF]"
    },
    {
      "question": "Identify the issue in `elif len ( files ) == 1 : _logger . info ( \"Assuming micrograph selection file: --select-file %s\" % select_file )` and provide the corrected single-line fix. [CHANGE_BINARY_OPERATOR]"
    },
    {
      "question": "Correct the following line while preserving intent: `value = dict . fromkeys ( fields_list )`  (SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Given the buggy code: `res = dict . fromkeys ( ids )`, rewrite it into a correct version. (Bug type: SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Given the buggy code: `else : super ( CCEDK , self ) . adjust ( )`, rewrite it into a correct version. (Bug type: SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Identify the issue in `else : super ( CCEDK , self ) . adjust ( \"\" )` and provide the corrected single-line fix. [SINGLE_TOKEN]"
    },
    {
      "question": "Replace the buggy snippet with a correct one: `self . lock . acquire ( blocking = False )`  [pattern=SAME_FUNCTION_LESS_ARGS]"
    },
    {
      "question": "Replace the buggy snippet with a correct one: `res [ r ] = ( False , False )`  [pattern=SINGLE_TOKEN]"
    },
    {
      "question": "Replace the buggy snippet with a correct one: `dom = minidom . parseString ( view )`  [pattern=ADD_METHOD_CALL]"
    },
    {
      "question": "Fix the following statement so it is correct: `if delta : cr . execute ( \"select  (now() - '%s'::interval - min(write_date)) >= '0'::interval from %s where id in (%s)\" % ( delta , self . _table , \",\" . join ( map ( str , ids ) ) ) ) res = cr . fetchall ( ) if res and ( res . pop ( ) [ 0 ] == 0 ) :` (Pattern: MORE_SPECIFIC_IF)"
    },
    {
      "question": "This line is buggy: `self . pool . get ( 'ir.model.data' ) . ir_set ( cr , self . uid , 'action' , 'tree_but_open' , 'Menuitem' , [ ( 'ir.ui.menu' , int ( pid ) ) ] , action , True , True )`. Provide the correct version only. [SAME_FUNCTION_MORE_ARGS]"
    },
    {
      "question": "Produce the corrected version of: `for order_part in m2o_order . split ( \",\" , 1 ) : m2o_order_list . append ( order_part . strip ( ) . split ( \" \" , 1 ) [ 0 ] . strip ( ) )`  (family: SAME_FUNCTION_LESS_ARGS)"
    },
    {
      "question": "Produce the corrected version of: `if ( dv in self . _columns and self . _columns [ dv ] . _type == 'one2many' or ( dv in self . _inherit_fields and self . _inherit_fields [ dv ] [ 2 ] . _type == 'one2many' ) ) and isinstance ( defaults [ dv ] , ( list , tuple ) ) and isinstance ( defaults [ dv ] [ 0 ] , dict ) : defaults [ dv ] = [ ( 0 , 0 , x ) for x in defaults [ dv ] ]`  (family: MORE_SPECIFIC_IF)"
    },
    {
      "question": "Identify the issue in `ids = prop . search ( cr , uid , domain , order = 'company_id' , context = context )` and provide the corrected single-line fix. [SAME_FUNCTION_LESS_ARGS]"
    },
    {
      "question": "Given the buggy code: `f . write ( bytes ( instance [ 'privateKey' ] ) )`, rewrite it into a correct version. (Bug type: SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Correct the following line while preserving intent: `self . ovsdb = OVSDB ( self . odlendpoint , self . odlusername , self . odlpassword )`  (SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Apply the minimal change that makes this line correct: `right1 = table . search ( cr , uid , [ ( fargs [ 0 ] , 'in' , right ) ] , context = context )`  (ADD_FUNCTION_AROUND_EXPRESSION)"
    },
    {
      "question": "Identify the issue in `( user , passwd ) = base64 . decodestring ( auth_str ) . split ( ':' )` and provide the corrected single-line fix. [SAME_FUNCTION_MORE_ARGS]"
    },
    {
      "question": "Correct the following line while preserving intent: `( user , passwd ) = base64 . decodestring ( auth_str ) . split ( ':' )`  (SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Produce the corrected version of: `def _tag_table ( self , node ) : self . tb . fline ( ) saved_tb = self . tb self . tb = None`  (family: SINGLE_TOKEN)"
    },
    {
      "question": "Replace the buggy snippet with a correct one: `return obj . get ( ) . encode ( 'utf-8' )`  [pattern=ADD_FUNCTION_AROUND_EXPRESSION]"
    },
    {
      "question": "Apply the minimal change that makes this line correct: `if isinstance ( f , fields . function ) and not f . store : logger . notifyChannel ( 'orm' , netsvc . LOG_INFO , 'column %s (%s) in table %s removed: converted to a function !\\n' % ( k , f . string , self . _table ) ) cr . execute ( 'ALTER TABLE %s DROP COLUMN %s' % ( self . _table , k ) ) cr . commit ( )`  (MORE_SPECIFIC_IF)"
    },
    {
      "question": "This line is buggy: `if key . startswith ( 'default_' ) : value [ key [ 8 : ] ] = context [ key ]`. Provide the correct version only. [MORE_SPECIFIC_IF]"
    },
    {
      "question": "Correct the following line while preserving intent: `decimal_point = locale . RADIXCHAR`  (ADD_FUNCTION_AROUND_EXPRESSION)"
    },
    {
      "question": "Correct the following line while preserving intent: `decimal_point = locale . RADIXCHAR`  (ADD_FUNCTION_AROUND_EXPRESSION)"
    },
    {
      "question": "Fix the following statement so it is correct: `if fget [ groupby ] [ 'type' ] in ( 'date' , 'datetime' ) : today = datetime . date . today ( ) if d [ groupby ] [ : 10 ] == str ( today ) : d [ groupby ] = 'Today'` (Pattern: MORE_SPECIFIC_IF)"
    },
    {
      "question": "Identify the issue in `if key . startswith ( 'default_' ) : value [ key [ 8 : ] ] = context [ key ]` and provide the corrected single-line fix. [MORE_SPECIFIC_IF]"
    },
    {
      "question": "Fix the following statement so it is correct: `if fget [ groupby ] [ 'type' ] in ( 'date' , 'datetime' ) : flist = \"to_char(%s,'yyyy-mm') as %s \" % ( groupby , groupby ) groupby = \"to_char(%s,'yyyy-mm')\" % ( groupby ) else :` (Pattern: MORE_SPECIFIC_IF)"
    },
    {
      "question": "Produce the corrected version of: `residual = mass - config . _interest [ name ] [ unit ] [ side ] [ 'target' ]`  (family: ADD_FUNCTION_AROUND_EXPRESSION)"
    },
    {
      "question": "Correct the following line while preserving intent: `self . limit = target`  (ADD_METHOD_CALL)"
    },
    {
      "question": "Produce the corrected version of: `if self . amount_asked . currency != self . amount_extra . currency : self . amount_extra = Money ( self . amount_extra . amount , self . amount_asked . currency )`  (family: MORE_SPECIFIC_IF)"
    },
    {
      "question": "This line is buggy: `extra . update ( align . initalize ( spi , files , alignvals [ curr_slice ] , ** extra ) )`. Provide the correct version only. [SAME_FUNCTION_MORE_ARGS]"
    },
    {
      "question": "Fix the following statement so it is correct: `return bleach . clean ( self . title , strip = True , tags = [ ] )` (Pattern: ADD_FUNCTION_AROUND_EXPRESSION)"
    },
    {
      "question": "This line is buggy: `return user . is_authenticated and instance . followers . filter ( user = user ) . exists ( )`. Provide the correct version only. [ADD_FUNCTION_AROUND_EXPRESSION]"
    },
    {
      "question": "Fix the error in: `if os . path . isfile ( description_file ) : return eval ( tools . file_open ( description_file ) . read ( ) )`. Return only the corrected line. [MORE_SPECIFIC_IF]"
    },
    {
      "question": "This line is buggy: `if context . get ( 'contact_display' , 'contact' ) == 'partner_address' : res . append ( ( r [ 'id' ] , \"%s: %s\" % ( r [ 'partner_id' ] [ 1 ] , addr . strip ( ) or '/' ) ) ) else : res . append ( ( r [ 'id' ] , addr . strip ( ) or '/' ) )`. Provide the correct version only. [MORE_SPECIFIC_IF]"
    },
    {
      "question": "Apply the minimal change that makes this line correct: `if not ( context . get ( self . CONCURRENCY_CHECK_FIELD ) or self . _log_access ) : return`  (CHANGE_BINARY_OPERATOR)"
    },
    {
      "question": "Correct the following line while preserving intent: `context_wo_lang = context`  (ADD_METHOD_CALL)"
    },
    {
      "question": "This line is buggy: `result += txt`. Provide the correct version only. [ADD_FUNCTION_AROUND_EXPRESSION]"
    },
    {
      "question": "Fix the error in: `context_wo_lang = context`. Return only the corrected line. [ADD_METHOD_CALL]"
    },
    {
      "question": "Replace the buggy snippet with a correct one: `if request . user . has_perm ( 'looker.access_looker_embeds' ) : context [ 'looker_items' ] = LookerEmbed . objects . all ( )`  [pattern=MORE_SPECIFIC_IF]"
    },
    {
      "question": "Given the buggy code: `return self . render_to_response ( )`, rewrite it into a correct version. (Bug type: SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Correct the following line while preserving intent: `f = open ( pdokjson , 'r' )`  (SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "This line is buggy: `break`. Provide the correct version only. [SINGLE_TOKEN]"
    },
    {
      "question": "Identify the issue in `if extsAndClass > 1 and \"pom\" in extsAndClass : del extsAndClass [ \"pom\" ]` and provide the corrected single-line fix. [ADD_FUNCTION_AROUND_EXPRESSION]"
    },
    {
      "question": "Fix the error in: `checksumRegex = re . compile ( \"^(?:.*\\s+)?([0-9a-f]{\" + expectedLength + \"})[\\s]*$\" )`. Return only the corrected line. [ADD_FUNCTION_AROUND_EXPRESSION]"
    },
    {
      "question": "Produce the corrected version of: `prefixes . append ( dependency . get ( 'prefix' ) )`  (family: SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Produce the corrected version of: `log ( \"%30s: %s\" % ( match . group ( 1 ) , str ( unescape ( match . group ( 2 ) ) ) ) , xbmc . LOGDEBUG )`  (family: ADD_METHOD_CALL)"
    },
    {
      "question": "Fix the following statement so it is correct: `xbmcvfs . delete ( os . path . join ( tempxml_folder , \"tempxml\" , \"%s.xml\" % previous_datecode ) )` (Pattern: SAME_FUNCTION_LESS_ARGS)"
    },
    {
      "question": "Given the buggy code: `fs = OSFS ( install_dir , encoding = 'UTF-8' )`, rewrite it into a correct version. (Bug type: SAME_FUNCTION_LESS_ARGS)"
    },
    {
      "question": "Apply the minimal change that makes this line correct: `return compile_css_string ( read_media ( media_file ) , context , get_media_source_from_url ( media_file ) )`  (SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Fix the following statement so it is correct: `if delta > 0 : corporation_market = corporation . get_random_corporation_market_among_bests ( ) else :` (Pattern: CHANGE_BINARY_OPERATOR)"
    },
    {
      "question": "Given the buggy code: `report_detail_dialog_box = QDialog ( self , Qt . CustomizeWindowHint | Qt . WindowTitleHint | Qt . WindowMinMaxButtonsHint )`, rewrite it into a correct version. (Bug type: SAME_FUNCTION_LESS_ARGS)"
    },
    {
      "question": "Produce the corrected version of: `self . startVideo ( record = True )`  (family: SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Apply the minimal change that makes this line correct: `altitude = ( altSonar - altVision ) / 2.0`  (CHANGE_BINARY_OPERATOR)"
    },
    {
      "question": "Apply the minimal change that makes this line correct: `sa = max ( - maxSpeed , min ( maxSpeed , frac * ( goalHeading - drone . heading ) ) )`  (ADD_FUNCTION_AROUND_EXPRESSION)"
    },
    {
      "question": "Produce the corrected version of: `continue`  (family: SINGLE_TOKEN)"
    },
    {
      "question": "Produce the corrected version of: `fileDialog = savedialog . saveDialog ( self . buf )`  (family: SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Fix the error in: `if size < 1 or size == \"\" : dlg = GnomeMessageBox ( \"You must specify a size for the partition\" , MESSAGE_BOX_ERROR , STOCK_BUTTON_OK , None ) dlg . run_and_close ( )`. Return only the corrected line. [MORE_SPECIFIC_IF]"
    },
    {
      "question": "Identify the issue in `if size < 1 or size == \"\" and onPart == gtk . FALSE : dlg = gtk . MessageDialog ( None , 0 , gtk . MESSAGE_ERROR , gtk . BUTTONS_OK , _ ( \"You must specify a size for the partition.\" ) ) dlg . set_title ( _ ( \"Error\" ) ) dlg . set_default_size ( 100 , 100 )` and provide the corrected single-line fix. [MORE_SPECIFIC_IF]"
    },
    {
      "question": "Identify the issue in `if self . lastRaidNumber == \"\" : fsType = \"raid\" part_object . raidNumber = \"raid.01\" elif part_object . raidNumber == None : tmpNum = 0 tmpNum = int ( self . lastRaidNumber ) + 1 if tmpNum < 10 :` and provide the corrected single-line fix. [CHANGE_BINARY_OPERATOR]"
    },
    {
      "question": "Given the buggy code: `if verbosity > 1 : retString += \" - \" + self . md5sum`, rewrite it into a correct version. (Bug type: MORE_SPECIFIC_IF)"
    },
    {
      "question": "Correct the following line while preserving intent: `trailer_quality = source . get_trailer_qualities ( ) [ q_id ] [ 'title' ]`  (SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Given the buggy code: `if - 32000 < code or - 32099 > code : code = - 32603 message = 'Internal error'`, rewrite it into a correct version. (Bug type: CHANGE_BINARY_OPERATOR)"
    },
    {
      "question": "Correct the following line while preserving intent: `review_params = { 'review_type' : all , 'apikey' : api_key }`  (SINGLE_TOKEN)"
    },
    {
      "question": "Replace the buggy snippet with a correct one: `if res : return res [ 0 ] [ 'company_id' ] [ 0 ]`  [pattern=MORE_SPECIFIC_IF]"
    },
    {
      "question": "Replace the buggy snippet with a correct one: `return self . round ( cr , uid , currency , amount ) < currency . rounding`  [pattern=ADD_FUNCTION_AROUND_EXPRESSION]"
    },
    {
      "question": "Apply the minimal change that makes this line correct: `res [ m . id ] = release . version . rsplit ( '.' , 1 ) [ 0 ] + '.' + self . get_module_info ( m . name ) . get ( 'version' , False )`  (SINGLE_TOKEN)"
    },
    {
      "question": "Fix the error in: `if r [ 2 ] . has_key ( 'groups_id' ) : groups = r [ 2 ] [ 'groups_id' ] if len ( groups ) > 0 : group_ids = ',' . join ( [ str ( x ) for x in r [ 2 ] [ 'groups_id' ] ] )`. Return only the corrected line. [MORE_SPECIFIC_IF]"
    },
    {
      "question": "Fix the error in: `for field in vals : fobj = None if field in self . _columns : fobj = self . _columns [ field ]`. Return only the corrected line. [ADD_METHOD_CALL]"
    },
    {
      "question": "Correct the following line while preserving intent: `if len ( values [ 'body' ] ) > 128 : values [ 'name' ] = values [ 'body' ] [ : 125 ] + '...' else : values [ 'name' ] = values [ 'body' ] or '/'`  (MORE_SPECIFIC_IF)"
    },
    {
      "question": "Given the buggy code: `cmd_name = self . unpack_str ( data )`, rewrite it into a correct version. (Bug type: SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Given the buggy code: `return S_OK ( )`, rewrite it into a correct version. (Bug type: SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Fix the following statement so it is correct: `price = self . __getCSImageOption ( \"MaxAllowedPrice\" , 0.0 )` (Pattern: SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Fix the following statement so it is correct: `return_code = subprocess . check_call ( cmd , shell = shell , stderr = stderr , stdout = stdout , stdin = stdin )` (Pattern: SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Identify the issue in `if perfTable [ alt1 ] [ crit ] + thresholds [ crit ] [ \"indifference\" ] >= perfTable [ alt2 ] [ crit ] : ElemOut [ alt1 ] [ alt2 ] [ crit ] = 1.0 elif perfTable [ alt1 ] [ crit ] + thresholds [ crit ] [ \"preference\" ] >= perfTable [ alt2 ] [ crit ] : ElemOut [ alt1 ] [ alt2 ] [ crit ] = 0.5 else : ElemOut [ alt1 ] [ alt2 ] [ crit ] = 0.0` and provide the corrected single-line fix. [CHANGE_BINARY_OPERATOR]"
    },
    {
      "question": "This line is buggy: `if not dict . __contains__ ( config , sub_key ) : if create_default : dict . __setitem__ ( config , sub_key , Config ( ) ) else :`. Provide the correct version only. [MORE_SPECIFIC_IF]"
    },
    {
      "question": "Replace the buggy snippet with a correct one: `hkl = settings . angles_to_hkl_function ( pos , wavelength , ubcalc . UB )`  [pattern=ADD_METHOD_CALL]"
    },
    {
      "question": "Given the buggy code: `run_trimmomatic ( TRIM_PATH , forward_path , reverse_path , name , UGAP_PATH , length )`, rewrite it into a correct version. (Bug type: SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Identify the issue in `k . plotPointing ( ph , showOuts = False , plot_degrees = False )` and provide the corrected single-line fix. [SAME_FUNCTION_LESS_ARGS]"
    },
    {
      "question": "This line is buggy: `_assert_valid ( title . decode ( ) == official_fields_specs [ metaname ] [ 0 ] , msg )`. Provide the correct version only. [SAME_FUNCTION_MORE_ARGS]"
    },
    {
      "question": "Identify the issue in `pathToScan += os . environ [ \"LD_LIBRARY_PATH\" ] . split ( )` and provide the corrected single-line fix. [SAME_FUNCTION_MORE_ARGS]"
    },
    {
      "question": "Apply the minimal change that makes this line correct: `self . files . append ( \"/bin/dbus-daemon\" )`  (SINGLE_TOKEN)"
    },
    {
      "question": "Identify the issue in `print \"MOVE   {} : reassigned from '{}' to '{}'.\" . format ( old_estimator . name , estimator . name )` and provide the corrected single-line fix. [SAME_FUNCTION_MORE_ARGS]"
    },
    {
      "question": "Apply the minimal change that makes this line correct: `encoded_track_string = track [ 'Location' ] . encode ( headphones . SYS_ENCODING )`  (SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Apply the minimal change that makes this line correct: `logger . error ( \"Error trying to change permissions on folder: %s. %s\" , temp_f , e )`  (ADD_METHOD_CALL)"
    },
    {
      "question": "Correct the following line while preserving intent: `rospy . loginfo ( \"[DEBUG]: trying marker \" + idx )`  (ADD_FUNCTION_AROUND_EXPRESSION)"
    },
    {
      "question": "Produce the corrected version of: `rospy . logerr ( \"Step \" + index + \" doesn't exit. Can't get gripper state.\" )`  (family: ADD_FUNCTION_AROUND_EXPRESSION)"
    },
    {
      "question": "Correct the following line while preserving intent: `if any ( pattern == current_file . lower ( ) for pattern in patterns ) : self . log . warning ( 'New scene! Preparing an initial workfile' ) instance = context . create_instance ( name = 'new_scene' )`  (CHANGE_BINARY_OPERATOR)"
    },
    {
      "question": "This line is buggy: `logger . debug ( item_name + \" -> \" + my_val )`. Provide the correct version only. [ADD_FUNCTION_AROUND_EXPRESSION]"
    },
    {
      "question": "Replace the buggy snippet with a correct one: `multiPartParams = { \"nzbfile\" : ( nzb . name + \".nzb\" , nzbdata ) }`  [pattern=ADD_FUNCTION_AROUND_EXPRESSION]"
    },
    {
      "question": "Produce the corrected version of: `if isinstance ( v , int ) : try : min_value = int ( rule . get ( 'min' ) ) except ValueError :`  (family: MORE_SPECIFIC_IF)"
    },
    {
      "question": "Identify the issue in `utils . execute ( \"sudo\" , \"rm\" , tempfstab . name )` and provide the corrected single-line fix. [SAME_FUNCTION_LESS_ARGS]"
    },
    {
      "question": "Replace the buggy snippet with a correct one: `cmd = \"sudo yum --color=never -y install %s\" % packages`  [pattern=ADD_FUNCTION_AROUND_EXPRESSION]"
    },
    {
      "question": "This line is buggy: `folder = folder . replace ( './' , '_/' ) . replace ( ':' , '_' ) . replace ( '?' , '_' ) . replace ( '/.' , '/_' ) . replace ( '<' , '_' ) . replace ( '>' , '_' )`. Provide the correct version only. [ADD_METHOD_CALL]"
    },
    {
      "question": "Correct the following line while preserving intent: `size = desc_match . group ( 1 )`  (ADD_FUNCTION_AROUND_EXPRESSION)"
    },
    {
      "question": "Fix the error in: `r = self . session . post ( loginpage , data = data , timeout = self . default_timeout )`. Return only the corrected line. [SAME_FUNCTION_MORE_ARGS]"
    },
    {
      "question": "This line is buggy: `operating_system . remove ( filename )`. Provide the correct version only. [SAME_FUNCTION_MORE_ARGS]"
    },
    {
      "question": "Given the buggy code: `self . clause = None`, rewrite it into a correct version. (Bug type: SINGLE_TOKEN)"
    },
    {
      "question": "Fix the error in: `utils . execute_with_timeout ( command )`. Return only the corrected line. [SAME_FUNCTION_MORE_ARGS]"
    },
    {
      "question": "Apply the minimal change that makes this line correct: `logger = logging . getLogger ( __name__ )`  (SAME_FUNCTION_LESS_ARGS)"
    },
    {
      "question": "Identify the issue in `return HttpResponse ( prepare_result ( upload ) )` and provide the corrected single-line fix. [SAME_FUNCTION_MORE_ARGS]"
    },
    {
      "question": "Apply the minimal change that makes this line correct: `responseString = self . fetchWeb ( self . url ) . decode ( 'gbk' ) . encode ( 'utf8' )`  (SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Given the buggy code: `ping = pingavg ( host )`, rewrite it into a correct version. (Bug type: ADD_FUNCTION_AROUND_EXPRESSION)"
    },
    {
      "question": "Given the buggy code: `for d in dirs : if d in IGNORE_DIRECTORIES : dirs . remove ( d ) elif not os . path . exists ( os . path . join ( self . build_root , 'root' , path , d ) ) :`, rewrite it into a correct version. (Bug type: ADD_FUNCTION_AROUND_EXPRESSION)"
    },
    {
      "question": "This line is buggy: `if set ( rdtypes_to_query ) . difference ( rdtypes_queried ) : return True`. Provide the correct version only. [MORE_SPECIFIC_IF]"
    },
    {
      "question": "Fix the following statement so it is correct: `kwargs . pop ( 'cookie_standin' )` (Pattern: SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Fix the following statement so it is correct: `def test_eval_detection_voc ( self ) : pred_bboxes = self . result [ 'bboxes' ] pred_labels = self . result [ 'labels' ] pred_scores = self . result [ 'scores' ]` (Pattern: SINGLE_TOKEN)"
    },
    {
      "question": "Apply the minimal change that makes this line correct: `labels = np . ones ( ( 10 , 5 ) )`  (SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Fix the following statement so it is correct: `if hasattr ( self . iface . messageBar ( ) , 'pushMessage' ) : self . iface . messageBar ( ) . pushMessage ( title , text , level , duration ) else : QMessageBox . information ( self , title , text )` (Pattern: MORE_SPECIFIC_IF)"
    },
    {
      "question": "Fix the error in: `continue`. Return only the corrected line. [SINGLE_TOKEN]"
    },
    {
      "question": "Produce the corrected version of: `with open ( filename ) as data : self . _make_xnat_post ( upload_url , data , retries , headers )`  (family: SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Fix the following statement so it is correct: `def test_handle_diff_returns_false_on_valueerror ( ) : value = [ 1 , 2 , 3 ] expected = [ 1 , 2 , 3 , 5 ]` (Pattern: SINGLE_TOKEN)"
    },
    {
      "question": "Apply the minimal change that makes this line correct: `study_base = config . get_study_base ( 'SPINS' )`  (SINGLE_TOKEN)"
    },
    {
      "question": "Identify the issue in `return` and provide the corrected single-line fix. [SINGLE_TOKEN]"
    },
    {
      "question": "Correct the following line while preserving intent: `make_links ( record , config )`  (SAME_FUNCTION_LESS_ARGS)"
    },
    {
      "question": "Correct the following line while preserving intent: `if not datman . scanid . is_scanid_with_session ( scanid ) : logger . error ( 'Invalid scanid:{} from archive:{}' . format ( scanid , archivefile ) ) return False`  (MORE_SPECIFIC_IF)"
    },
    {
      "question": "Apply the minimal change that makes this line correct: `instruction == \"D\" : self . output ( str ( self . _curr_stack ) + \"\\n\" )`  (ADD_METHOD_CALL)"
    },
    {
      "question": "Identify the issue in `print >> sys . stderr , line` and provide the corrected single-line fix. [ADD_METHOD_CALL]"
    },
    {
      "question": "Correct the following line while preserving intent: `currentVideo . progress = currentVideo . start_pos + int ( player . position / 1000000 )`  (ADD_FUNCTION_AROUND_EXPRESSION)"
    },
    {
      "question": "Correct the following line while preserving intent: `if self . stop : break`  (MORE_SPECIFIC_IF)"
    },
    {
      "question": "Produce the corrected version of: `vote = DBSession . query ( Vote , func . sum ( Vote . counter ) . label ( 'counter_all' ) ) . filter ( Vote . id_contest == contest , Vote . name == name ) . first ( )`  (family: SINGLE_TOKEN)"
    },
    {
      "question": "Produce the corrected version of: `def _setup_normarize ( self , layer ) : blobs = layer . blobs func = Normalize ( caffe . _get_num ( blobs [ 0 ] ) ) func . scale . array [ : ] = np . array ( blobs [ 0 ] . data )`  (family: SINGLE_TOKEN)"
    },
    {
      "question": "Replace the buggy snippet with a correct one: `return _read_image_pil ( path , dtype , color )`  [pattern=SAME_FUNCTION_MORE_ARGS]"
    },
    {
      "question": "Given the buggy code: `def test_is_not_nul_to_cql ( self ) :`, rewrite it into a correct version. (Bug type: SINGLE_TOKEN)"
    },
    {
      "question": "Produce the corrected version of: `for cb in callbacks : try : cb ( new_exc ) except Exception :`  (family: ADD_METHOD_CALL)"
    },
    {
      "question": "Fix the error in: `self . assertNotEqual ( list ( get_replicas ( 'test3rf' , ring [ 0 ] ) ) , [ ] )`. Return only the corrected line. [SINGLE_TOKEN]"
    },
    {
      "question": "Produce the corrected version of: `rest_params [ \"metric\" ] = metric . lower ( ) . replace ( \" \" , \"_\" )`  (family: ADD_METHOD_CALL)"
    },
    {
      "question": "Fix the error in: `plt . title ( title )`. Return only the corrected line. [SAME_FUNCTION_MORE_ARGS]"
    },
    {
      "question": "Fix the following statement so it is correct: `if src_mat . is_updated or self . first : self . ctx . need_update ( src_mat , True )` (Pattern: MORE_SPECIFIC_IF)"
    },
    {
      "question": "Replace the buggy snippet with a correct one: `if index > - 1 : self . app . children [ index ] . frame . onFrameActivate ( )`  [pattern=MORE_SPECIFIC_IF]"
    },
    {
      "question": "Produce the corrected version of: `if self . _final_result is _NOT_SET : raise TraceUnavailable ( \"Trace information was not available. The ResponseFuture is not done.\" )`  (family: MORE_SPECIFIC_IF)"
    },
    {
      "question": "Correct the following line while preserving intent: `self . remove ( triple )`  (SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "This line is buggy: `continue`. Provide the correct version only. [SINGLE_TOKEN]"
    },
    {
      "question": "This line is buggy: `def log_jacobian ( self , x ) :`. Provide the correct version only. [SINGLE_TOKEN]"
    },
    {
      "question": "Fix the error in: `self . proc = subprocess . Popen ( self . command , stdout = subprocess . PIPE , stderr = subprocess . STDOUT , shell = shell , universal_newlines = False , env = self . env )`. Return only the corrected line. [SINGLE_TOKEN]"
    },
    {
      "question": "Identify the issue in `print ( \"PSK:\" , hexlify ( psk ) )` and provide the corrected single-line fix. [SAME_FUNCTION_MORE_ARGS]"
    },
    {
      "question": "Apply the minimal change that makes this line correct: `if err . errno is 98 : print ( \"Close the process on this port and try again\" ) else : print ( err )`  (CHANGE_BINARY_OPERATOR)"
    },
    {
      "question": "Correct the following line while preserving intent: `if normalize_values : value = cls . normalize ( value )`  (MORE_SPECIFIC_IF)"
    },
    {
      "question": "Identify the issue in `func ( ENTRY_FORMAT % ( tag , ( message % args ) ) )` and provide the corrected single-line fix. [ADD_FUNCTION_AROUND_EXPRESSION]"
    },
    {
      "question": "Apply the minimal change that makes this line correct: `jobs = list ( SchedulerJob . select ( ) . where ( SchedulerJob . due_at >= now ) )`  (CHANGE_BINARY_OPERATOR)"
    },
    {
      "question": "This line is buggy: `type_classes = map ( types . lookup_casstype , usertype_row [ 'field_types' ] )`. Provide the correct version only. [ADD_FUNCTION_AROUND_EXPRESSION]"
    },
    {
      "question": "This line is buggy: `c = Cluster ( protocol_version = 1 )`. Provide the correct version only. [SAME_FUNCTION_LESS_ARGS]"
    },
    {
      "question": "Fix the following statement so it is correct: `keyspace = subtypes [ 0 ]` (Pattern: ADD_METHOD_CALL)"
    },
    {
      "question": "Correct the following line while preserving intent: `def __contians__ ( self , ref ) :`  (SINGLE_TOKEN)"
    },
    {
      "question": "This line is buggy: `if section . get ( 'sessionKey' ) == sessionKey : Dict [ 'nowPlaying' ] [ sessionKey ] = get_metadata_from_pms ( section . get ( 'ratingKey' ) ) Dict [ 'nowPlaying' ] [ sessionKey ] [ 'UserName' ] = ''`. Provide the correct version only. [MORE_SPECIFIC_IF]"
    },
    {
      "question": "Correct the following line while preserving intent: `def test_list_project_packages ( project , resp_list_package_files ) : package = project . packages . get ( 1 , lazy = True ) package_files = package . package_files . list ( ) assert isinstance ( package_files , list )`  (SINGLE_TOKEN)"
    },
    {
      "question": "Replace the buggy snippet with a correct one: `user . delete ( )`  [pattern=SAME_FUNCTION_MORE_ARGS]"
    },
    {
      "question": "Given the buggy code: `self . manager . delete ( self . get_id ( ) )`, rewrite it into a correct version. (Bug type: SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Fix the error in: `if reward == - 1 : self . state [ ST_TARGET ] = random . randint ( 0 , len ( target_list ) - 1 ) elif reward == 0 :`. Return only the corrected line. [MORE_SPECIFIC_IF]"
    },
    {
      "question": "Identify the issue in `GetItem ( data . get ( '@odata.nextLink' ) )` and provide the corrected single-line fix. [SAME_FUNCTION_MORE_ARGS]"
    },
    {
      "question": "Replace the buggy snippet with a correct one: `entry [ 'url' ] = pathlib . Path ( filepath ) . absolute ( ) . as_uri ( )`  [pattern=ADD_METHOD_CALL]"
    },
    {
      "question": "Apply the minimal change that makes this line correct: `global_entry_parser . add_argument ( 'entry' , nargs = '?' , help = 'can be entry title or ID' )`  (SAME_FUNCTION_LESS_ARGS)"
    },
    {
      "question": "Given the buggy code: `possible . append ( sys . prefix . decode ( sys . getfilesystemencoding ( ) ) )`, rewrite it into a correct version. (Bug type: ADD_FUNCTION_AROUND_EXPRESSION)"
    },
    {
      "question": "Produce the corrected version of: `guid = base64 . urlsafe_b64encode ( hasher . digest ( ) )`  (family: ADD_METHOD_CALL)"
    },
    {
      "question": "Given the buggy code: `new_hash = hashlib . md5 ( str ( sorted ( series ) ) . encode ( 'utf-8' ) ) . hexdigest ( )`, rewrite it into a correct version. (Bug type: ADD_FUNCTION_AROUND_EXPRESSION)"
    },
    {
      "question": "Correct the following line while preserving intent: `session . add ( User ( name = \"flexget\" , password = generate_password_hash ( \"flexget\" ) ) )`  (ADD_FUNCTION_AROUND_EXPRESSION)"
    },
    {
      "question": "This line is buggy: `raise_error_from_response ( r , GitlabBuildPlayError , 201 )`. Provide the correct version only. [SAME_FUNCTION_LESS_ARGS]"
    },
    {
      "question": "Fix the following statement so it is correct: `if get_all is True : return list ( GitlabList ( self , url , query_data , ** kwargs ) )` (Pattern: MORE_SPECIFIC_IF)"
    },
    {
      "question": "Apply the minimal change that makes this line correct: `if self . unavailable_in_european_countries and address . is_european_union : is_available = False`  (MORE_SPECIFIC_IF)"
    },
    {
      "question": "This line is buggy: `error_dict [ attr ] = getattr ( error , attr )`. Provide the correct version only. [ADD_FUNCTION_AROUND_EXPRESSION]"
    },
    {
      "question": "Fix the error in: `add [ 'download_dir' ] = text_to_native_str ( pathscrub ( path ) )`. Return only the corrected line. [SAME_FUNCTION_MORE_ARGS]"
    },
    {
      "question": "Apply the minimal change that makes this line correct: `def response ( self , code_or_apierror , description = None , model = None , ** kwargs ) :`  (SINGLE_TOKEN)"
    },
    {
      "question": "This line is buggy: `return jsonify ( plugin_schemas )`. Provide the correct version only. [ADD_FUNCTION_AROUND_EXPRESSION]"
    },
    {
      "question": "Produce the corrected version of: `episodes = show_episodes ( series , session = session )`  (family: SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Given the buggy code: `message_url = config . get ( 'url' )`, rewrite it into a correct version. (Bug type: SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Produce the corrected version of: `message_url = config . get ( 'url' )`  (family: SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Given the buggy code: `hashed_name = hashlib . md5 ( url ) . hexdigest ( )`, rewrite it into a correct version. (Bug type: ADD_METHOD_CALL)"
    },
    {
      "question": "Correct the following line while preserving intent: `if lt_version > [ 0 , 16 , 13 , 0 ] : params [ 'info_hash' ] = params [ 'info_hash' ] . to_bytes ( )`  (MORE_SPECIFIC_IF)"
    },
    {
      "question": "Fix the following statement so it is correct: `return requests . get ( full_url , params = params ) . json ( )` (Pattern: SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Replace the buggy snippet with a correct one: `plugin . get_plugin_by_name ( 'thetvdb_lookup' ) . instance . lazy_series_lookup ( entry )`  [pattern=SAME_FUNCTION_MORE_ARGS]"
    },
    {
      "question": "Given the buggy code: `resp = MakeResponse ( render_template ( 'admin/logs.html' , command = command ) )`, rewrite it into a correct version. (Bug type: SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Replace the buggy snippet with a correct one: `new_hash = get_config_hash ( series )`  [pattern=ADD_FUNCTION_AROUND_EXPRESSION]"
    },
    {
      "question": "Apply the minimal change that makes this line correct: `common = self . entry_intersects ( entry , generated_entry , fields , config . get ( 'exact' , 1 ) )`  (SINGLE_TOKEN)"
    },
    {
      "question": "Produce the corrected version of: `value = urllib . quote ( value )`  (family: ADD_METHOD_CALL)"
    },
    {
      "question": "This line is buggy: `if err . errno != errno . EPERM or err . errno != errno . EACCES : raise`. Provide the correct version only. [CHANGE_BINARY_OPERATOR]"
    },
    {
      "question": "This line is buggy: `if series : _update_search_strings ( series , session , search = name )`. Provide the correct version only. [MORE_SPECIFIC_IF]"
    },
    {
      "question": "Fix the error in: `save_path = entry . render ( entry . get ( 'path' , config . get ( 'path' ) ) )`. Return only the corrected line. [SAME_FUNCTION_MORE_ARGS]"
    },
    {
      "question": "This line is buggy: `if pytestconfig . getoption ( 'verbose' ) == 1 : level = flexget . logger . TRACE elif pytestconfig . getoption ( 'quiet' ) == 1 : level = logging . INFO`. Provide the correct version only. [SAME_FUNCTION_MORE_ARGS]"
    },
    {
      "question": "Fix the error in: `self . name = title_wrapper . find ( 'h1' , { 'class' : '' } ) . contents [ 0 ] . strip ( )`. Return only the corrected line. [SAME_FUNCTION_LESS_ARGS]"
    },
    {
      "question": "Given the buggy code: `return sorted ( episodes + seasons , key = lambda e : ( e . first_seen or datetime . min , e . identifier ) , reverse = True )`, rewrite it into a correct version. (Bug type: SAME_FUNCTION_LESS_ARGS)"
    },
    {
      "question": "Given the buggy code: `log . error ( 'Entry %s does not represent a local file/dir.' )`, rewrite it into a correct version. (Bug type: SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "This line is buggy: `return`. Provide the correct version only. [SINGLE_TOKEN]"
    },
    {
      "question": "Apply the minimal change that makes this line correct: `entry [ 'torrent_info_hash' ] = b16hash . upper ( )`  (ADD_METHOD_CALL)"
    },
    {
      "question": "Given the buggy code: `return [ line . strip ( ) for line in Path ( filename ) . read_text ( ) if not line . startswith ( '#' ) ]`, rewrite it into a correct version. (Bug type: ADD_METHOD_CALL)"
    },
    {
      "question": "Produce the corrected version of: `entry [ 'location' ] = filepath`  (family: ADD_FUNCTION_AROUND_EXPRESSION)"
    },
    {
      "question": "Fix the error in: `if hasattr ( entry , 'task' ) : if 'task' not in variables : variables [ 'task' ] = entry . task . name`. Return only the corrected line. [MORE_SPECIFIC_IF]"
    },
    {
      "question": "Identify the issue in `response . set_data ( soup . prettify ( ) )` and provide the corrected single-line fix. [SAME_FUNCTION_MORE_ARGS]"
    },
    {
      "question": "Correct the following line while preserving intent: `def on_task_start ( self , task , config ) : if not config : proxies = { }`  (SINGLE_TOKEN)"
    },
    {
      "question": "Given the buggy code: `if ep_match [ 'end_episode' ] > ep_match [ 'episode' ] + 2 : log . debug ( 'Series pack contains too many episodes (%d). Rejecting' , ep_match [ 'end_episode' ] - ep_match [ 'episode' ] )`, rewrite it into a correct version. (Bug type: MORE_SPECIFIC_IF)"
    },
    {
      "question": "Apply the minimal change that makes this line correct: `episodes = episodes . order_by ( Episode . season , Episode . number . desc ( ) ) if descending else episodes . order_by ( Episode . season , Episode . number )`  (ADD_METHOD_CALL)"
    },
    {
      "question": "Fix the following statement so it is correct: `found = session . query ( TMDBSearchResult ) . filter ( func . lower ( TMDBSearchResult . search ) == search_string ) . first ( )` (Pattern: ADD_METHOD_CALL)"
    },
    {
      "question": "Apply the minimal change that makes this line correct: `logger . add ( safe_stdout , level = level , format = LOG_FORMAT , colorize = True )`  (SAME_FUNCTION_LESS_ARGS)"
    },
    {
      "question": "Given the buggy code: `def test_multiple_excluding ( self , execute_task ) : task = execute_task ( 'test_complicated' ) assert task . find_entry ( 'accepted' , title = 'regular' ) , '\\'regular\\' should have been accepted' assert task . find_entry ( 'accepted' , title = 'expression' ) , '\\'expression\\' should have been accepted'`, rewrite it into a correct version. (Bug type: SINGLE_TOKEN)"
    },
    {
      "question": "Produce the corrected version of: `name = guess_result . get ( 'title' )`  (family: SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "This line is buggy: `if child . tag in [ 'description' , 'title' ] : entry [ child . tag ] = child . text`. Provide the correct version only. [MORE_SPECIFIC_IF]"
    },
    {
      "question": "Fix the error in: `return self . _optimize_np ( method , callback , max_iters , ** kw )`. Return only the corrected line. [SAME_FUNCTION_MORE_ARGS]"
    },
    {
      "question": "This line is buggy: `params . append ( ( 'oauth_body_hash' , base64 . b64encode ( hashlib . sha1 ( request . body ) . digest ( ) ) . decode ( 'utf-8' ) ) )`. Provide the correct version only. [ADD_METHOD_CALL]"
    },
    {
      "question": "Fix the error in: `channel = Channel . objects . create ( name = u'Sub Home' , slug = u'sub-home' , description = u'sub home page' , site = self . site , channel = self . channel )`. Return only the corrected line. [SAME_FUNCTION_MORE_ARGS]"
    },
    {
      "question": "Produce the corrected version of: `subchannel = Channel . objects . create ( name = u'Sub Home' , slug = u'sub-home' , description = u'sub home page' , site = self . site , channel = self . channel )`  (family: SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Fix the error in: `subchannel = Channel . objects . create ( name = u'Sub Home' , slug = u'sub-home' , description = u'sub home page' , site = self . site , channel = self . channel )`. Return only the corrected line. [SAME_FUNCTION_MORE_ARGS]"
    },
    {
      "question": "Given the buggy code: `Channel . objects . create ( name = u'Sub Home' , slug = u'sub-home' , description = u'sub home page' , site = self . site , channel = self . channel )`, rewrite it into a correct version. (Bug type: SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Apply the minimal change that makes this line correct: `return self . slug`  (ADD_FUNCTION_AROUND_EXPRESSION)"
    },
    {
      "question": "Replace the buggy snippet with a correct one: `raise Exception ( \"Invalid unicode code point: \" + m )`  [pattern=ADD_METHOD_CALL]"
    },
    {
      "question": "Fix the following statement so it is correct: `self . headers . update ( { 'x-amz-acl' : self . acl , 'Content-Type' : content_type , 'Content-Length' : len ( content ) , } )` (Pattern: ADD_FUNCTION_AROUND_EXPRESSION)"
    },
    {
      "question": "This line is buggy: `headers = self . headers`. Provide the correct version only. [ADD_METHOD_CALL]"
    },
    {
      "question": "This line is buggy: `req . update_body_from_data . assert_called_once_with ( { } , frozenset ( ) )`. Provide the correct version only. [SAME_FUNCTION_LESS_ARGS]"
    },
    {
      "question": "Fix the error in: `exclude ( pk__in = [ i . pk for i in imgs ] )`. Return only the corrected line. [ADD_METHOD_CALL]"
    },
    {
      "question": "Fix the error in: `def test_http_request_parser_nonutf8 ( self ) : out = aiohttp . FlowControlDataQueue ( self . stream ) buf = aiohttp . ParserBuffer ( ) p = protocol . HttpRequestParser ( ) ( out , buf )`. Return only the corrected line. [SINGLE_TOKEN]"
    },
    {
      "question": "Fix the error in: `except : self . response . close ( True )`. Return only the corrected line. [SAME_FUNCTION_LESS_ARGS]"
    },
    {
      "question": "Replace the buggy snippet with a correct one: `c = Cookie . SimpleCookie ( i )`  [pattern=ADD_FUNCTION_AROUND_EXPRESSION]"
    },
    {
      "question": "Fix the error in: `if self . flow . intercepting and not self . flow . response . acked : st = \"Response (intercepted)\" else : st = \"Response\"`. Return only the corrected line. [MORE_SPECIFIC_IF]"
    },
    {
      "question": "Produce the corrected version of: `if self . master . server . config . reverse_proxy : r . append ( \"[\" ) r . append ( ( \"heading_key\" , \"R\" ) ) r . append ( \":%s]\" % utils . unparse_url ( * self . master . server . config . reverse_proxy ) )`  (family: MORE_SPECIFIC_IF)"
    },
    {
      "question": "Identify the issue in `else : if not self . flow . response : self . flow . response = flow . Response ( self . flow . request , 200 , \"OK\" , flow . ODictCaseless ( ) , \"\" )` and provide the corrected single-line fix. [SAME_FUNCTION_MORE_ARGS]"
    },
    {
      "question": "This line is buggy: `db_regexp . regexp = entry [ 'title' ]`. Provide the correct version only. [ADD_FUNCTION_AROUND_EXPRESSION]"
    },
    {
      "question": "Given the buggy code: `password = hashlib . md5 ( config [ 'password' ] ) . hexdigest ( )`, rewrite it into a correct version. (Bug type: ADD_METHOD_CALL)"
    },
    {
      "question": "Identify the issue in `def test_multiple_excluding ( self , execute_task ) : task = execute_task ( 'test_complicated' ) assert task . find_entry ( 'accepted' , title = 'regular' ) , '\\'regular\\' should have been accepted' assert task . find_entry ( 'accepted' , title = 'expression' ) , '\\'expression\\' should have been accepted'` and provide the corrected single-line fix. [SINGLE_TOKEN]"
    },
    {
      "question": "Correct the following line while preserving intent: `def test_not_set_homeoage ( self ) : \"\"\"\n         not set channel home page, return none\n         \"\"\"`  (SINGLE_TOKEN)"
    },
    {
      "question": "This line is buggy: `self . assertEqual ( field . help_text , u'Only published container' )`. Provide the correct version only. [ADD_FUNCTION_AROUND_EXPRESSION]"
    },
    {
      "question": "Fix the following statement so it is correct: `def __init__ ( self , child_class = None ) : self . child_class = child_class` (Pattern: SINGLE_TOKEN)"
    },
    {
      "question": "Identify the issue in `if http . request_connection_close ( request . httpversion , request . headers ) : return` and provide the corrected single-line fix. [MORE_SPECIFIC_IF]"
    },
    {
      "question": "Fix the following statement so it is correct: `if 'password=' in body : body = PASSWORD_PATTERN . sub ( 'password=***' , body )` (Pattern: MORE_SPECIFIC_IF)"
    },
    {
      "question": "Given the buggy code: `self . assert_ ( is_date . match ( str ( date ) ) , \"mtimes is returning something that doesn't look like a date\" )`, rewrite it into a correct version. (Bug type: ADD_FUNCTION_AROUND_EXPRESSION)"
    },
    {
      "question": "Produce the corrected version of: `proto = \"HTTP/1.1 %s %s\" % ( self . code , self . msg )`  (family: ADD_FUNCTION_AROUND_EXPRESSION)"
    },
    {
      "question": "Produce the corrected version of: `parser . add_option ( \"--cert-wait-time\" , action = \"store\" , dest = \"cert_wait_time\" , default = 0 , help = \"Wait for specified number of seconds after a new cert is generated. This can smooth over small discrepancies between the client and server times.\" )`  (family: SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Produce the corrected version of: `if self . article . date_available <= timezone . now ( ) : raise ValidationError ( 'Article not published!' )`  (family: CHANGE_BINARY_OPERATOR)"
    },
    {
      "question": "Apply the minimal change that makes this line correct: `opps_menu = Channel . objects . filter ( site = site , date_available__lte = timezone . now ( ) , published = True , show_in_menu = True )`  (ADD_METHOD_CALL)"
    },
    {
      "question": "Fix the error in: `cachekey = _cache_key ( 'detail:mobile{}' . format ( self . request . is_mobile ) , self . model , self . site , \"{}-{}\" . format ( self . long_slug , self . slug ) )`. Return only the corrected line. [ADD_FUNCTION_AROUND_EXPRESSION]"
    },
    {
      "question": "This line is buggy: `def test_create_autopsec ( self ) : mock = create_autospec ( X ) instance = mock ( ) self . assertRaises ( TypeError , instance )`. Provide the correct version only. [SINGLE_TOKEN]"
    },
    {
      "question": "Correct the following line while preserving intent: `print text`  (SINGLE_TOKEN)"
    },
    {
      "question": "Given the buggy code: `super ( AsciiRow , self ) . __init__ ( self )`, rewrite it into a correct version. (Bug type: SAME_FUNCTION_LESS_ARGS)"
    },
    {
      "question": "Fix the following statement so it is correct: `self . notifier . on_new_room_event . assert_called_once_with ( ANY )` (Pattern: SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Replace the buggy snippet with a correct one: `self . auth . check . assert_called_once_with ( ANY , None , raises = True )`  [pattern=SAME_FUNCTION_LESS_ARGS]"
    },
    {
      "question": "Fix the error in: `def _purge_cache ( self ) : if not self . _expiry_ms :`. Return only the corrected line. [SINGLE_TOKEN]"
    },
    {
      "question": "Correct the following line while preserving intent: `assert t . render ( { 'request' : HttpRequest ( ) , 'table' : table } ) == '?x=f1%2Cf2'`  (ADD_FUNCTION_AROUND_EXPRESSION)"
    },
    {
      "question": "Identify the issue in `print ( text )` and provide the corrected single-line fix. [ADD_METHOD_CALL]"
    },
    {
      "question": "Fix the following statement so it is correct: `fieldmap . update ( { 'access_token' : session [ 'access_token' ] , 'session_expires' : session [ 'expires' ]  )` (Pattern: SINGLE_TOKEN)"
    },
    {
      "question": "Apply the minimal change that makes this line correct: `if serial < from_key : break`  (CHANGE_BINARY_OPERATOR)"
    },
    {
      "question": "Correct the following line while preserving intent: `if i > 0 : leading = name [ : i ] trailing = int ( name [ i : ] ) else :`  (MORE_SPECIFIC_IF)"
    },
    {
      "question": "Replace the buggy snippet with a correct one: `run_name = os . path . basename ( solid_run_dir )`  [pattern=ADD_METHOD_CALL]"
    },
    {
      "question": "Fix the error in: `result = unittest2 . TextTestResult ( None , None , None )`. Return only the corrected line. [SINGLE_TOKEN]"
    },
    {
      "question": "Given the buggy code: `def test_load_rasies_exception_on_error_even_if_already_loaded ( self , is_loaded_mock , session_mock , time_mock ) : is_loaded_mock . return_value = True`, rewrite it into a correct version. (Bug type: SINGLE_TOKEN)"
    },
    {
      "question": "Fix the error in: `if self . align [ 0 ] . upper ( ) == 'C' : x = ( self . pdf . w - x ) / 2.0 - w / 2.0`. Return only the corrected line. [MORE_SPECIFIC_IF]"
    },
    {
      "question": "Replace the buggy snippet with a correct one: `die ( \"Not a TrueType font: version=\" . version )`  [pattern=SINGLE_TOKEN]"
    },
    {
      "question": "Correct the following line while preserving intent: `if name in self . keys : if not PY3K and isinstance ( value , unicode ) : value = value . encode ( \"latin1\" , \"ignore\" ) elif value is None :`  (ADD_METHOD_CALL)"
    },
    {
      "question": "Produce the corrected version of: `def test_name_is_none_if_unloaded ( self , lib_mock ) : lib_mock . sp_album_is_loaded . return_value = 0 sp_album = spotify . ffi . new ( 'int *' ) album = spotify . Album ( sp_album )`  (family: SINGLE_TOKEN)"
    },
    {
      "question": "Given the buggy code: `if len ( currencies ) > 1 or self . currency not in currencies : raise ValidationError ( _ ( 'Order contains more than one currency.' ) , code = 'multiple_currency' )`, rewrite it into a correct version. (Bug type: MORE_SPECIFIC_IF)"
    },
    {
      "question": "Fix the following statement so it is correct: `return self . for_user ( user , obj , check_groups ) . filter ( codename = perm )` (Pattern: ADD_METHOD_CALL)"
    },
    {
      "question": "Given the buggy code: `return [ perm . label for perm in self . _registry ]`, rewrite it into a correct version. (Bug type: ADD_METHOD_CALL)"
    },
    {
      "question": "This line is buggy: `package_data [ cur_pack ] . append ( os . path . join ( dirpath . replace ( package_dir , \"\" ) , f ) )`. Provide the correct version only. [SAME_FUNCTION_MORE_ARGS]"
    },
    {
      "question": "Apply the minimal change that makes this line correct: `package_data [ cur_pack ] . append ( os . path . join ( dirpath . replace ( package_dir , \"\" ) , f ) )`  (SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Produce the corrected version of: `for uid in widgets . keys ( ) [ : ] : anim = widgets [ uid ] widget = anim [ 'widget' ] if anim [ 'time' ] is None :`  (family: ADD_FUNCTION_AROUND_EXPRESSION)"
    },
    {
      "question": "Identify the issue in `db . alter_column ( 'constance_config' , 'key' , self . gf ( 'django.db.models.fields.CharField' ) ( unique = True , max_length = 255 ) )` and provide the corrected single-line fix. [SAME_FUNCTION_LESS_ARGS]"
    },
    {
      "question": "Produce the corrected version of: `try : pickle . dumps ( m ) except TypeError , e : self . fail ( 'pickle of DefaultsModel failed: %s' % e )`  (family: SINGLE_TOKEN)"
    },
    {
      "question": "Replace the buggy snippet with a correct one: `headers = [ field . column_name for field in self . get_fields ( ) ]`  [pattern=ADD_FUNCTION_AROUND_EXPRESSION]"
    },
    {
      "question": "Fix the following statement so it is correct: `log . info ( 'args: %s' % args )` (Pattern: ADD_FUNCTION_AROUND_EXPRESSION)"
    },
    {
      "question": "This line is buggy: `return remote_addr in settings . INTERNAL_IPS and settings . DEBUG`. Provide the correct version only. [ADD_FUNCTION_AROUND_EXPRESSION]"
    },
    {
      "question": "Produce the corrected version of: `_params = json . dumps ( map ( self . _decode , params ) )`  (family: ADD_FUNCTION_AROUND_EXPRESSION)"
    },
    {
      "question": "Produce the corrected version of: `if len ( value ) == len ( self . field . choices ) : return qs`  (family: MORE_SPECIFIC_IF)"
    },
    {
      "question": "This line is buggy: `def test_view_filtering_on_price ( self ) : response = self . client . get ( self . base_url + '?title=Snowcrash' ) for b in [ 'Ender&#39;s Game' , 'Rainbow Six' ] : self . assertNotContains ( response , b )`. Provide the correct version only. [SINGLE_TOKEN]"
    },
    {
      "question": "Identify the issue in `if child_idx + 1 > len ( action_set ) : return COMPLETE` and provide the corrected single-line fix. [CHANGE_BINARY_OPERATOR]"
    },
    {
      "question": "Apply the minimal change that makes this line correct: `if self . fields [ field_key ] . widget . needs_multipart_form : value = fs . save ( join ( \"forms\" , str ( uuid4 ( ) ) , value . name ) , value )`  (MORE_SPECIFIC_IF)"
    },
    {
      "question": "Fix the error in: `try : mod = import_module ( module ) except ImportError , e : raise MissingStorageModule ( 'Error loading storage %s: \"%s\"' % ( module , e ) )`. Return only the corrected line. [SINGLE_TOKEN]"
    },
    {
      "question": "Identify the issue in `if ( field . name not in internal_fields ) and ( not isinstance ( field , AutoField ) ) : field_names . append ( field . name )` and provide the corrected single-line fix. [MORE_SPECIFIC_IF]"
    },
    {
      "question": "Fix the error in: `auth_type , auth_string = auth . split ( ' ' )`. Return only the corrected line. [SAME_FUNCTION_MORE_ARGS]"
    },
    {
      "question": "This line is buggy: `choices = [ ( None , \"------\" ) ]`. Provide the correct version only. [SINGLE_TOKEN]"
    },
    {
      "question": "Fix the following statement so it is correct: `if product . is_product_with_variants ( ) and product . has_variants ( ) : product = product . get_default_variant ( )` (Pattern: MORE_SPECIFIC_IF)"
    },
    {
      "question": "Fix the following statement so it is correct: `country = Country . objects . get ( code = country_iso )` (Pattern: ADD_METHOD_CALL)"
    },
    {
      "question": "Correct the following line while preserving intent: `return unicode ( string )`  (SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "This line is buggy: `if direct and model and not field_object . blank : field_matches = column_matches . filter ( field_name = field_name ) match_in_header = False if field_matches :`. Provide the correct version only. [MORE_SPECIFIC_IF]"
    },
    {
      "question": "Fix the error in: `if key_column_name == cell : key_index = i`. Return only the corrected line. [ADD_METHOD_CALL]"
    },
    {
      "question": "Replace the buggy snippet with a correct one: `if settings . DEBUG : url = SANDBOX_POSTBACK_ENDPOINT + \"?\" + parameters else : url = POSTBACK_ENDPOINT + \"?\" + parameters`  [pattern=ADD_FUNCTION_AROUND_EXPRESSION]"
    },
    {
      "question": "Replace the buggy snippet with a correct one: `def get_parents ( self ) : \"\"\"\n         \"\"\" self . assertEqual ( self . c1 . get_parents ( ) , [ ] )`  [pattern=SINGLE_TOKEN]"
    },
    {
      "question": "Apply the minimal change that makes this line correct: `if \"property_id\" in request . session [ \"product-filter\" ] : del request . session [ \"product-filter\" ] [ property_id ] request . session [ \"product-filter\" ] = request . session [ \"product-filter\" ]`  (SINGLE_TOKEN)"
    },
    {
      "question": "Produce the corrected version of: `amount = request . POST . get ( \"amount-cart-item_%s\" % item . id , 0 )`  (family: ADD_FUNCTION_AROUND_EXPRESSION)"
    },
    {
      "question": "Fix the error in: `def get_query_set ( self ) : return GeoQuerySet ( self . model , using = self . _db )`. Return only the corrected line. [SINGLE_TOKEN]"
    },
    {
      "question": "Produce the corrected version of: `cache_key . update ( updated . decode ( 'utf-8' , 'replace' ) )`  (family: ADD_METHOD_CALL)"
    },
    {
      "question": "Produce the corrected version of: `if not do_updates and not same_order : same_order = True self . __class__ . _mptt_track_tree_modified ( self . _mpttfield ( 'tree_id' ) ) elif not same_order and old_parent_id is None : collapse_old_tree = self . _mpttfield ( 'tree_id' ) parent = getattr ( self , opts . parent_attr )`  (family: MORE_SPECIFIC_IF)"
    },
    {
      "question": "This line is buggy: `return int ( math . ceil ( cart_item . amount / cart_item . product . packing_unit ) )`. Provide the correct version only. [ADD_FUNCTION_AROUND_EXPRESSION]"
    },
    {
      "question": "This line is buggy: `form_model = form_factory ( \"%s-country\" % self . type )`. Provide the correct version only. [ADD_FUNCTION_AROUND_EXPRESSION]"
    },
    {
      "question": "Replace the buggy snippet with a correct one: `if path_info [ - 1 ] == '/' : return path_info [ : - 1 ] else : return path_info`  [pattern=MORE_SPECIFIC_IF]"
    },
    {
      "question": "This line is buggy: `migration . db_sync ( version = None , repo_path = repo_path )`. Provide the correct version only. [SINGLE_TOKEN]"
    },
    {
      "question": "Identify the issue in `token_id = request . headers . get ( AUTH_TOKEN_HEADER )` and provide the corrected single-line fix. [ADD_METHOD_CALL]"
    },
    {
      "question": "Produce the corrected version of: `LOG . debug ( 'Received token with no audit_chain_id.' , token_id )`  (family: SAME_FUNCTION_LESS_ARGS)"
    },
    {
      "question": "Replace the buggy snippet with a correct one: `delete_query = query . filter ( TokenModel . expires < expiry_time )`  [pattern=CHANGE_BINARY_OPERATOR]"
    },
    {
      "question": "Fix the error in: `return mark_safe ( '<img src=\"%s\" alt=\"%s\" width=\"%s\" height=\"%s\" />' % ( avatar . avatar_url ( size ) , avatar , size , size ) )`. Return only the corrected line. [ADD_FUNCTION_AROUND_EXPRESSION]"
    },
    {
      "question": "Apply the minimal change that makes this line correct: `key = '' . join ( ( str ( c . lang ) , str ( c . content_langs ) , request . host , c . cname , request . fullpath , str ( c . firsttime ) , str ( c . over18 ) ) )`  (ADD_FUNCTION_AROUND_EXPRESSION)"
    },
    {
      "question": "Produce the corrected version of: `if os . path . samefile ( old_cfg , target ) : pass`  (family: MORE_SPECIFIC_IF)"
    },
    {
      "question": "This line is buggy: `Add ( group , \"dbhost\" , HOSTNAME , help = \"Hostname of the OMERO database server\" )`. Provide the correct version only. [SINGLE_TOKEN]"
    },
    {
      "question": "Given the buggy code: `if len ( sys . argv ) == 2 : init_node_list_file ( ) init_node_role_file ( )`, rewrite it into a correct version. (Bug type: MORE_SPECIFIC_IF)"
    },
    {
      "question": "Produce the corrected version of: `self . transport . write ( proto . DebugLinkGetState ( pin = True , matrix = True ) )`  (family: SAME_FUNCTION_LESS_ARGS)"
    },
    {
      "question": "Apply the minimal change that makes this line correct: `return self . client . reset_device ( True , args . strength , args . passphrase , args . pin , args . label )`  (SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Fix the error in: `if name == [ 'manage' , 'cleanup' ] and not NODE_ROLE . is_controller ( ) : continue`. Return only the corrected line. [CHANGE_BINARY_OPERATOR]"
    },
    {
      "question": "Apply the minimal change that makes this line correct: `def get ( self , request , format = None ) : return self . success_response ( 'Good' )`  (SINGLE_TOKEN)"
    },
    {
      "question": "This line is buggy: `punchs = Punch . objects . filter ( user = user , date__lte = end_date , date__gte = start_date )`. Provide the correct version only. [SAME_FUNCTION_MORE_ARGS]"
    },
    {
      "question": "Correct the following line while preserving intent: `if ( self . EndTime - self . StartTime ) . total_seconds ( ) == 0 : raise ValueError ( \"0-duration activity\" )`  (MORE_SPECIFIC_IF)"
    },
    {
      "question": "Apply the minimal change that makes this line correct: `return vendor ( 'select.js' , 'select.css' , 'xadmin.widget.select.js' ) + Media ( js = [ static ( 'xadmin/vendor/select2/select2_locale_%s.js' % get_language ( ) ) ] )`  (ADD_METHOD_CALL)"
    },
    {
      "question": "Replace the buggy snippet with a correct one: `if len ( context [ \"allWorkers\" ] ) > 0 : context [ \"loadFactor\" ] = stats [ \"TotalSyncTimeUsed\" ] / ( len ( context [ \"allWorkers\" ] ) * 60 * 60 ) else : context [ \"loadFactor\" ] = 0`  [pattern=MORE_SPECIFIC_IF]"
    },
    {
      "question": "Fix the error in: `def __repr__ ( self ) : tpl = get_template ( self . template ) return mark_safe ( tpl . render ( Context ( self . get_context ( ) ) ) )`. Return only the corrected line. [SINGLE_TOKEN]"
    },
    {
      "question": "Replace the buggy snippet with a correct one: `type . __init__ ( cls )`  [pattern=SAME_FUNCTION_MORE_ARGS]"
    },
    {
      "question": "This line is buggy: `if data [ \"threshold\" ] < data [ \"copies\" ] :`. Provide the correct version only. [CHANGE_BINARY_OPERATOR]"
    },
    {
      "question": "Identify the issue in `filtresult = [ self . create_output ( x , columns , filtercolumns ) for x in prefiltresult ]` and provide the corrected single-line fix. [SAME_FUNCTION_MORE_ARGS]"
    },
    {
      "question": "Produce the corrected version of: `if not h . is_tpl ( ) : hname = h . host_name if hasattr ( h , 'hostgroups' ) : hgs = h . hostgroups . split ( ',' )`  (family: MORE_SPECIFIC_IF)"
    },
    {
      "question": "Given the buggy code: `s = unicode ( e , 'utf8' )`, rewrite it into a correct version. (Bug type: SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "This line is buggy: `try : os . symlink ( target , link ) except OSError as e : raise OSError ( str ( e ) + ' on os.symlink(%r,%r)' % ( target , link ) ) except : raise`. Provide the correct version only. [SINGLE_TOKEN]"
    },
    {
      "question": "Replace the buggy snippet with a correct one: `attribute [ field ] = None`  [pattern=SINGLE_TOKEN]"
    },
    {
      "question": "Apply the minimal change that makes this line correct: `if current_user . _id == user . _id : n_projects_in_common = - 1 elif current_user : n_projects_in_common = current_user . n_projects_in_common ( user )`  (MORE_SPECIFIC_IF)"
    },
    {
      "question": "Produce the corrected version of: `id_field = getattr ( self . root . instance , self . source )`  (family: SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Identify the issue in `self . _size = None` and provide the corrected single-line fix. [SINGLE_TOKEN]"
    },
    {
      "question": "Apply the minimal change that makes this line correct: `openerp_ids = self . session . search ( self . model . _name , [ ( 'magento_id' , '=' , external_id ) , ( 'backend_id' , '=' , self . backend_record . id ) ] )`  (ADD_FUNCTION_AROUND_EXPRESSION)"
    },
    {
      "question": "Fix the error in: `{ 'magento_id' : external_id } ,`. Return only the corrected line. [ADD_FUNCTION_AROUND_EXPRESSION]"
    },
    {
      "question": "Correct the following line while preserving intent: `discount = float ( 'shipping_discount_amount' , 0.0 )`  (ADD_FUNCTION_AROUND_EXPRESSION)"
    },
    {
      "question": "Given the buggy code: `url = image_data [ 'url' ]`, rewrite it into a correct version. (Bug type: ADD_METHOD_CALL)"
    },
    {
      "question": "Produce the corrected version of: `if self . model in self . admin_site . _registry and isinstance ( db_field , ( models . ForeignKey , models . ManyToManyField ) ) : rel_model = get_model_from_relation ( db_field ) if rel_model in self . admin_site . _registry and self . has_model_perm ( rel_model , 'add' ) : add_url = self . get_model_url ( rel_model , 'add' )`  (family: MORE_SPECIFIC_IF)"
    },
    {
      "question": "Identify the issue in `if self . model in self . admin_site . _registry and isinstance ( db_field , ( models . ForeignKey , models . ManyToManyField ) ) : rel_model = get_model_from_relation ( db_field ) if rel_model in self . admin_site . _registry and self . has_model_perm ( rel_model , 'add' ) : add_url = self . get_model_url ( rel_model , 'add' )` and provide the corrected single-line fix. [MORE_SPECIFIC_IF]"
    },
    {
      "question": "Produce the corrected version of: `if inp . get ( \"name\" ) : params . append ( InputParameter ( inp . get ( \"name\" ) , inp . get ( \"value\" ) , inp . get ( \"type\" ) ) )`  (family: MORE_SPECIFIC_IF)"
    },
    {
      "question": "Produce the corrected version of: `self . serveropts [ 'bindAddress' ] = bindAddress`  (family: ADD_FUNCTION_AROUND_EXPRESSION)"
    },
    {
      "question": "Fix the following statement so it is correct: `if c . status == 'scheduled' : t_to_go = c . t_to_go ref = c . ref new_t = max ( 0 , t_to_go + difference )` (Pattern: MORE_SPECIFIC_IF)"
    },
    {
      "question": "Fix the following statement so it is correct: `if shop . root_category_id : rid = self . pool . get ( 'product.category' ) . extid_to_oeid ( cr , uid , shop . root_category_id , shop . shop_group_id . referential_id . id ) res [ shop . id ] = rid else :` (Pattern: MORE_SPECIFIC_IF)"
    },
    {
      "question": "Fix the error in: `result = update_image ( ext_file_name , each )`. Return only the corrected line. [SAME_FUNCTION_MORE_ARGS]"
    },
    {
      "question": "Replace the buggy snippet with a correct one: `return self . send_report ( cr , uid , external_session . file_session , [ invoice . id ] , report_name , invoice_number , invoice_path , context = context )`  [pattern=SAME_FUNCTION_MORE_ARGS]"
    },
    {
      "question": "Apply the minimal change that makes this line correct: `json . dump ( { \"bank\" : self . lib [ \"radio_banks\" ] . keys ( ) [ 0 ] } , fp )`  (ADD_FUNCTION_AROUND_EXPRESSION)"
    },
    {
      "question": "Given the buggy code: `env_file . write ( value )`, rewrite it into a correct version. (Bug type: ADD_FUNCTION_AROUND_EXPRESSION)"
    },
    {
      "question": "Produce the corrected version of: `env_file . write ( value )`  (family: ADD_FUNCTION_AROUND_EXPRESSION)"
    },
    {
      "question": "Identify the issue in `if os . path . exists ( fname ) : self . parse_file ( fname ) else : binwalk . core . common . warning ( \"Magic file '%s' does not exist!\" % fname )` and provide the corrected single-line fix. [MORE_SPECIFIC_IF]"
    },
    {
      "question": "Fix the error in: `else : state = self . _machine . get_state ( obj . state )`. Return only the corrected line. [ADD_METHOD_CALL]"
    },
    {
      "question": "Identify the issue in `self . _last_confirm = delivery_tag` and provide the corrected single-line fix. [ADD_FUNCTION_AROUND_EXPRESSION]"
    },
    {
      "question": "Apply the minimal change that makes this line correct: `print ( \"Replaying\" , method , properties )`  (SAME_FUNCTION_LESS_ARGS)"
    },
    {
      "question": "This line is buggy: `calculation = Calculation ( pa_calculation_parameters , spar_calculation_parameters , pub_calculation_parameters )`. Provide the correct version only. [SAME_FUNCTION_MORE_ARGS]"
    },
    {
      "question": "Given the buggy code: `transformer = getattr ( self , 'transform_download' )`, rewrite it into a correct version. (Bug type: SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Produce the corrected version of: `priceInBaseCcy = amount . Amount ( entry . amount . number / fxRate [ 1 ] , baseCcy )`  (family: CHANGE_BINARY_OPERATOR)"
    },
    {
      "question": "Apply the minimal change that makes this line correct: `handles = { k : h5py . File ( v ) for ( k , v ) in output . items ( ) }`  (SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Replace the buggy snippet with a correct one: `result = await self . run ( ** self . _executor_kwargs )`  [pattern=SAME_FUNCTION_MORE_ARGS]"
    },
    {
      "question": "Fix the following statement so it is correct: `self . sf . error ( \"Unable to fetch \" + url )` (Pattern: SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "This line is buggy: `with open ( os . path . join ( self . data_dir , 'classes.csv' ) , 'r' ) as f : lines = [ l . split ( ',' ) for l in f . readlines ( ) ] lines = [ [ l [ 0 ] , np . uint8 ( l [ 1 : ] ) ] for l in lines if len ( l ) == 4 ] self . classes = lines`. Provide the correct version only. [SAME_FUNCTION_MORE_ARGS]"
    },
    {
      "question": "Apply the minimal change that makes this line correct: `if self . multi_scale : scale = int ( random . uniform ( self . img_size // 64 , self . img_size // 21 ) ) scale = scale if scale > 0 else 1 scale *= 32`  (MORE_SPECIFIC_IF)"
    },
    {
      "question": "Fix the following statement so it is correct: `ksize = 2 * ksize + 1` (Pattern: ADD_FUNCTION_AROUND_EXPRESSION)"
    },
    {
      "question": "Replace the buggy snippet with a correct one: `tuple = unquote ( targetString ) . replace ( \"+\" , \" \" ) . split ( splitter )`  [pattern=ADD_METHOD_CALL]"
    },
    {
      "question": "Apply the minimal change that makes this line correct: `if len ( r . get ( responsekey ) ) == pagesize : if accum : accum . extend ( r . get ( responsekey ) ) else :`  (SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Apply the minimal change that makes this line correct: `self . sf . error ( message )`  (SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Produce the corrected version of: `res = self . sf . fetchUrl ( url , timeout = 10 , useragent = \"SpiderFoot\" )`  (family: SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Produce the corrected version of: `emails = self . sf . parseEmails ( str ( photo ) . decode ( 'unicode-escape' ) )`  (family: ADD_FUNCTION_AROUND_EXPRESSION)"
    },
    {
      "question": "Apply the minimal change that makes this line correct: `if context == None : apply_context ( self . model , context )`  (CHANGE_BINARY_OPERATOR)"
    },
    {
      "question": "Identify the issue in `return data_map . get_scores ( ) if self . score_apply is None else self . score_apply ( data_map )` and provide the corrected single-line fix. [ADD_METHOD_CALL]"
    },
    {
      "question": "Correct the following line while preserving intent: `shutil . rmtree ( self . session_path . joinpath ( \"alf\" ) )`  (SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Replace the buggy snippet with a correct one: `if self . targetType == \"INTERNET_NAME\" : e . append ( self . targetValue . lower ( ) )`  [pattern=MORE_SPECIFIC_IF]"
    },
    {
      "question": "Given the buggy code: `if not self . getTarget ( ) . matches ( mailDom ) : self . sf . debug ( \"External domain, so possible affiliate e-mail\" )`, rewrite it into a correct version. (Bug type: MORE_SPECIFIC_IF)"
    },
    {
      "question": "Given the buggy code: `if data_record . get ( 'shipping_amount' , False ) and data_record . get ( 'shipping_amount' , False ) > 0 : res = self . get_order_shipping ( cr , uid , res , external_referential_id , data_record , key_field , mapping_lines , defaults , context )`, rewrite it into a correct version. (Bug type: ADD_FUNCTION_AROUND_EXPRESSION)"
    },
    {
      "question": "Identify the issue in `if result [ 5 ] and ( result [ 6 ] == \"\" or \"simple\" in result [ 6 ] or \"configurable\" in result [ 6 ] ) : xml += \"\"\" attrs=\"{'required':[('exportable','=',True)]}\" \"\"\"` and provide the corrected single-line fix. [MORE_SPECIFIC_IF]"
    },
    {
      "question": "Replace the buggy snippet with a correct one: `ctx [ 'conn_obj' ] . call ( 'product_stock.update' , [ product . magento_sku , { 'qty' : virtual_available , 'is_in_stock' : 1 } ] )`  [pattern=SINGLE_TOKEN]"
    },
    {
      "question": "Given the buggy code: `self . pool . get ( 'sale.shop' ) . write ( cr , uid , context [ 'shop_id' ] , { 'last_products_export_date' : datetime . datetime . today ( ) } )`, rewrite it into a correct version. (Bug type: ADD_METHOD_CALL)"
    },
    {
      "question": "Given the buggy code: `if cr . fetchone ( ) and 'customer_taxvat' in data_record : allchars = string . maketrans ( '' , '' ) delchars = '' . join ( [ c for c in allchars if c not in string . letters + string . digits ] ) vat = data_record [ 'customer_taxvat' ] . translate ( allchars , delchars ) . upper ( )`, rewrite it into a correct version. (Bug type: MORE_SPECIFIC_IF)"
    },
    {
      "question": "Fix the following statement so it is correct: `self . generate_payment_with_pay_code ( cr , uid , payment [ 'method' ] , order . partner_id . id , amount , \"mag_\" + payment [ 'payment_id' ] , \"mag_\" + data_record [ 'increment_id' ] , order . date_order , paid , context )` (Pattern: ADD_FUNCTION_AROUND_EXPRESSION)"
    },
    {
      "question": "Apply the minimal change that makes this line correct: `line_val [ 'type' ] = self . pool . get ( 'product.product' ) . read ( cr , uid , line_val [ 'product_id' ] , context ) [ 'procure_method' ]`  (SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Fix the error in: `if begin <= opening : raise ValidationError ( _ ( \"You must start the reservation during opening hours\" ) )`. Return only the corrected line. [CHANGE_BINARY_OPERATOR]"
    },
    {
      "question": "Replace the buggy snippet with a correct one: `def __init__ ( self ) : u1 = Unit . objects . create ( name = 'Unit 1' , id = 'unit_1' ) u2 = Unit . objects . create ( name = 'Unit 2' , id = 'unit_2' ) rt = ResourceType . objects . create ( name = 'Type 1' , id = 'type_1' , main_type = 'space' )`  [pattern=SINGLE_TOKEN]"
    },
    {
      "question": "Identify the issue in `if field . get_internal_type ( ) == 'CharField' : if len ( val ) > field . max_length : raise Exception ( \"field '%s' too long (max. %d): %s\" % field_name , field . max_length , val )` and provide the corrected single-line fix. [MORE_SPECIFIC_IF]"
    },
    {
      "question": "Apply the minimal change that makes this line correct: `res_type_id = self . RESOURCETYPE_IDS [ res_data [ 'Tilatyyppi' ] ]`  (ADD_METHOD_CALL)"
    },
    {
      "question": "Apply the minimal change that makes this line correct: `if overlapping_periods : raise ValidationError ( \"There is already a period on these dates\" , code = \"overlap\" )`  (ADD_METHOD_CALL)"
    },
    {
      "question": "This line is buggy: `args = collect_args . collectArgs ( [ ] , optionalArgs = optArgs )`. Provide the correct version only. [SAME_FUNCTION_MORE_ARGS]"
    },
    {
      "question": "Given the buggy code: `procInfo [ 'proc' ] = startProcess ( scriptName , procInfo [ 'heartbeatFileName' ] , args . collectPositves )`, rewrite it into a correct version. (Bug type: SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Given the buggy code: `tr = cls . parse ( trust_root , check_sanity = True )`, rewrite it into a correct version. (Bug type: SAME_FUNCTION_LESS_ARGS)"
    },
    {
      "question": "Replace the buggy snippet with a correct one: `self . trust_root = query . get ( OPENID_PREFIX + 'trust_root' )`  [pattern=SAME_FUNCTION_MORE_ARGS]"
    },
    {
      "question": "Correct the following line while preserving intent: `else : return super ( DataTableJSONEncoder , self ) . default ( self , o )`  (SAME_FUNCTION_LESS_ARGS)"
    },
    {
      "question": "Fix the error in: `response = consumer . check_auth ( su , rt , pd )`. Return only the corrected line. [SAME_FUNCTION_MORE_ARGS]"
    },
    {
      "question": "Identify the issue in `def map ( x , y , xWidth , yHeight ) :` and provide the corrected single-line fix. [SINGLE_TOKEN]"
    },
    {
      "question": "Given the buggy code: `return json . dumps ( self . __dict__ , indent = 4 )`, rewrite it into a correct version. (Bug type: SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Apply the minimal change that makes this line correct: `try : data = json . loads ( dataStr ) except ValueError as valerr : print valerr raise JsonRpc2ComplianceException ( \"Could not parse data into json object: %s\" % str ( valerr ) )`  (SINGLE_TOKEN)"
    },
    {
      "question": "Produce the corrected version of: `no_csrf = apex_settings ( 'no_csrf' ) . split ( ':' )`  (family: SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Identify the issue in `p = subprocess . Popen ( command , shell = shell , stdout = subprocess . PIPE )` and provide the corrected single-line fix. [SAME_FUNCTION_MORE_ARGS]"
    },
    {
      "question": "Fix the following statement so it is correct: `tmp_file = NamedTemporaryFile ( delete = False , prefix = 'xx_' )` (Pattern: SAME_FUNCTION_LESS_ARGS)"
    },
    {
      "question": "Identify the issue in `assoc . secret = base64 . encodestring ( association . secret )` and provide the corrected single-line fix. [ADD_METHOD_CALL]"
    },
    {
      "question": "Fix the error in: `return dict ( ( key , val [ 0 ] ) for key , val in six . iteritems ( self . request . arguments ) )`. Return only the corrected line. [ADD_METHOD_CALL]"
    },
    {
      "question": "Given the buggy code: `self . rfile = self . connection . makefile ( 'rb' )`, rewrite it into a correct version. (Bug type: SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Replace the buggy snippet with a correct one: `timestamp = os . stat ( file ) [ 8 ]`  [pattern=ADD_FUNCTION_AROUND_EXPRESSION]"
    },
    {
      "question": "Correct the following line while preserving intent: `insertion_data_by_chromosome [ RISCC_read_data [ 0 ] . chromosome ] . add ( RISCC_read_data )`  (ADD_FUNCTION_AROUND_EXPRESSION)"
    },
    {
      "question": "Produce the corrected version of: `all_alignment_data . find_genes_for_mutants ( genefile , detailed_features = options . detailed_gene_features , N_run_groups = options . N_detail_run_groups , verbosity_level = options . verbosity_level )`  (family: SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Given the buggy code: `print_lengths ( readlen_counter , include_zeros )`, rewrite it into a correct version. (Bug type: SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Apply the minimal change that makes this line correct: `fields = line . strip ( ) . split ( '\\t' )`  (SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Fix the following statement so it is correct: `self . on ( \"terminal:opt_esc_handler:%s\" % plugin_name , hooks [ 'Escape' ] )` (Pattern: ADD_FUNCTION_AROUND_EXPRESSION)"
    },
    {
      "question": "Produce the corrected version of: `self . putsequences ( )`  (family: SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Given the buggy code: `return ( domain == self . domain )`, rewrite it into a correct version. (Bug type: CHANGE_BINARY_OPERATOR)"
    },
    {
      "question": "Given the buggy code: `def __init__ ( self , url = None , ** kw ) : super ( Client , self ) . __init__ ( url )`, rewrite it into a correct version. (Bug type: SINGLE_TOKEN)"
    },
    {
      "question": "Given the buggy code: `if view . name ( ) == self . view . name ( ) : self . view = None`, rewrite it into a correct version. (Bug type: MORE_SPECIFIC_IF)"
    },
    {
      "question": "Identify the issue in `else : if not elt . in_maintenance in self . downtimes : elt . in_maintenance = False` and provide the corrected single-line fix. [SINGLE_TOKEN]"
    },
    {
      "question": "Fix the following statement so it is correct: `con . get ( 'fill_initial_broks' , { 'bname' : self . name } )` (Pattern: SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Apply the minimal change that makes this line correct: `welcome_page = chapter . welcome_page . format ( chapter = chapter )`  (SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Produce the corrected version of: `rsvpmessage . date = user_dt`  (family: ADD_METHOD_CALL)"
    },
    {
      "question": "Apply the minimal change that makes this line correct: `fss , ok = macfs . StandardGetFile ( QuickTime . MovieFileType )`  (SAME_FUNCTION_LESS_ARGS)"
    },
    {
      "question": "Fix the error in: `self . capabilities = tuple ( string . split ( self . untagged_responses [ cap ] [ - 1 ] ) )`. Return only the corrected line. [ADD_FUNCTION_AROUND_EXPRESSION]"
    },
    {
      "question": "Given the buggy code: `self . __frame . grid ( row = 3 , column = 0 , ipadx = 5 )`, rewrite it into a correct version. (Bug type: SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Given the buggy code: `accept = accept + string . split ( line [ 7 : ] )`, rewrite it into a correct version. (Bug type: SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Correct the following line while preserving intent: `while is_all_white ( line ) : lineno = lineno + 1 line = text . get ( \"%d.0\" % lineno , \"%d.0 lineend\" % lineno )`  (MORE_SPECIFIC_IF)"
    },
    {
      "question": "Identify the issue in `return jwt . encode ( payload , secret_key )` and provide the corrected single-line fix. [ADD_METHOD_CALL]"
    },
    {
      "question": "Identify the issue in `if not headphones . CONFIG . CUSTOMAUTH : musicbrainzngs . disable_hpauth ( )` and provide the corrected single-line fix. [MORE_SPECIFIC_IF]"
    },
    {
      "question": "Identify the issue in `if \"text/html\" in response . headers . get ( \"content-type\" ) : try : soup = BeautifulSoup ( response . content , \"html5lib\" ) except Exception :` and provide the corrected single-line fix. [MORE_SPECIFIC_IF]"
    },
    {
      "question": "Replace the buggy snippet with a correct one: `if headphones . CONFIG . DETECT_BITRATE : headphones . CONFIG . PREFERRED_BITRATE = sum ( bitrates ) / len ( bitrates ) / 1000 else :`  [pattern=MORE_SPECIFIC_IF]"
    },
    {
      "question": "Fix the following statement so it is correct: `folder = folder . replace ( './' , '_/' ) . replace ( ':' , '_' ) . replace ( '?' , '_' ) . replace ( '/.' , '/_' ) . replace ( '<' , '_' ) . replace ( '>' , '_' )` (Pattern: ADD_METHOD_CALL)"
    },
    {
      "question": "Fix the error in: `size = desc_match . group ( 1 )`. Return only the corrected line. [ADD_FUNCTION_AROUND_EXPRESSION]"
    },
    {
      "question": "Given the buggy code: `r = self . session . post ( loginpage , data = data , timeout = self . default_timeout )`, rewrite it into a correct version. (Bug type: SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Apply the minimal change that makes this line correct: `logger . debug ( item_name + \" -> \" + my_val )`  (ADD_FUNCTION_AROUND_EXPRESSION)"
    },
    {
      "question": "Produce the corrected version of: `data = request . request_feed ( url = providerurl , params = params , headers = headers , timeout = 20 )`  (family: SAME_FUNCTION_LESS_ARGS)"
    },
    {
      "question": "Apply the minimal change that makes this line correct: `string = re . sub ( '[:?<>\"|]' )`  (SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Produce the corrected version of: `if errors : self . errorlog . attribute_error ( self . frame . current_opcode , obj , attr )`  (family: MORE_SPECIFIC_IF)"
    },
    {
      "question": "This line is buggy: `ver_file . write ( headphones . LATEST_VERSION )`. Provide the correct version only. [ADD_FUNCTION_AROUND_EXPRESSION]"
    },
    {
      "question": "Correct the following line while preserving intent: `cur_commit_hash = output`  (ADD_FUNCTION_AROUND_EXPRESSION)"
    },
    {
      "question": "Fix the error in: `multiPartParams = { \"nzbfile\" : ( nzb . name + \".nzb\" , nzbdata ) }`. Return only the corrected line. [ADD_FUNCTION_AROUND_EXPRESSION]"
    },
    {
      "question": "Produce the corrected version of: `kwargs [ \"verify\" ] = headphones . CONFIG . VERIFY_SSL_CERT`  (family: ADD_FUNCTION_AROUND_EXPRESSION)"
    },
    {
      "question": "Fix the error in: `super ( TestCmeRegistration , self ) . setUp ( 'lms.urls' )`. Return only the corrected line. [SAME_FUNCTION_LESS_ARGS]"
    },
    {
      "question": "Produce the corrected version of: `definition = { attr_name : json . loads ( attr_value ) for attr_name , attr_value in xml_object . attrib }`  (family: ADD_METHOD_CALL)"
    },
    {
      "question": "Produce the corrected version of: `params = client . get_oauth_params ( None )`  (family: SINGLE_TOKEN)"
    },
    {
      "question": "Correct the following line while preserving intent: `def test_return_response_true ( ) : def response_callback ( incoming_response ) :`  (SINGLE_TOKEN)"
    },
    {
      "question": "Identify the issue in `if node . tag in TAGS and not ( self . draw_text_as_text and TAGS [ node . tag ] != text ) : try : TAGS [ node . tag ] ( self , node ) except PointError :` and provide the corrected single-line fix. [CHANGE_BINARY_OPERATOR]"
    },
    {
      "question": "Identify the issue in `angle = pi / 2 if size ( surface , y , 'y' ) > 0 else - pi / 2` and provide the corrected single-line fix. [SINGLE_TOKEN]"
    },
    {
      "question": "Replace the buggy snippet with a correct one: `return`  [pattern=SINGLE_TOKEN]"
    },
    {
      "question": "Correct the following line while preserving intent: `for i in range ( len ( chatroom [ 'MemberList' ] ) / MAX_GET_NUMBER + 1 ) : memberList = chatroom [ 'MemberList' ] [ i * MAX_GET_NUMBER : ( i + 1 ) * MAX_GET_NUMBER ] totalMemberList += get_detailed_member_info ( chatroom [ 'EncryChatRoomId' ] , memberList )`  (ADD_FUNCTION_AROUND_EXPRESSION)"
    },
    {
      "question": "Correct the following line while preserving intent: `click . secho ( text , fg = 'red' , bold = True , nl = nl )`  (SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Replace the buggy snippet with a correct one: `call_service ( '/capability_server/get_providers' , 'not_a_pkg/NotAnInterface' )`  [pattern=SAME_FUNCTION_MORE_ARGS]"
    },
    {
      "question": "Fix the following statement so it is correct: `if idx < 0 : return ( None ) elif idx > len ( my_list ) : return ( None ) else : return ( my_list [ idx ] )` (Pattern: CHANGE_BINARY_OPERATOR)"
    },
    {
      "question": "Fix the following statement so it is correct: `if my_list == None : return ( )` (Pattern: CHANGE_BINARY_OPERATOR)"
    },
    {
      "question": "Replace the buggy snippet with a correct one: `if sentence is None : return ( 0 , None ) else : length = len ( sentence )`  [pattern=SINGLE_TOKEN]"
    },
    {
      "question": "Identify the issue in `return ( max ( a_dictionary ) )` and provide the corrected single-line fix. [ADD_METHOD_CALL]"
    },
    {
      "question": "This line is buggy: `self . hdf . setValue ( prefix , markup . escape ( value ) )`. Provide the correct version only. [ADD_METHOD_CALL]"
    },
    {
      "question": "This line is buggy: `if current != default : if not config . has_section ( section ) : config . add_section ( section ) config . set ( section , option , current or '' )`. Provide the correct version only. [MORE_SPECIFIC_IF]"
    },
    {
      "question": "Fix the following statement so it is correct: `text = \"</p>%s<p>\" % text` (Pattern: ADD_FUNCTION_AROUND_EXPRESSION)"
    },
    {
      "question": "Given the buggy code: `args [ x ] = argv . value`, rewrite it into a correct version. (Bug type: ADD_METHOD_CALL)"
    },
    {
      "question": "Produce the corrected version of: `else : self . self_route . delete ( )`  (family: SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Identify the issue in `self . env . delete_attachment ( self . db , parent_type , parent_id , filename )` and provide the corrected single-line fix. [SAME_FUNCTION_LESS_ARGS]"
    },
    {
      "question": "Fix the error in: `yield line`. Return only the corrected line. [ADD_FUNCTION_AROUND_EXPRESSION]"
    },
    {
      "question": "Given the buggy code: `hdrs [ 'X-Trac-Ticket-ID' ] = self . ticket . id`, rewrite it into a correct version. (Bug type: ADD_FUNCTION_AROUND_EXPRESSION)"
    },
    {
      "question": "Replace the buggy snippet with a correct one: `attachments_dir = os . path . join ( self . env . path , 'attachments' )`  [pattern=ADD_FUNCTION_AROUND_EXPRESSION]"
    },
    {
      "question": "Identify the issue in `def __setattr ( self , name , value ) : setattr ( twill . get_browser ( ) , name , value )` and provide the corrected single-line fix. [SINGLE_TOKEN]"
    },
    {
      "question": "Identify the issue in `html_context = Context . from_request ( req , absurls = True )` and provide the corrected single-line fix. [SAME_FUNCTION_LESS_ARGS]"
    },
    {
      "question": "Identify the issue in `component_name = cls` and provide the corrected single-line fix. [ADD_METHOD_CALL]"
    },
    {
      "question": "Identify the issue in `if re . match ( r , kwd [ len ( 'wiki:' ) : ] ) : return self . env . href . wiki ( kwd [ len ( 'wiki:' ) : ] ) elif kwd [ 0 ] . isupper ( ) and kwd [ 1 ] . islower ( ) : r = \"((^|(?<=[^A-Za-z]))[!]?[A-Z][a-z/]+(?:[A-Z][a-z/]+)+)\" if re . match ( r , kwd ) : return self . env . href . wiki ( kwd )` and provide the corrected single-line fix. [MORE_SPECIFIC_IF]"
    },
    {
      "question": "Apply the minimal change that makes this line correct: `help = 'run a reducer' ) self . option_parser . add_option ( '--step-num' , dest = 'step_num' , type = 'int' , default = 0 , default = False , help = 'which step to execute (default is 0)' )`  (SAME_FUNCTION_LESS_ARGS)"
    },
    {
      "question": "Apply the minimal change that makes this line correct: `return tb . getvalue ( )`  (ADD_FUNCTION_AROUND_EXPRESSION)"
    },
    {
      "question": "Given the buggy code: `if ticket . _old : if 'TICKET_CHGPROP' not in req . perm : req . warning ( \"No permission to change ticket fields.\" ) ticket . values = ticket . _old`, rewrite it into a correct version. (Bug type: MORE_SPECIFIC_IF)"
    },
    {
      "question": "This line is buggy: `query = Query . from_string ( self . env , req , query [ 6 : ] , report = id )`. Provide the correct version only. [SAME_FUNCTION_LESS_ARGS]"
    },
    {
      "question": "Replace the buggy snippet with a correct one: `processor = WikiProcessor ( Formatter ( context ) , language )`  [pattern=SAME_FUNCTION_MORE_ARGS]"
    },
    {
      "question": "This line is buggy: `def render_macro ( self , formatter , name , content ) : req = formatter . req query_string = '' argv , kwargs = parse_args ( content )`. Provide the correct version only. [SINGLE_TOKEN]"
    },
    {
      "question": "Given the buggy code: `if milestone . completed > datetime . now ( utc ) : raise TracError ( 'Completion date may not be in the future' , 'Invalid Completion Date' )`, rewrite it into a correct version. (Bug type: MORE_SPECIFIC_IF)"
    },
    {
      "question": "This line is buggy: `if options . pidfile : options . pidfile = os . path . abspath ( options . pidfile )`. Provide the correct version only. [MORE_SPECIFIC_IF]"
    },
    {
      "question": "Correct the following line while preserving intent: `if options . pidfile : options . pidfile = os . path . abspath ( options . pidfile )`  (MORE_SPECIFIC_IF)"
    },
    {
      "question": "This line is buggy: `zipinfo . filename = new_node . path . encode ( 'utf-8' )`. Provide the correct version only. [ADD_METHOD_CALL]"
    },
    {
      "question": "Fix the error in: `hdf . setValue ( 'trac.authname' , req . authname )`. Return only the corrected line. [ADD_FUNCTION_AROUND_EXPRESSION]"
    },
    {
      "question": "Identify the issue in `if not order in Ticket . std_fields : order = 'priority'` and provide the corrected single-line fix. [MORE_SPECIFIC_IF]"
    },
    {
      "question": "Fix the error in: `if '\\n' in fval : big . append ( ( fname . capitalize ( ) , fval ) ) else : txt += format [ i % 2 ] % ( fname . capitalize ( ) , fval )`. Return only the corrected line. [ADD_FUNCTION_AROUND_EXPRESSION]"
    },
    {
      "question": "Produce the corrected version of: `self . in_list_item = True`  (family: SINGLE_TOKEN)"
    },
    {
      "question": "Fix the error in: `if path . startswith ( self . scope ) : yield path [ len ( self . scope ) : ] , rev`. Return only the corrected line. [MORE_SPECIFIC_IF]"
    },
    {
      "question": "Fix the following statement so it is correct: `if not fs . has_key ( name ) : fs . list . append ( cgi . MiniFieldStorage ( name , value ) )` (Pattern: MORE_SPECIFIC_IF)"
    },
    {
      "question": "Given the buggy code: `if i < maxlen : shortline = text [ : i ] + ' ...' elif len ( text ) < maxlen : shortline = text else :`, rewrite it into a correct version. (Bug type: MORE_SPECIFIC_IF)"
    },
    {
      "question": "Fix the error in: `for field in constraints : values = constraints [ field ] if type ( values ) != list : values = [ values ]`. Return only the corrected line. [ADD_METHOD_CALL]"
    },
    {
      "question": "This line is buggy: `authenticated = x < 10`. Provide the correct version only. [ADD_FUNCTION_AROUND_EXPRESSION]"
    },
    {
      "question": "Apply the minimal change that makes this line correct: `repos = Mock ( Repository , None , self . log , get_changeset = lambda x : None , get_youngest_rev = lambda : 1 , next_rev = lambda x : None )`  (SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Correct the following line while preserving intent: `message = wiki_to_html ( message or '--' , self . env , db )`  (SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Replace the buggy snippet with a correct one: `\"max:\" , max_len , max_addr`  [pattern=ADD_FUNCTION_AROUND_EXPRESSION]"
    },
    {
      "question": "Replace the buggy snippet with a correct one: `if 'address' in self . history_cache : print_log ( \"cache: invalidating\" , address ) self . history_cache . pop ( address )`  [pattern=SINGLE_TOKEN]"
    },
    {
      "question": "Identify the issue in `if item_height < tx_height : serialized_hist = serialized_hist [ 0 : 80 * ( i + 1 ) ] + s + serialized_hist [ 80 * ( i + 1 ) : ] break` and provide the corrected single-line fix. [CHANGE_BINARY_OPERATOR]"
    },
    {
      "question": "Given the buggy code: `column = [ char [ column_position ] for char in self . alignment ]`, rewrite it into a correct version. (Bug type: ADD_METHOD_CALL)"
    },
    {
      "question": "Produce the corrected version of: `out_file . write ( \">%s\\n%s\\n\" % ( key , seq ) )`  (family: ADD_METHOD_CALL)"
    },
    {
      "question": "Correct the following line while preserving intent: `unique_prefixes = unique_prefixes . values ( )`  (ADD_FUNCTION_AROUND_EXPRESSION)"
    },
    {
      "question": "Given the buggy code: `if df and not df . allow_on_submit and self . get ( key ) != value : frappe . throw ( _ ( \"Not allowed to change {0} after submission\" ) . format ( df . label ) , frappe . UpdateAfterSubmitError )`, rewrite it into a correct version. (Bug type: MORE_SPECIFIC_IF)"
    },
    {
      "question": "Correct the following line while preserving intent: `frappe . response [ \"values\" ] = frappe . widgets . reportview . execute ( doctype , filters = filters , fields = get_std_fields_list ( meta , searchfield or \"name\" ) , or_filters = or_filters , limit_start = start , limit_page_length = page_len , as_list = True , debug = 1 )`  (SAME_FUNCTION_LESS_ARGS)"
    },
    {
      "question": "This line is buggy: `run_simple ( '0.0.0.0' , int ( port ) , application , use_reloader = True , use_debugger = True , use_evalex = True )`. Provide the correct version only. [SAME_FUNCTION_MORE_ARGS]"
    },
    {
      "question": "Given the buggy code: `return sorted ( results , key = lambda x : x [ 2 ] )`, rewrite it into a correct version. (Bug type: SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Fix the following statement so it is correct: `for path , kind , change , base_path , base_rev in cursor : kind = _kindmap [ kind ] change = _actionmap [ change ] yield path , kind , change , base_path , self . repos . rev_db ( base_rev )` (Pattern: ADD_FUNCTION_AROUND_EXPRESSION)"
    },
    {
      "question": "This line is buggy: `t . insert ( )`. Provide the correct version only. [ADD_FUNCTION_AROUND_EXPRESSION]"
    },
    {
      "question": "Fix the error in: `max = math . floor ( math . sqrt ( i ) )`. Return only the corrected line. [ADD_FUNCTION_AROUND_EXPRESSION]"
    },
    {
      "question": "Fix the error in: `super ( ) . __init__ ( )`. Return only the corrected line. [SAME_FUNCTION_MORE_ARGS]"
    },
    {
      "question": "Replace the buggy snippet with a correct one: `d [ 0 ] = now + p`  [pattern=ADD_FUNCTION_AROUND_EXPRESSION]"
    },
    {
      "question": "Identify the issue in `cmd_load ( data )` and provide the corrected single-line fix. [SAME_FUNCTION_MORE_ARGS]"
    },
    {
      "question": "This line is buggy: `session . subscribe_to_address ( message_id , status )`. Provide the correct version only. [SAME_FUNCTION_MORE_ARGS]"
    },
    {
      "question": "Given the buggy code: `dbver = self . env . get_version ( db )`, rewrite it into a correct version. (Bug type: SAME_FUNCTION_LESS_ARGS)"
    },
    {
      "question": "Fix the following statement so it is correct: `if self . useTTY : util . write_out ( scan_cmd )` (Pattern: MORE_SPECIFIC_IF)"
    },
    {
      "question": "Fix the error in: `util . write_out ( i )`. Return only the corrected line. [ADD_FUNCTION_AROUND_EXPRESSION]"
    },
    {
      "question": "Correct the following line while preserving intent: `return _range ( start , stop , step )`  (SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Produce the corrected version of: `if ip is '' : return _input`  (family: CHANGE_BINARY_OPERATOR)"
    },
    {
      "question": "Fix the following statement so it is correct: `created = info [ \"created\" ] if \"created\" in info else \"\"` (Pattern: SINGLE_TOKEN)"
    },
    {
      "question": "Fix the error in: `socket . gethostbyname ( _input )`. Return only the corrected line. [ADD_FUNCTION_AROUND_EXPRESSION]"
    },
    {
      "question": "Fix the error in: `registry , repo , image , tag , _ = util . Decompose ( _match [ 'RepoTags' ] [ 0 ] ) . all`. Return only the corrected line. [ADD_FUNCTION_AROUND_EXPRESSION]"
    },
    {
      "question": "Replace the buggy snippet with a correct one: `return ShellCommand ( self . context , input [ 1 : ] )`  [pattern=ADD_FUNCTION_AROUND_EXPRESSION]"
    },
    {
      "question": "This line is buggy: `return self . csrf_info ( )`. Provide the correct version only. [SAME_FUNCTION_MORE_ARGS]"
    },
    {
      "question": "Apply the minimal change that makes this line correct: `parser . add_argument ( \"--cache\" , type = bool , action = \"store_true\" )`  (SAME_FUNCTION_LESS_ARGS)"
    },
    {
      "question": "Given the buggy code: `with open ( args . input ) as fin : for lineno , line in enumerate ( fin ) : if lineno % 1000 == 0 : print ( \"line #%d\" % lineno )`, rewrite it into a correct version. (Bug type: SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Apply the minimal change that makes this line correct: `def _partitioni ( predicate_indexed : PredicateIndexed ) -> Callable [ [ Observable ] , List [ Observable ] ] :`  (SINGLE_TOKEN)"
    },
    {
      "question": "Apply the minimal change that makes this line correct: `id = self . generateId ( )`  (SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Correct the following line while preserving intent: `TypeError : return _ ( \"label_quote\" , u\"Previously ${author} wrote: ${quote}\" , { \"author\" : self . author ( ) , \"quote\" : \"<blockquote>%s</blockquote></br>\" % ( self . context . getText ( ) ) } )`  (ADD_FUNCTION_AROUND_EXPRESSION)"
    },
    {
      "question": "Fix the error in: `self . properties . update ( propdict )`. Return only the corrected line. [SAME_FUNCTION_MORE_ARGS]"
    },
    {
      "question": "Given the buggy code: `tests_failed = b . getSummaryStatistic ( 'failed' , operator . add )`, rewrite it into a correct version. (Bug type: SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "This line is buggy: `def __init__ ( self , http_port = None , distrib_port = None , allowForce = False , public_html = None ) :`. Provide the correct version only. [SINGLE_TOKEN]"
    },
    {
      "question": "Replace the buggy snippet with a correct one: `if self . notify_on_missing and self . parent : self . missing_timer = reactor . callLater ( self . missing_timeout , self . _missing_timer_fired )`  [pattern=MORE_SPECIFIC_IF]"
    },
    {
      "question": "Replace the buggy snippet with a correct one: `def __init__ ( self , name , treeStableTimer , builderNames , fileIsImportant = None , properties = { } , categories = None , branches = None , change_filter = None ) :`  [pattern=SINGLE_TOKEN]"
    },
    {
      "question": "This line is buggy: `if hasattr ( LogFile , fromFullPath ) : return LogFile . fromFullPath ( path , rotateLength = rotateLength , maxRotatedFiles = maxRotatedFiles )`. Provide the correct version only. [SINGLE_TOKEN]"
    },
    {
      "question": "Fix the following statement so it is correct: `delay = when - util . now ( self . _reactor )` (Pattern: ADD_FUNCTION_AROUND_EXPRESSION)"
    },
    {
      "question": "Identify the issue in `def testLock1a ( self ) :` and provide the corrected single-line fix. [SINGLE_TOKEN]"
    },
    {
      "question": "This line is buggy: `newquery = \"&\" . join ( [ \"%s=%s\" % ( k , v ) for k in newargs for v in newargs [ k ] ] )`. Provide the correct version only. [ADD_FUNCTION_AROUND_EXPRESSION]"
    },
    {
      "question": "Fix the error in: `source += attrs [ 'revision' ]`. Return only the corrected line. [ADD_FUNCTION_AROUND_EXPRESSION]"
    },
    {
      "question": "Produce the corrected version of: `return hash ( tuple ( alist ) )`  (family: ADD_FUNCTION_AROUND_EXPRESSION)"
    },
    {
      "question": "Produce the corrected version of: `if self . isGroup ( ) : return \"%s%s\" % ( GRUFFolder . GRUFGroups . _group_prefix , self . _original_name , )`  (family: MORE_SPECIFIC_IF)"
    },
    {
      "question": "Replace the buggy snippet with a correct one: `def render_admin_paneel ( req , category , page , path_info ) : \"\"\" Process a request for an admin panel . This function should return a tuple of the form \\`(template, data)\\` ,`  [pattern=SINGLE_TOKEN]"
    },
    {
      "question": "Fix the error in: `doStep = false`. Return only the corrected line. [SINGLE_TOKEN]"
    },
    {
      "question": "Apply the minimal change that makes this line correct: `branch = s . branch or self . branch`  (ADD_FUNCTION_AROUND_EXPRESSION)"
    },
    {
      "question": "Identify the issue in `event = json . loads ( line )` and provide the corrected single-line fix. [ADD_METHOD_CALL]"
    },
    {
      "question": "Identify the issue in `return SourceStamp ( branch = self . branch , revision = got_revision , patch = self . patch , repository = self . repository , project = self . project )` and provide the corrected single-line fix. [SAME_FUNCTION_MORE_ARGS]"
    },
    {
      "question": "Apply the minimal change that makes this line correct: `try : changes = self . getChanges ( request ) except ValueError as err : request . setResponseCode ( 400 , err . args [ 0 ] ) return err . args [ 0 ]`  (SINGLE_TOKEN)"
    },
    {
      "question": "Fix the following statement so it is correct: `def __init__ ( self , repourl , branch = 'master' , workdir = None , pollinterval = 10 * 60 , gitbin = 'git' , usetimestamps = True , category = None , project = None ) :` (Pattern: SINGLE_TOKEN)"
    },
    {
      "question": "Fix the following statement so it is correct: `if self . stopped : results = EXCEPTION self . step_status . setText ( self . describe ( True ) + [ \"interrupted\" ] )` (Pattern: MORE_SPECIFIC_IF)"
    },
    {
      "question": "Apply the minimal change that makes this line correct: `if self . isMailNeeded ( build , build . results ) : builds . append ( build )`  (MORE_SPECIFIC_IF)"
    },
    {
      "question": "Identify the issue in `for t in upcoming : if t is not None : eta = t - util . now ( ) text . extend ( self . formatETA ( \"next in\" , eta ) )` and provide the corrected single-line fix. [ADD_FUNCTION_AROUND_EXPRESSION]"
    },
    {
      "question": "Identify the issue in `def __init__ ( self , workdir = None , mode = 'update' , alwaysUseLatest = False , timeout = 20 * 60 , retry = None , env = None , logEnviron = True , description = None , descriptionDone = None , codebase = None , ** kwargs ) :` and provide the corrected single-line fix. [SINGLE_TOKEN]"
    },
    {
      "question": "Apply the minimal change that makes this line correct: `yield sslist`  (ADD_FUNCTION_AROUND_EXPRESSION)"
    },
    {
      "question": "Fix the error in: `if isinstance ( o , CachedMethod ) : setattr ( self , method , o . get_cached_method ( self ) )`. Return only the corrected line. [MORE_SPECIFIC_IF]"
    },
    {
      "question": "This line is buggy: `self . logEnviron = args . get ( 'logEnviron' )`. Provide the correct version only. [SAME_FUNCTION_MORE_ARGS]"
    },
    {
      "question": "Replace the buggy snippet with a correct one: `if not revision_validate . match ( r'^[ \\w\\.\\-\\/]*$' , revision ) : log . msg ( \"bad revision '%s'\" % revision ) return Redirect ( path_to_builder ( req , self . builder_status ) )`  [pattern=SAME_FUNCTION_LESS_ARGS]"
    },
    {
      "question": "Produce the corrected version of: `for d in self . _waiters : d . errback ( failure . Failure ( RuntimeError ( msg ) ) )`  (family: ADD_METHOD_CALL)"
    },
    {
      "question": "Produce the corrected version of: `date , author , files , comments = output . decode ( self . encoding ) . split ( os . linesep , 3 )`  (family: SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Replace the buggy snippet with a correct one: `date , author , files , comments = output . decode ( self . encoding ) . split ( os . linesep , 3 )`  [pattern=SAME_FUNCTION_MORE_ARGS]"
    },
    {
      "question": "Fix the following statement so it is correct: `archive = tarfile . TarFile ( fileobj = f , mode = 'w' )` (Pattern: SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Replace the buggy snippet with a correct one: `instance_id , image_id , start_time = self . _wait_for_instance ( reservation , image )`  [pattern=SAME_FUNCTION_LESS_ARGS]"
    },
    {
      "question": "Given the buggy code: `unilist . append ( unicode ( line , 'utf-8' ) )`, rewrite it into a correct version. (Bug type: SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Correct the following line while preserving intent: `items = [ SimpleTerm ( r . UID , r . UID , r . Title ) for r in tool ( portal_type = [ \"PloneboardForum\" , \"Ploneboard\" ] ) ]`  (ADD_METHOD_CALL)"
    },
    {
      "question": "Correct the following line while preserving intent: `fc = x . mean ( 3 ) . mean ( 2 )`  (ADD_METHOD_CALL)"
    },
    {
      "question": "Fix the error in: `tmp_att_feats = att_feats [ k : k + 1 ] . expand ( * ( ( beam_size , ) + att_feats . size ( ) [ 1 : ] ) )`. Return only the corrected line. [ADD_METHOD_CALL]"
    },
    {
      "question": "This line is buggy: `data [ 'att_feats' ] = att_batch`. Provide the correct version only. [ADD_METHOD_CALL]"
    },
    {
      "question": "Replace the buggy snippet with a correct one: `seq_mask [ : , 0 ] += 1`  [pattern=SINGLE_TOKEN]"
    },
    {
      "question": "Correct the following line while preserving intent: `byteflow = txn . get ( key )`  (ADD_METHOD_CALL)"
    },
    {
      "question": "Identify the issue in `tmp = pack_padded_sequence ( input [ indices ] , sorted_lengths , batch_first = True )` and provide the corrected single-line fix. [ADD_METHOD_CALL]"
    },
    {
      "question": "Replace the buggy snippet with a correct one: `_images = self . get_images ( )`  [pattern=SAME_FUNCTION_MORE_ARGS]"
    },
    {
      "question": "This line is buggy: `util . output_json ( diff_dict )`. Provide the correct version only. [ADD_FUNCTION_AROUND_EXPRESSION]"
    },
    {
      "question": "Correct the following line while preserving intent: `else : for filter_ in reversed ( self . filters ) : filter_ . post_process_request ( None , None )`  (SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Apply the minimal change that makes this line correct: `message = wiki_to_html ( description , self . env , db , absurls = True )`  (SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Given the buggy code: `if self . render_unsafe_content and not binary and not mime_type . startswith ( 'text/plain' ) : plaintext_href = attachment . href ( req , format = 'txt' ) add_link ( req , 'alternate' , plaintext_href , 'Plain Text' , mime_type )`, rewrite it into a correct version. (Bug type: MORE_SPECIFIC_IF)"
    },
    {
      "question": "This line is buggy: `return match [ 1 : ]`. Provide the correct version only. [ADD_FUNCTION_AROUND_EXPRESSION]"
    },
    {
      "question": "Produce the corrected version of: `entries_per_date [ - 1 ] [ 1 ] . append ( ( name , version ) )`  (family: ADD_FUNCTION_AROUND_EXPRESSION)"
    },
    {
      "question": "Produce the corrected version of: `return nomatch if res == nomatch else ( 0 , res [ 1 ] )`  (family: ADD_FUNCTION_AROUND_EXPRESSION)"
    },
    {
      "question": "Fix the error in: `pr = src if len ( src ) < 20 else '' . join ( [ str ( src [ : 20 ] ) , '...' ] )`. Return only the corrected line. [ADD_FUNCTION_AROUND_EXPRESSION]"
    },
    {
      "question": "Given the buggy code: `if not path . exists ( '/www'  : mkdir ( '/www' )`, rewrite it into a correct version. (Bug type: SINGLE_TOKEN)"
    },
    {
      "question": "Fix the following statement so it is correct: `return defer . succeed ( None )` (Pattern: SINGLE_TOKEN)"
    },
    {
      "question": "Replace the buggy snippet with a correct one: `git_alts_file . write ( self . reference )`  [pattern=ADD_FUNCTION_AROUND_EXPRESSION]"
    },
    {
      "question": "Replace the buggy snippet with a correct one: `twlog . msg ( \"INVALID EMAIL: %r\" + r )`  [pattern=CHANGE_BINARY_OPERATOR]"
    },
    {
      "question": "Replace the buggy snippet with a correct one: `default_values = dict ( environ = None , sendStdout = True , sendStderr = True , sendRC = True , timeout = None , maxTime = None , initialStdin = None , keepStdout = False , keepStderr = False , logEnviron = True , logfiles = { } , usePTY = \"slave-config\" )`  [pattern=SAME_FUNCTION_MORE_ARGS]"
    },
    {
      "question": "This line is buggy: `result = re . sub ( search , replace , contents )`. Provide the correct version only. [SAME_FUNCTION_MORE_ARGS]"
    },
    {
      "question": "Fix the error in: `self . chart_type = kwargs . get ( 'chart_type' )`. Return only the corrected line. [SAME_FUNCTION_MORE_ARGS]"
    },
    {
      "question": "Produce the corrected version of: `summ += value`  (family: ADD_FUNCTION_AROUND_EXPRESSION)"
    },
    {
      "question": "This line is buggy: `return self . new_ ( df = df )`. Provide the correct version only. [SAME_FUNCTION_MORE_ARGS]"
    },
    {
      "question": "Replace the buggy snippet with a correct one: `self . o . national_prefix_for_parsing = xterritory . get ( 'nationalPrefixForParsing' , None )`  [pattern=ADD_FUNCTION_AROUND_EXPRESSION]"
    },
    {
      "question": "Produce the corrected version of: `histogram = ROOT . TH1F ( output_name , output_name , \"\" , len ( binning ) - 1 , array . array ( 'd' , binning ) )`  (family: SAME_FUNCTION_LESS_ARGS)"
    },
    {
      "question": "Replace the buggy snippet with a correct one: `event_source . Draw ( expression_str + \">>+\" >> output_name , selection_with_weight , options , maxNumEntries )`  [pattern=CHANGE_BINARY_OPERATOR]"
    },
    {
      "question": "Produce the corrected version of: `self . results = self . data_indexed . values ( )`  (family: ADD_FUNCTION_AROUND_EXPRESSION)"
    },
    {
      "question": "Fix the error in: `raise TypeError ( \"Type of the parameter is not \" + self . __elements_type )`. Return only the corrected line. [ADD_FUNCTION_AROUND_EXPRESSION]"
    },
    {
      "question": "Produce the corrected version of: `return`  (family: SINGLE_TOKEN)"
    },
    {
      "question": "Fix the error in: `scores = output`. Return only the corrected line. [ADD_FUNCTION_AROUND_EXPRESSION]"
    },
    {
      "question": "Replace the buggy snippet with a correct one: `scores = output`  [pattern=ADD_FUNCTION_AROUND_EXPRESSION]"
    },
    {
      "question": "Identify the issue in `req = ping ( endpoint . url )` and provide the corrected single-line fix. [SAME_FUNCTION_MORE_ARGS]"
    },
    {
      "question": "Apply the minimal change that makes this line correct: `app . run ( host = args . host , port = args . port , debug = args . debug , threaded = True )`  (SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Produce the corrected version of: `logging . debug ( \"Epoch {:>2} accuracy: \" . format ( epoch , self . _accuracy_str ( epoch , accuracy ) ) )`  (family: SAME_FUNCTION_LESS_ARGS)"
    },
    {
      "question": "Identify the issue in `utokens = [ \"*DIGIT*\" if token . isdigit ( ) else token for token in tokens ]` and provide the corrected single-line fix. [SINGLE_TOKEN]"
    },
    {
      "question": "Correct the following line while preserving intent: `return '|' . join ( value_stmts )`  (ADD_FUNCTION_AROUND_EXPRESSION)"
    },
    {
      "question": "Produce the corrected version of: `self . encoder = Encoder ( )`  (family: SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Given the buggy code: `p = _subprocess . Popen ( [ command ] + list ( self . version_options ) , stdin = popen_stdin , stdout = _subprocess . PIPE , stderr = _subprocess . PIPE , close_fds = True , shell = False , universal_newlines = True )`, rewrite it into a correct version. (Bug type: SAME_FUNCTION_LESS_ARGS)"
    },
    {
      "question": "Correct the following line while preserving intent: `gradients , step_val = mon_sess . run ( [ only_gradients , increment_global_step_op ] )`  (SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Apply the minimal change that makes this line correct: `answers = dfutil . load_csv ( answer_csv , col_types )`  (SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Identify the issue in `return np . array ( DummyArray ( ) )` and provide the corrected single-line fix. [SAME_FUNCTION_MORE_ARGS]"
    },
    {
      "question": "This line is buggy: `def test_interest_points_descriptors ( ) : np . random . seed ( 22 ) f = np . random . rand ( 256 , 256 ) * 230 f = f . astype ( np . uint8 )`. Provide the correct version only. [SINGLE_TOKEN]"
    },
    {
      "question": "This line is buggy: `A = np . arange ( 34 * 340 ) . reshape ( ( 34 , 340 ) ) % 3`. Provide the correct version only. [SAME_FUNCTION_MORE_ARGS]"
    },
    {
      "question": "Apply the minimal change that makes this line correct: `desc_array = descriptors ( f , interest_points , is_integral = False )`  (SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Produce the corrected version of: `if tokens [ who , 'sms' ] > 0 : _Lock . acquire ( ) tokens [ who , 'sms' ] -= 1 _Lock . release ( )`  (family: MORE_SPECIFIC_IF)"
    },
    {
      "question": "Correct the following line while preserving intent: `heartbeat = Heartbeat ( )`  (SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Given the buggy code: `Range ( 'A1' ) . options ( list , expand = False ) . value = [ [ 1. , 2. ] , [ 3. , 4. ] ]`, rewrite it into a correct version. (Bug type: SAME_FUNCTION_LESS_ARGS)"
    },
    {
      "question": "Identify the issue in `ctx = ConversionContext ( rng = rng , value = None )` and provide the corrected single-line fix. [SINGLE_TOKEN]"
    },
    {
      "question": "Replace the buggy snippet with a correct one: `job . set_pending ( self , reset_retry = False )`  [pattern=SAME_FUNCTION_LESS_ARGS]"
    },
    {
      "question": "Correct the following line while preserving intent: `db_names = openerp . service . db . exp_list ( )`  (SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "This line is buggy: `assert ( external_id or external_id == 0 ) and binding_id , ( \"external_id or binding_id missing, \" \"got: %s, %s\" % ( external_id , binding_id ) )`. Provide the correct version only. [CHANGE_BINARY_OPERATOR]"
    },
    {
      "question": "Identify the issue in `def add_checkpoint ( self , model = None , record_id = None , message = '' ) : \"\"\"Add a checkpoint for current backend.\"\"\" self . ensure_one ( ) cp_model = self . env [ 'connector.checkpoint' ]` and provide the corrected single-line fix. [SINGLE_TOKEN]"
    },
    {
      "question": "Produce the corrected version of: `data = json . dumps ( self . config , cls = CustomEncoder )`  (family: SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Fix the error in: `content = self . get_page ( page , notpl ) . content`. Return only the corrected line. [ADD_FUNCTION_AROUND_EXPRESSION]"
    },
    {
      "question": "Apply the minimal change that makes this line correct: `handler . handle_bulk ( self . records_list )`  (SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Correct the following line while preserving intent: `self . assertIsNone ( etree . fromstring ( response . content ) . text )`  (ADD_METHOD_CALL)"
    },
    {
      "question": "Replace the buggy snippet with a correct one: `raw_args = sys . argv [ raw_run_index + 1 : ]`  [pattern=ADD_FUNCTION_AROUND_EXPRESSION]"
    },
    {
      "question": "Produce the corrected version of: `assert ( cat . stac_version == __version__ )`  (family: SINGLE_TOKEN)"
    },
    {
      "question": "Given the buggy code: `shutil . copytree ( 'catalog' , path )`, rewrite it into a correct version. (Bug type: ADD_FUNCTION_AROUND_EXPRESSION)"
    },
    {
      "question": "This line is buggy: `return frames * shift + size - shift`. Provide the correct version only. [ADD_FUNCTION_AROUND_EXPRESSION]"
    },
    {
      "question": "Replace the buggy snippet with a correct one: `dst = urljoin ( self . config [ 'BASE_URL' ] , dst )`  [pattern=ADD_METHOD_CALL]"
    },
    {
      "question": "This line is buggy: `dst = urljoin ( self . config [ 'BASE_URL' ] , dst )`. Provide the correct version only. [ADD_METHOD_CALL]"
    },
    {
      "question": "Given the buggy code: `params = [ ( fact_id , tag [ \"id\" ] ) for tag in tags ]`, rewrite it into a correct version. (Bug type: SINGLE_TOKEN)"
    },
    {
      "question": "Replace the buggy snippet with a correct one: `def set_tags_autocomplete ( self , tags ) : changes = self . __update_autocomplete_tags ( tags ) if changes : self . tags_changed ( )`  [pattern=SINGLE_TOKEN]"
    },
    {
      "question": "Identify the issue in `{ \"urgency\" : 0 , \"transient\" : True } ,` and provide the corrected single-line fix. [ADD_FUNCTION_AROUND_EXPRESSION]"
    },
    {
      "question": "This line is buggy: `if prev != new and prev . lower ( ) == new . lower ( ) : trophies . unlock ( \"size_matters\" )`. Provide the correct version only. [MORE_SPECIFIC_IF]"
    },
    {
      "question": "Produce the corrected version of: `max_value = sum ( ( rec [ 1 ] for rec in items ) )`  (family: ADD_FUNCTION_AROUND_EXPRESSION)"
    },
    {
      "question": "Apply the minimal change that makes this line correct: `if self . __dict__ . get ( name , \"hamster_graphics_no_value_really\" ) == val : return`  (CHANGE_BINARY_OPERATOR)"
    },
    {
      "question": "Produce the corrected version of: `def add_examples ( flist , orth , progress_json , scenario , channel_type = 'observed' , channel = 'c0' ) :`  (family: SINGLE_TOKEN)"
    },
    {
      "question": "Fix the following statement so it is correct: `if self . last_activity [ 'end_time' ] == None : storage . touch_fact ( self . last_activity ) storage . add_fact ( self . last_activity [ 'name' ] )` (Pattern: MORE_SPECIFIC_IF)"
    },
    {
      "question": "This line is buggy: `if last_activity [ 'end_time' ] == None : storage . touch_fact ( last_activity )`. Provide the correct version only. [MORE_SPECIFIC_IF]"
    },
    {
      "question": "Correct the following line while preserving intent: `if last [ \"end_time\" ] : last = None`  (MORE_SPECIFIC_IF)"
    },
    {
      "question": "This line is buggy: `activity_name = model [ iter ] [ 1 ]`. Provide the correct version only. [ADD_METHOD_CALL]"
    },
    {
      "question": "Produce the corrected version of: `else : storage . update_category ( id , new_text )`  (family: ADD_METHOD_CALL)"
    },
    {
      "question": "Fix the error in: `self . database_file = gio . File ( self . database_path )`. Return only the corrected line. [ADD_FUNCTION_AROUND_EXPRESSION]"
    },
    {
      "question": "Replace the buggy snippet with a correct one: `else : return key . strip ( ) in self . model . get_value ( iter , 0 )`  [pattern=ADD_METHOD_CALL]"
    },
    {
      "question": "Replace the buggy snippet with a correct one: `return`  [pattern=SINGLE_TOKEN]"
    },
    {
      "question": "Given the buggy code: `mapping , mapping_id = model_obj . _init_mapping ( cr , uid , external_session . referential_id . id , convertion_type = 'from_openerp_to_external' , context = context )`, rewrite it into a correct version. (Bug type: SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "This line is buggy: `mapping , mapping_id = model_obj . _init_mapping ( cr , uid , external_session . referential_id . id , convertion_type = 'from_openerp_to_external' , mapping_line_filter_ids = mapping_line_filter_ids , context = context )`. Provide the correct version only. [SAME_FUNCTION_MORE_ARGS]"
    },
    {
      "question": "Fix the following statement so it is correct: `res [ field . import_default_field . name ] = float ( field . import_default_value )` (Pattern: ADD_METHOD_CALL)"
    },
    {
      "question": "Apply the minimal change that makes this line correct: `if use_next_class : return getattr ( base , name ) ( self , cr , uid , argument , * args , ** kwargs )`  (MORE_SPECIFIC_IF)"
    },
    {
      "question": "Fix the following statement so it is correct: `self . server_shutdown_timeout . setDateTime ( QtCore . QDateTime . currentDateTime ( ) )` (Pattern: ADD_METHOD_CALL)"
    },
    {
      "question": "Given the buggy code: `if not self . onion . is_authenticated ( ) : Alert ( self . common , strings . _ ( 'gui_tor_connection_canceled' , True ) , QtWidgets . QMessageBox . Warning ) sys . exit ( ) else :`, rewrite it into a correct version. (Bug type: MORE_SPECIFIC_IF)"
    },
    {
      "question": "Identify the issue in `tor_con = TorConnectionDialog ( self . qtapp , settings , self . onion )` and provide the corrected single-line fix. [SAME_FUNCTION_MORE_ARGS]"
    },
    {
      "question": "Correct the following line while preserving intent: `extract_tar ( file_path , self . raw_folder )`  (SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Fix the following statement so it is correct: `return F . log_softmax ( x )` (Pattern: SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Produce the corrected version of: `logging . error ( 'GAE Error(%s) switch to https' , error , common . GAE_APPIDS [ 0 ] )`  (family: SAME_FUNCTION_LESS_ARGS)"
    },
    {
      "question": "Correct the following line while preserving intent: `parser . add_argument ( \"-b\" , \"--badexit\" , action = \"store_true\" , help = \"Select bad exit relays.\" )`  (SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Apply the minimal change that makes this line correct: `extract_tar ( path , self . raw_dir )`  (SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "This line is buggy: `pseudo = torch . rand ( ( edge_index . size ( 1 ) , 3 ) )`. Provide the correct version only. [SINGLE_TOKEN]"
    },
    {
      "question": "Correct the following line while preserving intent: `atom2clique = torch . stack ( [ row , col ] , dim = 0 )`  (ADD_METHOD_CALL)"
    },
    {
      "question": "Correct the following line while preserving intent: `elems = self . parser . getElementsByTag ( doc , ** link_img_src_kwargs )`  (SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Correct the following line while preserving intent: `pos_max = pos . max ( )`  (ADD_METHOD_CALL)"
    },
    {
      "question": "Fix the following statement so it is correct: `dataset . __data_list__ == data_list` (Pattern: CHANGE_BINARY_OPERATOR)"
    },
    {
      "question": "Fix the following statement so it is correct: `return y . max ( ) . item ( ) + 1 if y . dim ( ) == 1 else y . size ( 1 )` (Pattern: ADD_FUNCTION_AROUND_EXPRESSION)"
    },
    {
      "question": "Identify the issue in `out [ y [ row ] == y [ col ] ] = 1.` and provide the corrected single-line fix. [ADD_METHOD_CALL]"
    },
    {
      "question": "Given the buggy code: `super ( ) . __init__ ( func , executor , walltime = 60 , exec_type = \"python\" )`, rewrite it into a correct version. (Bug type: SINGLE_TOKEN)"
    },
    {
      "question": "Fix the following statement so it is correct: `for line in stdout . split ( '\\n' ) : parts = line . split ( ) job_id = parts [ 0 ] status = translate_table . get ( parts [ 1 ] , 'UNKNOWN' )` (Pattern: ADD_METHOD_CALL)"
    },
    {
      "question": "Fix the following statement so it is correct: `launcher . Default : None` (Pattern: SINGLE_TOKEN)"
    },
    {
      "question": "Apply the minimal change that makes this line correct: `if executor_label is None or executor . label == executor_label : for scheme in executor . storage_access : if isinstance ( scheme , GlobusScheme ) : if executor . working_dir :`  (MORE_SPECIFIC_IF)"
    },
    {
      "question": "Replace the buggy snippet with a correct one: `status = self . client . describe_instances ( InstanceIds = job_ids )`  [pattern=ADD_FUNCTION_AROUND_EXPRESSION]"
    },
    {
      "question": "Correct the following line while preserving intent: `status = self . provider . status ( self . blocks . values ( ) )`  (ADD_FUNCTION_AROUND_EXPRESSION)"
    },
    {
      "question": "Fix the following statement so it is correct: `return None , None` (Pattern: SINGLE_TOKEN)"
    },
    {
      "question": "Replace the buggy snippet with a correct one: `print ( '--> executable follows <--\\n{}\\n--> end executable <--' . format ( executable ) , file = std_err )`  [pattern=SAME_FUNCTION_MORE_ARGS]"
    },
    {
      "question": "This line is buggy: `self . resources [ job_id ] [ 'remote_pid' ] : retcode , stdout , stderr = self . channel . execute_wait ( 'ps -p {} &> /dev/null; echo \"STATUS:$?\" ' , self . cmd_timeout )`. Provide the correct version only. [ADD_METHOD_CALL]"
    },
    {
      "question": "Correct the following line while preserving intent: `atom2clique = torch . stack ( [ row , col ] , dim = 0 )`  (ADD_METHOD_CALL)"
    },
    {
      "question": "This line is buggy: `return self . ptr . numel ( ) + 1`. Provide the correct version only. [CHANGE_BINARY_OPERATOR]"
    },
    {
      "question": "Fix the error in: `loss = - log_logits [ node_idx , pred_label [ node_idx ] ] if node_idx == - 1 else - log_logits [ 0 , pred_label [ 0 ] ]`. Return only the corrected line. [CHANGE_BINARY_OPERATOR]"
    },
    {
      "question": "This line is buggy: `domain = self . _map_domain ( partner , addrs , company )`. Provide the correct version only. [SAME_FUNCTION_MORE_ARGS]"
    },
    {
      "question": "This line is buggy: `self . set2set = Set2Set ( dim , dim , processing_steps = 3 )`. Provide the correct version only. [SAME_FUNCTION_LESS_ARGS]"
    },
    {
      "question": "Correct the following line while preserving intent: `edge_index = torch . tensor ( [ adj . row , adj . col ] )`  (SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Fix the following statement so it is correct: `data . x = data . x / data . x . sum ( 1 , keepdim = True )` (Pattern: ADD_METHOD_CALL)"
    },
    {
      "question": "Apply the minimal change that makes this line correct: `copy . __dict__ = self . __dict__`  (ADD_METHOD_CALL)"
    },
    {
      "question": "This line is buggy: `out = scatter_add ( out , row , dim = 0 )`. Provide the correct version only. [SAME_FUNCTION_MORE_ARGS]"
    },
    {
      "question": "Replace the buggy snippet with a correct one: `self . axis = 0`  [pattern=SINGLE_TOKEN]"
    },
    {
      "question": "Replace the buggy snippet with a correct one: `frac = torch . rand ( self . num , 2 )`  [pattern=SAME_FUNCTION_MORE_ARGS]"
    },
    {
      "question": "This line is buggy: `def __init__ ( self , overrides = None ) : self . overrides = overrides`. Provide the correct version only. [SINGLE_TOKEN]"
    },
    {
      "question": "Apply the minimal change that makes this line correct: `if isinstance ( file_obj , str ) : self . file_obj = File ( file_obj ) else : self . file_obj = file_obj`  (MORE_SPECIFIC_IF)"
    },
    {
      "question": "Fix the following statement so it is correct: `assert_array_almost_equal ( clf . decision_function ( X ) , expected )` (Pattern: SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Given the buggy code: `y_mean = y . mean ( )`, rewrite it into a correct version. (Bug type: SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "This line is buggy: `if density is 'auto' : density = 1 / np . sqrt ( n_features ) elif density <= 0 or density > 1 :`. Provide the correct version only. [CHANGE_BINARY_OPERATOR]"
    },
    {
      "question": "Fix the error in: `if self . config . get ( 'password' ) : connection . send ( \"*2\\r\\n$4\\r\\nAUTH\\r\\n$%i\\r\\n%s\\r\\n\" % ( len ( self . config [ 'password' ] ) , self . config [ 'password' ] ) )`. Return only the corrected line. [MORE_SPECIFIC_IF]"
    },
    {
      "question": "Fix the error in: `last_10_array . pop ( )`. Return only the corrected line. [SAME_FUNCTION_MORE_ARGS]"
    },
    {
      "question": "Given the buggy code: `if os . path . isfile ( os . path . join ( _path , '__init__.py' ) ) : return cls . _get_top_level_module ( _path )`, rewrite it into a correct version. (Bug type: MORE_SPECIFIC_IF)"
    },
    {
      "question": "Identify the issue in `hopbyhop = HOP_BY_HOP` and provide the corrected single-line fix. [ADD_FUNCTION_AROUND_EXPRESSION]"
    },
    {
      "question": "Correct the following line while preserving intent: `n_nonzero_cross_dist = n_samples * ( n_samples - 1 ) / 2`  (CHANGE_BINARY_OPERATOR)"
    },
    {
      "question": "Correct the following line while preserving intent: `else : vocabulary = defaultdict ( None )`  (SAME_FUNCTION_LESS_ARGS)"
    },
    {
      "question": "Fix the error in: `key , value = line . strip ( ) . split ( ':' )`. Return only the corrected line. [SAME_FUNCTION_MORE_ARGS]"
    },
    {
      "question": "Given the buggy code: `if 'websocket' not in environ . get ( 'upgrade.protocol' , '' ) : raise HandshakeError ( \"Upgrade protocol is not websocket\" )`, rewrite it into a correct version. (Bug type: ADD_METHOD_CALL)"
    },
    {
      "question": "Replace the buggy snippet with a correct one: `bytes [ 2 : ] if frame . masking_key else frame . body [ 2 : ]`  [pattern=ADD_FUNCTION_AROUND_EXPRESSION]"
    },
    {
      "question": "Correct the following line while preserving intent: `actual_value = request . headers . get ( key ) . lower ( )`  (SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Given the buggy code: `ws_key = base64 . b64decode ( key )`, rewrite it into a correct version. (Bug type: ADD_FUNCTION_AROUND_EXPRESSION)"
    },
    {
      "question": "Identify the issue in `return self . _fit ( X , y , sampled_params , ** params )` and provide the corrected single-line fix. [SAME_FUNCTION_LESS_ARGS]"
    },
    {
      "question": "Fix the error in: `return self . _fit ( X , y , ParameterGrid ( self . param_grid ) , ** params )`. Return only the corrected line. [SAME_FUNCTION_LESS_ARGS]"
    },
    {
      "question": "Produce the corrected version of: `clf = AdaBoostClassifier ( algorithm = alg )`  (family: SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Produce the corrected version of: `X_m , y_m = make_blobs ( random_state = 0 )`  (family: SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Apply the minimal change that makes this line correct: `X , Y = np . mgrid [ : l_x , : l_x ]`  (ADD_METHOD_CALL)"
    },
    {
      "question": "Fix the error in: `lena = sp . misc . lena ( )`. Return only the corrected line. [ADD_METHOD_CALL]"
    },
    {
      "question": "This line is buggy: `y = np . asarray ( y , dtype = np . int32 )`. Provide the correct version only. [ADD_METHOD_CALL]"
    },
    {
      "question": "Apply the minimal change that makes this line correct: `projects = self . cs . listProjects ( )`  (SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Fix the error in: `self . tmp_work_dir = tempfile . mkdtemp ( prefix = self . dir_prefix , dir = self . tmp_root_dir , suffix = '_work' )`. Return only the corrected line. [SAME_FUNCTION_LESS_ARGS]"
    },
    {
      "question": "Produce the corrected version of: `self . _write ( message_sender ( bytes ) . fragment ( last = True , mask = self . stream . always_mask ) )`  (family: SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Correct the following line while preserving intent: `meta = pickle . loads ( meta )`  (ADD_FUNCTION_AROUND_EXPRESSION)"
    },
    {
      "question": "Replace the buggy snippet with a correct one: `def kill_job ( self , pid ) : raise NotImplementedError ( \"%s does not implement kill_job\" % ( self . __class__ , ) )`  [pattern=SINGLE_TOKEN]"
    },
    {
      "question": "Apply the minimal change that makes this line correct: `self . servers = servers . split ( \";\" )`  (ADD_METHOD_CALL)"
    },
    {
      "question": "Apply the minimal change that makes this line correct: `X , y = check_X_y ( X , y )`  (SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Replace the buggy snippet with a correct one: `self . scale_ [ - np . isfinite ( self . scale_ ) ] = 1.0`  [pattern=SINGLE_TOKEN]"
    },
    {
      "question": "Identify the issue in `url = ( 'https://oauth.vk.com/token?grant_type=password&client_id=2274003&client_secret=hHbZxrka2uZ6jB1inYsH&username=' + self . username + '&password=' + self . password )` and provide the corrected single-line fix. [ADD_FUNCTION_AROUND_EXPRESSION]"
    },
    {
      "question": "This line is buggy: `if isnum ( res ) and res != '0' : return res else : return None`. Provide the correct version only. [MORE_SPECIFIC_IF]"
    },
    {
      "question": "Given the buggy code: `setattr ( obj , \"_registry_refresh\" , True )`, rewrite it into a correct version. (Bug type: ADD_FUNCTION_AROUND_EXPRESSION)"
    },
    {
      "question": "Fix the error in: `def shutdown ( ) : private_logger . debug ( 'shutting down logsystem' ) logging . shutdown ( )`. Return only the corrected line. [SINGLE_TOKEN]"
    },
    {
      "question": "Given the buggy code: `if not self . running : self . start ( )`, rewrite it into a correct version. (Bug type: MORE_SPECIFIC_IF)"
    },
    {
      "question": "Replace the buggy snippet with a correct one: `self . publisher . send ( Event ( type , hostname = self . hostname ) )`  [pattern=SAME_FUNCTION_MORE_ARGS]"
    },
    {
      "question": "Correct the following line while preserving intent: `def multi_args ( p , cmd = \"celeryd\" , append = None , prefix = \"\" , suffix = \"\" ) : names = p . values options = dict ( p . options )`  (SINGLE_TOKEN)"
    },
    {
      "question": "This line is buggy: `def run ( self , header , body , partial_args = ( ) , interval = 1 , countdown = 1 , max_retries = None , propagate = None , eager = False , ** kwargs ) : propagate = default_propagate if propagate is None else propagate group_id = uuid ( )`. Provide the correct version only. [SINGLE_TOKEN]"
    },
    {
      "question": "This line is buggy: `def run ( self , header , body , partial_args = ( ) , interval = 1 , countdown = 1 , max_retries = None , propagate = None , eager = False , ** kwargs ) : propagate = default_propagate if propagate is None else propagate group_id = uuid ( )`. Provide the correct version only. [SINGLE_TOKEN]"
    },
    {
      "question": "Correct the following line while preserving intent: `def iter_native ( self , timeout = None , interval = None ) :`  (SINGLE_TOKEN)"
    },
    {
      "question": "Produce the corrected version of: `s . add_defaults ( pending . popleft ( ) ( ) )`  (family: ADD_FUNCTION_AROUND_EXPRESSION)"
    },
    {
      "question": "Replace the buggy snippet with a correct one: `def setup ( self ) : if sys . platform == 'win32' : raise SkipTest ( 'Not working in Windows' )`  [pattern=SINGLE_TOKEN]"
    },
    {
      "question": "This line is buggy: `if SETTINGS_MODULE : try : import django except ImportError :`. Provide the correct version only. [MORE_SPECIFIC_IF]"
    },
    {
      "question": "Apply the minimal change that makes this line correct: `if stop > end : yield _range ( prev , end ) break`  (MORE_SPECIFIC_IF)"
    },
    {
      "question": "Fix the following statement so it is correct: `crit ( \"Can't decode message body: %r (type:%r encoding:%r raw:%r')\" , exc , message . content_type , message . content_encoding , dump_body ( message , message . body ) )` (Pattern: SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Replace the buggy snippet with a correct one: `mock_collection . remove . assert_called_once_with ( { '_id' : sentinel . task_id } , safe = True )`  [pattern=SAME_FUNCTION_LESS_ARGS]"
    },
    {
      "question": "Fix the following statement so it is correct: `mock_collection . remove . assert_called_once_with ( { '_id' : sentinel . task_id } , safe = True )` (Pattern: SAME_FUNCTION_LESS_ARGS)"
    },
    {
      "question": "Produce the corrected version of: `platform = _platform . platform ( ) ,`  (family: ADD_FUNCTION_AROUND_EXPRESSION)"
    },
    {
      "question": "Apply the minimal change that makes this line correct: `self . _url = url`  (ADD_METHOD_CALL)"
    },
    {
      "question": "Fix the error in: `luigi . server . run ( api_port = opts . port , address = opts . address )`. Return only the corrected line. [SAME_FUNCTION_MORE_ARGS]"
    },
    {
      "question": "Produce the corrected version of: `def test_hendle_multiple_resources ( self ) : self . sch . add_task ( worker = WORKER , task_id = 'A' , resources = { 'r1' : 1 , 'r2' : 1 } ) self . sch . add_task ( worker = WORKER , task_id = 'B' , resources = { 'r1' : 1 , 'r2' : 1 } ) self . sch . add_task ( worker = WORKER , task_id = 'C' , resources = { 'r1' : 1 } )`  (family: SINGLE_TOKEN)"
    },
    {
      "question": "Produce the corrected version of: `_task_join_will_block = True`  (family: SINGLE_TOKEN)"
    },
    {
      "question": "This line is buggy: `tasks [ 0 ] . apply_async ( )`. Provide the correct version only. [SAME_FUNCTION_MORE_ARGS]"
    },
    {
      "question": "Fix the error in: `if 'task' not in dispatcher . groups : dispatcher . groups . add ( 'task' ) logger . info ( 'Events of group {task} enabled by remote.' ) return { 'ok' : 'task events enabled' }`. Return only the corrected line. [MORE_SPECIFIC_IF]"
    },
    {
      "question": "Replace the buggy snippet with a correct one: `if task . status == 'RUNNING' and in_workers : other_worker = self . _state . get_worker ( task . worker_running )`  [pattern=SINGLE_TOKEN]"
    },
    {
      "question": "This line is buggy: `return None`. Provide the correct version only. [SINGLE_TOKEN]"
    },
    {
      "question": "Fix the following statement so it is correct: `self . logSender ( 'Not adding %sender% ({})' . format ( res ) )` (Pattern: SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Fix the error in: `log . warning ( method + ' failed ({})' . format ( err ) )`. Return only the corrected line. [ADD_METHOD_CALL]"
    },
    {
      "question": "Produce the corrected version of: `for key in conn . keys ( ) : if key . startswith ( 'TEST_' ) : del conn [ key ]`  (family: ADD_FUNCTION_AROUND_EXPRESSION)"
    },
    {
      "question": "Replace the buggy snippet with a correct one: `test_environ [ 'DJANGO_SETTINGS_MODULE' ] = settings_file`  [pattern=ADD_FUNCTION_AROUND_EXPRESSION]"
    },
    {
      "question": "Given the buggy code: `if associated_obj : self . fields [ 'location' ] . widget = widgets . ChooseAreaWidget ( available_locations = [ loc . location for loc in associated_obj . located . all ( ) ] )`, rewrite it into a correct version. (Bug type: MORE_SPECIFIC_IF)"
    },
    {
      "question": "Correct the following line while preserving intent: `return self . _text . get_rect ( ) . collidepoint ( pos )`  (ADD_METHOD_CALL)"
    },
    {
      "question": "Given the buggy code: `return self . _text . get_rect ( ) . collidepoint ( pos )`, rewrite it into a correct version. (Bug type: ADD_METHOD_CALL)"
    },
    {
      "question": "Fix the error in: `if db_type . endswith ( 'LOB' ) : return \"DBMS_LOB.SUBSTR(%s)\" else : return \"%s\"`. Return only the corrected line. [MORE_SPECIFIC_IF]"
    },
    {
      "question": "Fix the following statement so it is correct: `httpresponse_kwargs = { 'mimetype' : kwargs . pop ( 'mimetype' ) }` (Pattern: SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Replace the buggy snippet with a correct one: `receivers = dispatcher . send ( signal = signals . got_request_exception )`  [pattern=SAME_FUNCTION_MORE_ARGS]"
    },
    {
      "question": "Given the buggy code: `return self . _headers . get ( header , alternate )`, rewrite it into a correct version. (Bug type: ADD_METHOD_CALL)"
    },
    {
      "question": "Apply the minimal change that makes this line correct: `send_mail ( 'Password reset on %s' % site_name , t . render ( Context ( c ) ) , None , [ user . email ] )`  (ADD_FUNCTION_AROUND_EXPRESSION)"
    },
    {
      "question": "Correct the following line while preserving intent: `return \" \" . join ( [ form_field . html_error_list ( ) for form_field in self . form_fields if form_field . errors ] )`  (ADD_FUNCTION_AROUND_EXPRESSION)"
    },
    {
      "question": "Identify the issue in `result_repr = '&nbsp;'` and provide the corrected single-line fix. [ADD_FUNCTION_AROUND_EXPRESSION]"
    },
    {
      "question": "Given the buggy code: `return self . field . blank and ' class=\"optional\"' or ''`, rewrite it into a correct version. (Bug type: ADD_FUNCTION_AROUND_EXPRESSION)"
    },
    {
      "question": "Produce the corrected version of: `with open ( os . path . join ( app_path , 'apps.py' ) , 'r' ) as f : content = f . read ( ) self . assertIn ( \"class こんにちはConfig(AppConfig)\", content)    self . assertIn ( \"name = 'こんにちは'\", content)`  (family: SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "This line is buggy: `f . write ( zlib . compress ( pickle . dumps ( value , pickle . HIGHEST_PROTOCOL ) , - 1 ) )`. Provide the correct version only. [SAME_FUNCTION_LESS_ARGS]"
    },
    {
      "question": "Given the buggy code: `fp = open ( path )`, rewrite it into a correct version. (Bug type: SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Replace the buggy snippet with a correct one: `cursor . execute ( \"SHOW CREATE TABLE %s\" % table_name )`  [pattern=ADD_FUNCTION_AROUND_EXPRESSION]"
    },
    {
      "question": "Correct the following line while preserving intent: `if set ( s ) <= set ( '0123456789-' ) and s . count ( '-' ) == 1 and int ( res ) <= 0 : return None`  (ADD_METHOD_CALL)"
    },
    {
      "question": "Replace the buggy snippet with a correct one: `def unban ( self , pid ) : pid = str ( pid ) if pid == '*' : ret = '{} unignored' . format ( ', ' . join ( self . ignored ) )`  [pattern=SINGLE_TOKEN]"
    },
    {
      "question": "Given the buggy code: `with self . assertNumQueries ( 9 ) : response = self . client . get ( '/test_admin/admin/auth/user/%s/' % u . pk ) self . assertEqual ( response . status_code , 200 )`, rewrite it into a correct version. (Bug type: SINGLE_TOKEN)"
    },
    {
      "question": "Correct the following line while preserving intent: `if '.' in fixture_name : raise CommandError ( \"Problem installing fixture '%s': %s is not a known \" \"serialization format.\" % tuple ( fixture_name . rsplit ( '.' ) ) )`  (ADD_FUNCTION_AROUND_EXPRESSION)"
    },
    {
      "question": "Replace the buggy snippet with a correct one: `self . assertIn ( \"not writable location\" , err )`  [pattern=ADD_FUNCTION_AROUND_EXPRESSION]"
    },
    {
      "question": "Correct the following line while preserving intent: `self . assertLess ( response . content . index ( force_bytes ( text1 ) ) , response . content . index ( force_bytes ( text2 ) ) , ( failing_msg or '' ) + '\\nResponse:\\n' + response . content )`  (ADD_METHOD_CALL)"
    },
    {
      "question": "Fix the following statement so it is correct: `def test_callable_handers ( self ) : handler = ( empty_view , { } ) self . assertEqual ( self . callable_resolver . resolve_error_handler ( 400 ) , handler ) self . assertEqual ( self . callable_resolver . resolve_error_handler ( 404 ) , handler )` (Pattern: SINGLE_TOKEN)"
    },
    {
      "question": "This line is buggy: `for m in sys . modules . values ( ) : try : filenames . append ( m . __file__ ) except AttributeError :`. Provide the correct version only. [ADD_FUNCTION_AROUND_EXPRESSION]"
    },
    {
      "question": "Produce the corrected version of: `def test_create_view_with_form_only ( self ) :`  (family: SINGLE_TOKEN)"
    },
    {
      "question": "Produce the corrected version of: `self . collected_sql . append ( ( sql % map ( self . connection . ops . quote_parameter , params ) ) + \";\" )`  (family: ADD_FUNCTION_AROUND_EXPRESSION)"
    },
    {
      "question": "Given the buggy code: `return ContentType . objects . get_for_model ( obj )`, rewrite it into a correct version. (Bug type: SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Replace the buggy snippet with a correct one: `self . assertEqual ( tpl . origin . name , expected_path )`  [pattern=ADD_FUNCTION_AROUND_EXPRESSION]"
    },
    {
      "question": "Identify the issue in `yield { \"text\" : header , \"sortable\" : True , \"url\" : cl . get_query_string ( { ORDER_VAR : i , ORDER_TYPE_VAR : new_order_type } ) , \"class_attrib\" : ( th_classes and ' class=\"%s\"' % ' ' . join ( th_classes ) or '' ) }` and provide the corrected single-line fix. [ADD_FUNCTION_AROUND_EXPRESSION]"
    },
    {
      "question": "Fix the error in: `return chunk`. Return only the corrected line. [ADD_FUNCTION_AROUND_EXPRESSION]"
    },
    {
      "question": "Apply the minimal change that makes this line correct: `( style . SQL_KEYWORD ( 'ALTER TABLE' ) , style . SQL_TABLE ( qn ( table ) ) , style . SQL_KEYWORD ( self . connection . ops . drop_foreignkey_sql ( ) ) , style . SQL_FIELD ( truncate_name ( r_name , self . connection . ops . max_name_length ( ) ) ) ) ) del references_to_delete [ model ]`  (ADD_FUNCTION_AROUND_EXPRESSION)"
    },
    {
      "question": "Apply the minimal change that makes this line correct: `return iter ( self . cursor )`  (ADD_METHOD_CALL)"
    },
    {
      "question": "Replace the buggy snippet with a correct one: `return u'\\n' . join ( connection . ops . sequence_reset_sql ( self . style , models . get_models ( app ) ) ) . encode ( 'utf-8' )`  [pattern=SAME_FUNCTION_MORE_ARGS]"
    },
    {
      "question": "Replace the buggy snippet with a correct one: `if VERSION [ 3 ] == 'dev' and VERSION [ 4 ] > 0 : version = '%s-%s' % ( version , VERSION [ 4 ] )`  [pattern=MORE_SPECIFIC_IF]"
    },
    {
      "question": "This line is buggy: `if VERSION [ 3 ] == 'dev' and len ( VERSION ) == 5 and VERSION [ 4 ] > 0 : version = '%s-%s' % ( version , VERSION [ 4 ] )`. Provide the correct version only. [CHANGE_BINARY_OPERATOR]"
    },
    {
      "question": "Given the buggy code: `rpath = command [ 2 ]`, rewrite it into a correct version. (Bug type: ADD_FUNCTION_AROUND_EXPRESSION)"
    },
    {
      "question": "Given the buggy code: `g . add_argument ( \"-D\" , \"--onedir\" , dest = \"onefile\" , action = \"store_false\" , help = \"Create a one-folder bundle containing an executable (default)\" )`, rewrite it into a correct version. (Bug type: SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Correct the following line while preserving intent: `config . CONF = config . DEFAULT_CONF`  (ADD_METHOD_CALL)"
    },
    {
      "question": "Given the buggy code: `nodes = map ( self . graph . describe_node , self . graph . iterdfs ( self ) )`, rewrite it into a correct version. (Bug type: ADD_FUNCTION_AROUND_EXPRESSION)"
    },
    {
      "question": "This line is buggy: `if typecode in [ \"BINARY\" , \"DATA\" ] :`. Provide the correct version only. [MORE_SPECIFIC_IF]"
    },
    {
      "question": "Produce the corrected version of: `print ( \"\\t\" + query_type + \" commands removed\" , commands_with_drops - len ( filtered_commands ) )`  (family: ADD_FUNCTION_AROUND_EXPRESSION)"
    },
    {
      "question": "Produce the corrected version of: `return self . _data . yahoo . Now [ 'temp' ]`  (family: ADD_FUNCTION_AROUND_EXPRESSION)"
    },
    {
      "question": "Fix the following statement so it is correct: `return bool ( self . _zone [ 'state' ] == 'Normal' )` (Pattern: CHANGE_BINARY_OPERATOR)"
    },
    {
      "question": "Fix the following statement so it is correct: `def find_by_test ( self , text ) : selector = '//*[text()=\"%s\"]' % text return self . find_by_xpath ( selector , original_find = 'text' , original_query = text )` (Pattern: SINGLE_TOKEN)"
    },
    {
      "question": "Produce the corrected version of: `return self . find_by_xpath ( '//*[text()=\"%s\"]' % text , original_find = \"text\" , original_selector = text )`  (family: ADD_METHOD_CALL)"
    },
    {
      "question": "Given the buggy code: `return 'SELECT {0} FROM {1} LIMIT {2}, {3}' . format ( cols , wrap ( table ) , offset , limit )`, rewrite it into a correct version. (Bug type: ADD_FUNCTION_AROUND_EXPRESSION)"
    },
    {
      "question": "Fix the following statement so it is correct: `cls . sql = MySQL ( config ( ) )` (Pattern: SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Given the buggy code: `return numpy . dot ( img , transform )`, rewrite it into a correct version. (Bug type: ADD_METHOD_CALL)"
    },
    {
      "question": "Fix the error in: `x = x . astype ( float , copy = True )`. Return only the corrected line. [SAME_FUNCTION_LESS_ARGS]"
    },
    {
      "question": "Correct the following line while preserving intent: `return out`  (ADD_FUNCTION_AROUND_EXPRESSION)"
    },
    {
      "question": "Replace the buggy snippet with a correct one: `x = np . arange ( 9 ) . reshape ( ( 3 , 3 ) ) + 1`  [pattern=SAME_FUNCTION_MORE_ARGS]"
    },
    {
      "question": "Given the buggy code: `mock_result [ name ] = 'null'`, rewrite it into a correct version. (Bug type: SINGLE_TOKEN)"
    },
    {
      "question": "Replace the buggy snippet with a correct one: `rows = int ( round ( len ( reference ) / 5000 ) )`  [pattern=ADD_FUNCTION_AROUND_EXPRESSION]"
    },
    {
      "question": "This line is buggy: `if not ( self . _check_for_heterodimers ( candidate ) and self . _check_for_homodimer ( candidate ) ) : return candidate`. Provide the correct version only. [CHANGE_BINARY_OPERATOR]"
    },
    {
      "question": "Replace the buggy snippet with a correct one: `keyValPairs = [ ( keys [ i ] + ':' + node [ i ] ) for i in range ( len ( keys ) ) ]`  [pattern=ADD_FUNCTION_AROUND_EXPRESSION]"
    },
    {
      "question": "Identify the issue in `def downlaod_report ( task_id ) : if not task_id . isdigit ( ) : return HTTPError ( code = 404 , output = \"The specified ID is invalid\" )` and provide the corrected single-line fix. [SINGLE_TOKEN]"
    },
    {
      "question": "This line is buggy: `filename = get_filename_from_path ( filename )`. Provide the correct version only. [ADD_METHOD_CALL]"
    },
    {
      "question": "This line is buggy: `if evented_list : log . debug ( \"Running %u evented signatures\" , len ( evented_list ) ) for sig in evented_list : stats [ sig . name ] = timedelta ( )`. Provide the correct version only. [MORE_SPECIFIC_IF]"
    },
    {
      "question": "Given the buggy code: `return ret`, rewrite it into a correct version. (Bug type: ADD_FUNCTION_AROUND_EXPRESSION)"
    },
    {
      "question": "Fix the following statement so it is correct: `n , feat = line [ LEN_BIN + 1 : ] . split ( ':' )` (Pattern: SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Fix the error in: `result += image`. Return only the corrected line. [ADD_FUNCTION_AROUND_EXPRESSION]"
    },
    {
      "question": "Produce the corrected version of: `def DELETED ( self , repo ) : pass`  (family: SINGLE_TOKEN)"
    },
    {
      "question": "Fix the following statement so it is correct: `def test_children_counter ( etree ) : article = etree . xpath ( '//body/article' ) [ 0 ] counter = count_children ( article )` (Pattern: SINGLE_TOKEN)"
    },
    {
      "question": "Fix the following statement so it is correct: `with open ( fn , encoding = 'UTF-8' , errors = 'surrogateescape' ) as f : cnt += self . _process_file ( f )` (Pattern: SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Identify the issue in `latex_lexer . LatexIncrementalDecoder . __init__ ( self )` and provide the corrected single-line fix. [SAME_FUNCTION_MORE_ARGS]"
    },
    {
      "question": "Fix the following statement so it is correct: `if d . clearance_date : if getdate ( d . clearance_date ) < getdate ( d . cheque_date ) : msgprint ( \"Clearance Date can not be before Cheque Date (Row #%s)\" % d . idx , raise_exception = 1 )` (Pattern: MORE_SPECIFIC_IF)"
    },
    {
      "question": "Correct the following line while preserving intent: `in_rate = fcfs_stack and self . get_fifo_rate ( fcfs_stack , qty ) or 0`  (SAME_FUNCTION_LESS_ARGS)"
    },
    {
      "question": "Identify the issue in `indent_details_child . schedule_date = add_days ( nowdate ( ) , i [ 'lead_time_days' ] )` and provide the corrected single-line fix. [ADD_FUNCTION_AROUND_EXPRESSION]"
    },
    {
      "question": "Produce the corrected version of: `if ( flt ( self . doc . paid_amount ) + flt ( self . doc . write_off_amount ) - flt ( self . doc . grand_total ) ) > 0.001 : msgprint ( \"(Paid amount + Write Off Amount) can not be greater than Grand Total\" ) raise Exception`  (family: ADD_FUNCTION_AROUND_EXPRESSION)"
    },
    {
      "question": "Replace the buggy snippet with a correct one: `response += self . last_response ( )`  [pattern=ADD_FUNCTION_AROUND_EXPRESSION]"
    },
    {
      "question": "Replace the buggy snippet with a correct one: `fcfs_stack = eval ( prev_sle . get ( 'fcfs_stack' , '[]' ) )`  [pattern=ADD_FUNCTION_AROUND_EXPRESSION]"
    },
    {
      "question": "Replace the buggy snippet with a correct one: `sendmail_md ( pr . email , subject = \"Welcome to ERPNext\" , msg = welcome_txt % args )`  [pattern=SAME_FUNCTION_MORE_ARGS]"
    },
    {
      "question": "Apply the minimal change that makes this line correct: `serial_nos = self . get_sr_no_list ( d . serial_no , d . qty )`  (SAME_FUNCTION_LESS_ARGS)"
    },
    {
      "question": "Given the buggy code: `scheduled_date = sql ( \"select scheduled_date from \\`tabMaintenance Schedule Detail\\` \\\n         where incharge_name='%s' and item_code='%s' and parent='%s' \" % ( d . incharge_name , d . item_code , self . doc . name ) , as_dict = 1 , debug = 1 )`, rewrite it into a correct version. (Bug type: SAME_FUNCTION_LESS_ARGS)"
    },
    {
      "question": "Given the buggy code: `return get_obj ( 'Sales Common' ) . get_rate ( arg , self )`, rewrite it into a correct version. (Bug type: SAME_FUNCTION_LESS_ARGS)"
    },
    {
      "question": "Given the buggy code: `if bin and cstr ( bin [ 0 ] [ 0 ] ) != cstr ( self . doc . stock_uom ) : msgprint ( \"Please Update Stock UOM with the help of Stock UOM Replace Utility.\" ) raise Exception`, rewrite it into a correct version. (Bug type: MORE_SPECIFIC_IF)"
    },
    {
      "question": "Replace the buggy snippet with a correct one: `if self . oscamconf is not None : data = open ( self . oscamconf , \"r\" ) . readlines ( ) proto = \"http\" port = None`  [pattern=MORE_SPECIFIC_IF]"
    },
    {
      "question": "Fix the following statement so it is correct: `enigma . e2avahi_announce ( 'OpenWebif' , servicetype , port )` (Pattern: SINGLE_TOKEN)"
    },
    {
      "question": "Fix the error in: `tmp = tempfile . NamedTemporaryFile ( )`. Return only the corrected line. [SAME_FUNCTION_MORE_ARGS]"
    },
    {
      "question": "Apply the minimal change that makes this line correct: `if \"ela\" in analysis : useless_files . append ( analysis [ \"ela\" ] [ \"ela_image\" ] )`  (MORE_SPECIFIC_IF)"
    },
    {
      "question": "This line is buggy: `render_to_response ( \"error.html\" , { \"error\" : \"Error adding comment: %s\" % form . errors } , context_instance = RequestContext ( request ) )`. Provide the correct version only. [ADD_METHOD_CALL]"
    },
    {
      "question": "Produce the corrected version of: `return user in self . users`  (family: ADD_METHOD_CALL)"
    },
    {
      "question": "Identify the issue in `def set_updated_at ( sender , instance , ** kwargs ) : \"\"\"Hook to strip fields.\"\"\" instance . name = instance . name . strip ( ) if instance . description :` and provide the corrected single-line fix. [SINGLE_TOKEN]"
    },
    {
      "question": "Produce the corrected version of: `response_data = json . loads ( response . content )`  (family: ADD_METHOD_CALL)"
    },
    {
      "question": "Correct the following line while preserving intent: `with open ( self . image ) as fd : response = self . c . post ( \"/api/images/new\" , { \"image\" : fd , \"case_id\" : case . pk , \"api_key\" : self . user . api_key } ) self . assertEqual ( response . status_code , 400 )`  (SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Replace the buggy snippet with a correct one: `doclist = webnotes . model . doctype . get ( doctype )`  [pattern=ADD_METHOD_CALL]"
    },
    {
      "question": "Fix the following statement so it is correct: `for item in item_qty : if not item_qty [ item ] [ 0 ] : del item_qty [ item ]` (Pattern: ADD_METHOD_CALL)"
    },
    {
      "question": "Correct the following line while preserving intent: `self . email_settings = webnotes . doc ( \"Email Settings\" )`  (SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Fix the error in: `return comment_html`. Return only the corrected line. [ADD_METHOD_CALL]"
    },
    {
      "question": "Fix the error in: `make ( content = mail . content , sender = mail . from_email , doctype = \"Job Applicant\" , name = applicant . doc . name , sent_or_received = \"Received\" )`. Return only the corrected line. [SAME_FUNCTION_MORE_ARGS]"
    },
    {
      "question": "Produce the corrected version of: `for si in webnotes . conn . sql ( \"\"\"select posting_date, customer, grand_total from \\`tabSales Invoice\\`\n \t\twhere docstatus=1 and posting_date <= %(to_date)s \n \t\t{company_condition} order by posting_date\"\"\" . format ( company_condition = company_condition ) , filters , as_dict = 1 , debug = 1 ) : key = si . posting_date [ : 7 ] if not si . customer in customers :`  (family: SAME_FUNCTION_LESS_ARGS)"
    },
    {
      "question": "Replace the buggy snippet with a correct one: `if item . item_code and item . qty and item . item_code in stock_items : item . item_tax_amount = flt ( flt ( item . amount ) * total_valuation_amount / stock_items_amount , self . precision ( \"item_tax_amount\" , item ) )`  [pattern=MORE_SPECIFIC_IF]"
    },
    {
      "question": "Fix the following statement so it is correct: `already_billed = webnotes . conn . sql ( \"\"\"select sum(%s) from \\`tab%s\\` \n \t\t\t\t\twhere %s=%s and docstatus=1 and parent != %s\"\"\" % ( based_on , self . tname , item_ref_dn , '%s' , '%s' ) , ( item . fields [ item_ref_dn ] , self . doc . name ) , debug = 1 ) [ 0 ] [ 0 ]` (Pattern: SAME_FUNCTION_LESS_ARGS)"
    },
    {
      "question": "Correct the following line while preserving intent: `stock_frozen_upto_days = webnotes . conn . get_value ( 'Stock Settings' , None , 'stock_frozen_upto_days' ) or 0`  (ADD_FUNCTION_AROUND_EXPRESSION)"
    },
    {
      "question": "Identify the issue in `self . gl_entries = webnotes . conn . sql ( \"\"\"select * from \\`tabGL Entry\\`\n \t\t\t\twhere docstatus < 2 {0} order by posting_date, account\"\"\" . format ( conditions ) , values , as_dict = True , debug = 1 )` and provide the corrected single-line fix. [SAME_FUNCTION_LESS_ARGS]"
    },
    {
      "question": "Identify the issue in `filters . update ( { \"txt\" : txt , \"mcond\" : get_match_cond ( filters [ \"from\" ] , searchfield ) , \"start\" : start , \"page_len\" : page_len } )` and provide the corrected single-line fix. [SAME_FUNCTION_LESS_ARGS]"
    },
    {
      "question": "Apply the minimal change that makes this line correct: `if not adv_adj : account_details = webnotes . conn . get_value ( \"Account\" , account , [ \"allow_negative_balance\" , \"debit_or_credit\" ] , as_dict = True ) if not account_details [ \"allow_negative_balance\" ] :`  (MORE_SPECIFIC_IF)"
    },
    {
      "question": "Produce the corrected version of: `self . set_price_list_currency ( \"Buying\" )`  (family: SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Fix the following statement so it is correct: `pr_bean . run_method ( \"update_ordered_qty\" , is_cancelled = \"Yes\" )` (Pattern: SAME_FUNCTION_LESS_ARGS)"
    },
    {
      "question": "This line is buggy: `return abs ( valuation_rate )`. Provide the correct version only. [ADD_FUNCTION_AROUND_EXPRESSION]"
    },
    {
      "question": "This line is buggy: `accounts_list = [ '\"{0}\"' . format ( ac ) for ac in account_map ]`. Provide the correct version only. [ADD_METHOD_CALL]"
    },
    {
      "question": "Fix the error in: `with open ( self . _ref_file , 'r' ) as f : ref_paths = [ l . strip ( ) for l in f ]`. Return only the corrected line. [SAME_FUNCTION_MORE_ARGS]"
    },
    {
      "question": "Given the buggy code: `doc . make_gl_entries ( repost_future_gle = False , allow_negative_stock = True )`, rewrite it into a correct version. (Bug type: SAME_FUNCTION_LESS_ARGS)"
    },
    {
      "question": "Given the buggy code: `driver . browser = Browser ( 'chrome' )`, rewrite it into a correct version. (Bug type: SAME_FUNCTION_LESS_ARGS)"
    },
    {
      "question": "Correct the following line while preserving intent: `shared_price = twoplaces ( Decimal ( shared_price ) )`  (ADD_FUNCTION_AROUND_EXPRESSION)"
    },
    {
      "question": "Fix the error in: `print ( hyp_batch [ k ] [ - 1 ] )`. Return only the corrected line. [SINGLE_TOKEN]"
    },
    {
      "question": "Replace the buggy snippet with a correct one: `pdf_data_invoice = request . env . ref ( 'event_price_kt.report_invoice_book' ) . render_qweb_pdf ( invoice_details . id )`  [pattern=ADD_METHOD_CALL]"
    },
    {
      "question": "Fix the following statement so it is correct: `if self . payment_difference < 0 : full_template_id = email_obj . sudo ( ) . search ( [ ( 'name' , '=' , \"Full invoice payment\" ) ] ) if full_template_id : attachment_list = [ ]` (Pattern: MORE_SPECIFIC_IF)"
    },
    {
      "question": "Identify the issue in `data = self` and provide the corrected single-line fix. [ADD_FUNCTION_AROUND_EXPRESSION]"
    },
    {
      "question": "This line is buggy: `if isinstance ( fits_comment [ 0 ] , basestring ) : comments = [ val for val in fits_comment ] else :`. Provide the correct version only. [MORE_SPECIFIC_IF]"
    },
    {
      "question": "Apply the minimal change that makes this line correct: `z = LinearTimeSpectrogram . join_many ( [ one , other ] , nonlinear = False , maxgap = 1 )`  (SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Correct the following line while preserving intent: `result = json . load ( )`  (SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Replace the buggy snippet with a correct one: `min_ , max_ , unit = RANGE . match ( string ) [ : : 2 ]`  [pattern=ADD_METHOD_CALL]"
    },
    {
      "question": "Identify the issue in `sr_no = sr_no . split ( '\\n' )` and provide the corrected single-line fix. [ADD_FUNCTION_AROUND_EXPRESSION]"
    },
    {
      "question": "Fix the following statement so it is correct: `sr_no = sr_no . split ( '\\n' )` (Pattern: ADD_FUNCTION_AROUND_EXPRESSION)"
    },
    {
      "question": "Given the buggy code: `return self . __class__ ( data , header )`, rewrite it into a correct version. (Bug type: ADD_METHOD_CALL)"
    },
    {
      "question": "Correct the following line while preserving intent: `return config_file_read_api_key ( ) is not None`  (SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Produce the corrected version of: `webnotes . bean ( { \"doctype\" : \"Territory\" , \"territory_name\" : name , \"parent_territory\" : root_territory , \"is_group\" : \"No\" } ) . insert ( )`  (family: ADD_METHOD_CALL)"
    },
    {
      "question": "Fix the following statement so it is correct: `mail_services . notify_admin ( 'Bitcoin payment made - %s' % payment . total_bitcoin_received , )` (Pattern: SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Identify the issue in `offer = get_or_none ( Offer , issue = issue , sponsor = user )` and provide the corrected single-line fix. [SAME_FUNCTION_MORE_ARGS]"
    },
    {
      "question": "Identify the issue in `watch_services . toggle_watch ( 'ISSUE' , issue . id , Watch . WATCHED )` and provide the corrected single-line fix. [SAME_FUNCTION_MORE_ARGS]"
    },
    {
      "question": "Correct the following line while preserving intent: `fun . __name__ = name`  (ADD_FUNCTION_AROUND_EXPRESSION)"
    },
    {
      "question": "Produce the corrected version of: `return self . meta . get ( 'rsun_obs' , self . meta . get ( 'solar_r' , self . meta . get ( 'radius' , constants . average_angular_size . value ) ) )`  (family: ADD_METHOD_CALL)"
    },
    {
      "question": "This line is buggy: `super ( FindingChartsAPIEndPoint , self ) . __init__ ( state , False )`. Provide the correct version only. [SAME_FUNCTION_LESS_ARGS]"
    },
    {
      "question": "Correct the following line while preserving intent: `if self . meta . get_field ( \"sales_team\" ) : self . set_sales_team_for_customer ( )`  (MORE_SPECIFIC_IF)"
    },
    {
      "question": "Identify the issue in `if not webnotes . conn . get_default ( \"shopping_cart_enabled\" ) : return { }` and provide the corrected single-line fix. [ADD_FUNCTION_AROUND_EXPRESSION]"
    },
    {
      "question": "Fix the following statement so it is correct: `logger . info ( 'Host %s already missing on Debmonitor' )` (Pattern: SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Apply the minimal change that makes this line correct: `yield RemoteHosts ( self . _config , nodeset , dry_run = self . _dry_run )`  (SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Produce the corrected version of: `make_serialized_item ( )`  (family: SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Correct the following line while preserving intent: `employees = runreport ( doctype = \"Employee\" , fields = [ \"name\" , \"employee_name\" , \"department\" ] , filters = employee_filters )`  (SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Produce the corrected version of: `superpixel_map_avg = self . map . superpixel ( dimensions )`  (family: SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "This line is buggy: `rank = len ( self . v ) / np . sum ( self . shape )`. Provide the correct version only. [CHANGE_BINARY_OPERATOR]"
    },
    {
      "question": "Fix the error in: `if is_typing_type ( type_ ) : return type_ . __origin__ in _get_types ( Types . UNION )`. Return only the corrected line. [MORE_SPECIFIC_IF]"
    },
    {
      "question": "This line is buggy: `while lineNumber > len ( rendezvousLines ) : rendezvousLines . extend ( [ False ] * 100 )`. Provide the correct version only. [CHANGE_BINARY_OPERATOR]"
    },
    {
      "question": "Correct the following line while preserving intent: `self . nproc = nproc`  (ADD_FUNCTION_AROUND_EXPRESSION)"
    },
    {
      "question": "Replace the buggy snippet with a correct one: `if end is not None and point [ 0 ] >= end : continue`  [pattern=CHANGE_BINARY_OPERATOR]"
    },
    {
      "question": "Replace the buggy snippet with a correct one: `if end is not None and point [ 0 ] >= end : continue`  [pattern=CHANGE_BINARY_OPERATOR]"
    },
    {
      "question": "Fix the error in: `if end is not None and point [ 0 ] >= end : continue`. Return only the corrected line. [CHANGE_BINARY_OPERATOR]"
    },
    {
      "question": "Produce the corrected version of: `flags = autosynth . flags . parse_flags ( )`  (family: SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Fix the error in: `return ( num / denom ) . evalf ( )`. Return only the corrected line. [ADD_FUNCTION_AROUND_EXPRESSION]"
    },
    {
      "question": "Produce the corrected version of: `query . build_filter_conditions ( )`  (family: SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Apply the minimal change that makes this line correct: `self . root_type - par [ \"root_type\" ]`  (CHANGE_BINARY_OPERATOR)"
    },
    {
      "question": "Given the buggy code: `return send_file ( pardir + \"/\" + img , mimetype = \"image/png\" )`, rewrite it into a correct version. (Bug type: SAME_FUNCTION_LESS_ARGS)"
    },
    {
      "question": "Produce the corrected version of: `return HTMLParser ( ) . unescape ( self . message )`  (family: ADD_METHOD_CALL)"
    },
    {
      "question": "Replace the buggy snippet with a correct one: `months = dates / 100 % 100`  [pattern=CHANGE_BINARY_OPERATOR]"
    },
    {
      "question": "Correct the following line while preserving intent: `for f in self . _fonts : f . configure ( size = f . cget ( \"size\" ) + delta )`  (ADD_METHOD_CALL)"
    },
    {
      "question": "This line is buggy: `os . makedirs ( os . path . dirname ( self . _filename ) , exist_ok = True )`. Provide the correct version only. [SAME_FUNCTION_MORE_ARGS]"
    },
    {
      "question": "Given the buggy code: `tiles_path = \"tiled_{{0}}_{0:04d}.exr\" . format ( settings [ 'frame_start' ] )`, rewrite it into a correct version. (Bug type: ADD_FUNCTION_AROUND_EXPRESSION)"
    },
    {
      "question": "Produce the corrected version of: `r = requests . delete ( 'http://' + app . config [ 'BRENDER_SERVER' ] + path , params )`  (family: SAME_FUNCTION_LESS_ARGS)"
    },
    {
      "question": "Fix the error in: `def download ( ) : i = 0 tSize = [ ] start = time . time ( )`. Return only the corrected line. [SINGLE_TOKEN]"
    },
    {
      "question": "Produce the corrected version of: `def get_faculty_and_group ( self , user_id ) : self . cursor . execute ( \"SELECT * FROM user_position WHERE id IN (SELECT max(id) FROM user_position \\\n                             WHERE user_id = (%s))\" , ( user_id , ) )`  (family: SINGLE_TOKEN)"
    },
    {
      "question": "Fix the following statement so it is correct: `def get_faculty_and_group ( self , user_id ) : self . cursor . execute ( \"SELECT * FROM user_position WHERE id IN (SELECT max(id) FROM user_position \\\n                             WHERE user_id = (%s))\" , ( user_id , ) ) return tuple ( [ element for index , element in enumerate ( self . cursor . fetchone ( ) ) if index == 2 or index == 3 ] )` (Pattern: SINGLE_TOKEN)"
    },
    {
      "question": "Apply the minimal change that makes this line correct: `if not self . ready : packet . pos += 2 version = packet . uint16 ( )`  (MORE_SPECIFIC_IF)"
    },
    {
      "question": "Fix the error in: `self . file_list = file_list . load ( )`. Return only the corrected line. [SAME_FUNCTION_MORE_ARGS]"
    },
    {
      "question": "Fix the error in: `f_i = np . round ( frame_rate * np . array ( df_s . loc [ : , 2 ] ) )`. Return only the corrected line. [ADD_METHOD_CALL]"
    },
    {
      "question": "Fix the error in: `k_idx [ idx ] = 1`. Return only the corrected line. [SINGLE_TOKEN]"
    },
    {
      "question": "Correct the following line while preserving intent: `if monster . base . targetChange and random . randint ( 0 , 99 ) < monster . base . targetChance : monster . targetCheck ( ) if not monster . target : return True`  (MORE_SPECIFIC_IF)"
    },
    {
      "question": "Replace the buggy snippet with a correct one: `if thing . owners : for owner in thing . owners [ : ] : if not owner . inRange ( position , 1 , 1 ) or position . z != owner . position . z : who . closeContainer ( thing )`  [pattern=MORE_SPECIFIC_IF]"
    },
    {
      "question": "Produce the corrected version of: `self . timeout = timeout`  (family: ADD_FUNCTION_AROUND_EXPRESSION)"
    },
    {
      "question": "Produce the corrected version of: `if self . extraIcons % icon : self . extraIcons -= icon`  (family: CHANGE_BINARY_OPERATOR)"
    },
    {
      "question": "Identify the issue in `for user , data in accounts : if data [ \"trafficleft\" ] == - 1 : data [ \"trafficleft\" ] = _ ( \"unlimited\" ) elif not data [ \"trafficleft\" ] :` and provide the corrected single-line fix. [ADD_METHOD_CALL]"
    },
    {
      "question": "Correct the following line while preserving intent: `plugins = tuple ( plugins )`  (ADD_FUNCTION_AROUND_EXPRESSION)"
    },
    {
      "question": "Apply the minimal change that makes this line correct: `if True : self . tray = TrayIcon ( ) self . tray . show ( ) self . notification = Notification ( self . tray )`  (SINGLE_TOKEN)"
    },
    {
      "question": "Replace the buggy snippet with a correct one: `if line . endswith ( \":\" ) : plugin = line [ : - 1 ] self . accounts [ plugin ] = { }`  [pattern=MORE_SPECIFIC_IF]"
    },
    {
      "question": "Replace the buggy snippet with a correct one: `if pack . password . strip ( ) and pack . password . strip ( ) != \"None\" : self . addPassword ( pack . password . splitlines ( ) )`  [pattern=MORE_SPECIFIC_IF]"
    },
    {
      "question": "Identify the issue in `units = float ( fileInfo . group ( 2 ) . replace ( \",\" , \".\" ) )` and provide the corrected single-line fix. [ADD_METHOD_CALL]"
    },
    {
      "question": "Replace the buggy snippet with a correct one: `self . req . load ( str ( url ) , cookies = False , just_header = True )`  [pattern=SAME_FUNCTION_LESS_ARGS]"
    },
    {
      "question": "Apply the minimal change that makes this line correct: `if self . login_timeout > 0 and self . timestamps [ user ] + self . login_timeout * 60 > time ( ) : self . logDebug ( \"Reached login timeout for %s\" % user ) return self . relogin ( user ) else :`  (CHANGE_BINARY_OPERATOR)"
    },
    {
      "question": "This line is buggy: `data = line . split ( \",\" )`. Provide the correct version only. [SAME_FUNCTION_MORE_ARGS]"
    },
    {
      "question": "Given the buggy code: `now = time . localtime ( ) [ 3 : 5 ]`, rewrite it into a correct version. (Bug type: ADD_FUNCTION_AROUND_EXPRESSION)"
    },
    {
      "question": "Fix the error in: `return re . search ( file_name_pattern , self . html ) . group ( 1 ) . replace ( \"&amp;\" , \"&\" ) + '.flv'`. Return only the corrected line. [ADD_METHOD_CALL]"
    },
    {
      "question": "Replace the buggy snippet with a correct one: `self . html = None`  [pattern=SINGLE_TOKEN]"
    },
    {
      "question": "Fix the following statement so it is correct: `return None` (Pattern: SINGLE_TOKEN)"
    },
    {
      "question": "Identify the issue in `return None` and provide the corrected single-line fix. [SINGLE_TOKEN]"
    },
    {
      "question": "This line is buggy: `config . get ( 'correction_factor' , None ) ,`. Provide the correct version only. [SINGLE_TOKEN]"
    },
    {
      "question": "Apply the minimal change that makes this line correct: `print ( 'THEME ID: ' + id )`  (ADD_FUNCTION_AROUND_EXPRESSION)"
    },
    {
      "question": "Fix the error in: `VRadioDiv = self . zv / 16`. Return only the corrected line. [CHANGE_BINARY_OPERATOR]"
    },
    {
      "question": "Produce the corrected version of: `VRadioDiv = self . zv / 16`  (family: CHANGE_BINARY_OPERATOR)"
    },
    {
      "question": "Fix the error in: `if event . data [ ATTR_SERVICE ] in service : callback ( event . data [ ATTR_SERVICE ] , event . data . get ( ATTR_DISCOVERED ) )`. Return only the corrected line. [MORE_SPECIFIC_IF]"
    },
    {
      "question": "Identify the issue in `titled_mode = options . get ( CONF_MODE , 'driving' ) . title ( )` and provide the corrected single-line fix. [SAME_FUNCTION_LESS_ARGS]"
    },
    {
      "question": "Correct the following line while preserving intent: `self . slack . chat . post_message ( channel , message )`  (SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "This line is buggy: `devices . extend ( ( address , None ) for address in config . get ( DOMAIN , { } ) . get ( CONF_STATIC ) )`. Provide the correct version only. [SAME_FUNCTION_MORE_ARGS]"
    },
    {
      "question": "Replace the buggy snippet with a correct one: `if isinstance ( conf , list ) : conf = conf [ 0 ]`  [pattern=MORE_SPECIFIC_IF]"
    },
    {
      "question": "This line is buggy: `if for_env is not None and len ( for_env . defaultValues ) > 0 : default_values = values_list_to_dict ( for_env . defaultValues , for_env , skip_value_from = skip_value_from ) values = merge_values ( from_dict = default_values , onto_dict = values )`. Provide the correct version only. [MORE_SPECIFIC_IF]"
    },
    {
      "question": "Produce the corrected version of: `self . parser . add_argument ( '--profile' , help = 'Choose profile' )`  (family: SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Replace the buggy snippet with a correct one: `if 'thick' in kwargs : self . canvas . setLineWidth ( kwargs [ 'thick' ] )`  [pattern=MORE_SPECIFIC_IF]"
    },
    {
      "question": "Given the buggy code: `return dct`, rewrite it into a correct version. (Bug type: ADD_FUNCTION_AROUND_EXPRESSION)"
    },
    {
      "question": "Fix the error in: `if main_pb : main_pb . update ( 1 )`. Return only the corrected line. [MORE_SPECIFIC_IF]"
    },
    {
      "question": "Identify the issue in `response = requests_sync . get ( \"http://{}/api/v1/production/inverters\" . format ( self . host ) , auth = HTTPDigestAuth ( self . username , self . password ) )` and provide the corrected single-line fix. [SAME_FUNCTION_MORE_ARGS]"
    },
    {
      "question": "Identify the issue in `response = await client . get ( \"http://{}/api/v1/production/inverters\" . format ( self . host ) , auth = httpx . DigestAuth ( self . username , self . password ) )` and provide the corrected single-line fix. [SAME_FUNCTION_MORE_ARGS]"
    },
    {
      "question": "Replace the buggy snippet with a correct one: `if not 'key' in conf . default_domain_data : print ( 'Key for domain ' + conf . default_domain + ' is not defined' ) return True`  [pattern=MORE_SPECIFIC_IF]"
    },
    {
      "question": "Identify the issue in `return json . loads ( res . read ( ) )` and provide the corrected single-line fix. [ADD_METHOD_CALL]"
    },
    {
      "question": "Identify the issue in `self . position = position` and provide the corrected single-line fix. [ADD_FUNCTION_AROUND_EXPRESSION]"
    },
    {
      "question": "Identify the issue in `nmsg = msg . split ( \" \" )` and provide the corrected single-line fix. [SAME_FUNCTION_LESS_ARGS]"
    },
    {
      "question": "Fix the error in: `if value . startswith ( '/' ) : return value`. Return only the corrected line. [MORE_SPECIFIC_IF]"
    },
    {
      "question": "Given the buggy code: `if self . type != self . FIXED_PRICE and not self . range : raise ValidationError ( \"Benefits of type %s need a range\" % self . type )`, rewrite it into a correct version. (Bug type: MORE_SPECIFIC_IF)"
    },
    {
      "question": "Correct the following line while preserving intent: `d = \"%s (%s)\" % ( d , \", \" . join ( ops ) )`  (ADD_METHOD_CALL)"
    },
    {
      "question": "Given the buggy code: `stayalive = conn . conf . get ( 'stayalive' )`, rewrite it into a correct version. (Bug type: SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Apply the minimal change that makes this line correct: `if fill : ImageDraw . ImageDraw . rectangle ( self , box , fill = fill )`  (MORE_SPECIFIC_IF)"
    },
    {
      "question": "Apply the minimal change that makes this line correct: `return unescape_xml ( ': ' . join ( tweet . find ( x ) . text for x in 'created_at user/screen_name text' . split ( ) ) )`  (ADD_METHOD_CALL)"
    },
    {
      "question": "This line is buggy: `print timestamp , input . chan , beau`. Provide the correct version only. [ADD_METHOD_CALL]"
    },
    {
      "question": "Replace the buggy snippet with a correct one: `if len ( prefix ) == 1 : return prefix [ 0 ] elif prefix : return prefix`  [pattern=MORE_SPECIFIC_IF]"
    },
    {
      "question": "This line is buggy: `out = defs [ 0 ] [ 'word' ] + ': ' + defs [ 0 ] [ 'definition' ]`. Provide the correct version only. [ADD_METHOD_CALL]"
    },
    {
      "question": "Fix the error in: `return Response ( 'Page Moved to %s' % url , headers = [ ( 'Location' , url ) , ( 'Content-Type' , 'text/plain' ) ] , status = 302 )`. Return only the corrected line. [SINGLE_TOKEN]"
    },
    {
      "question": "Replace the buggy snippet with a correct one: `if parent is not None : parent = pastes . selectfirst ( Paste . c . paste_id == parent ) code = parent . code language = parent . language`  [pattern=MORE_SPECIFIC_IF]"
    },
    {
      "question": "Identify the issue in `else : if local . request . args . get ( 'private' ) != '0' : private = True` and provide the corrected single-line fix. [SAME_FUNCTION_MORE_ARGS]"
    },
    {
      "question": "Identify the issue in `return` and provide the corrected single-line fix. [SINGLE_TOKEN]"
    },
    {
      "question": "Given the buggy code: `err : warnings . warn ( err , RuntimeWarning )`, rewrite it into a correct version. (Bug type: ADD_FUNCTION_AROUND_EXPRESSION)"
    },
    {
      "question": "This line is buggy: `self . assertEqual ( jobid , self . gb2_mock_process . n_retries_by_job [ jobid ] , 1 )`. Provide the correct version only. [SAME_FUNCTION_LESS_ARGS]"
    },
    {
      "question": "Correct the following line while preserving intent: `return None`  (SINGLE_TOKEN)"
    },
    {
      "question": "Identify the issue in `return self . post ( * args , ** kwargs )` and provide the corrected single-line fix. [SAME_FUNCTION_MORE_ARGS]"
    },
    {
      "question": "Correct the following line while preserving intent: `grains . update ( _ps ( ) )`  (SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Replace the buggy snippet with a correct one: `writer . writerow ( row )`  [pattern=ADD_METHOD_CALL]"
    },
    {
      "question": "Apply the minimal change that makes this line correct: `else : sub_module = module_label . replace ( app_name , '' )`  (SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Replace the buggy snippet with a correct one: `User . objects . create_user ( username = username , password = pw )`  [pattern=SAME_FUNCTION_MORE_ARGS]"
    },
    {
      "question": "Fix the following statement so it is correct: `if not price : return ''` (Pattern: MORE_SPECIFIC_IF)"
    },
    {
      "question": "Given the buggy code: `msg = \"A user with that email address already exists\"`, rewrite it into a correct version. (Bug type: ADD_FUNCTION_AROUND_EXPRESSION)"
    },
    {
      "question": "Identify the issue in `total = self . get_order_totals ( basket , shipping_charge = shipping_charge )` and provide the corrected single-line fix. [SAME_FUNCTION_MORE_ARGS]"
    },
    {
      "question": "Fix the following statement so it is correct: `if 'dashboard' in app_label : config_name = '%sDashboardConfig' % app_label . split ( '.' ) . pop ( ) . title ( ) elif app_label == 'catalogue.reviews' :` (Pattern: MORE_SPECIFIC_IF)"
    },
    {
      "question": "This line is buggy: `url ( r'^notifications/$' , generic . RedirectView . as_view ( url = '/accounts/notifications/inbox/' ) ) ,`. Provide the correct version only. [SAME_FUNCTION_MORE_ARGS]"
    },
    {
      "question": "Fix the error in: `__salt__ [ 'acl.modfacl' ] ( acl_type , acl_name , perms , '/root' )`. Return only the corrected line. [SINGLE_TOKEN]"
    },
    {
      "question": "Fix the following statement so it is correct: `def test_loaddata ( self ) : mock = MagicMock ( ) with patch . dict ( django . __salt__ , { 'cmd.run' : mock } ) :` (Pattern: SINGLE_TOKEN)"
    },
    {
      "question": "Identify the issue in `f = codecs . open ( file_path )` and provide the corrected single-line fix. [SAME_FUNCTION_MORE_ARGS]"
    },
    {
      "question": "Correct the following line while preserving intent: `def instantaneous_rate ( spiketrain , sampling_period , form , sigma = None , t_start = None , t_stop = None , acausal = True , trim = False ) :`  (SINGLE_TOKEN)"
    },
    {
      "question": "Fix the error in: `luigi . server . run ( api_port = opts . port , address = opts . address )`. Return only the corrected line. [SAME_FUNCTION_MORE_ARGS]"
    },
    {
      "question": "Fix the following statement so it is correct: `dispatcher . dispatch_user_messages ( messages )` (Pattern: SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Replace the buggy snippet with a correct one: `voucher_id = kwargs . pop ( 'pk' )`  [pattern=ADD_FUNCTION_AROUND_EXPRESSION]"
    },
    {
      "question": "Apply the minimal change that makes this line correct: `bands = WeightBand . objects . filter ( method_code = method_code , upper_limit__gte = weight ) . order_by ( 'upper_limit' )`  (ADD_FUNCTION_AROUND_EXPRESSION)"
    },
    {
      "question": "Fix the error in: `order . notes . create ( message = message )`. Return only the corrected line. [SAME_FUNCTION_MORE_ARGS]"
    },
    {
      "question": "Identify the issue in `if form . cleaned_data [ 'save_for_later' ] : line = form . instance if self . request . user . is_authenticated ( ) :` and provide the corrected single-line fix. [MORE_SPECIFIC_IF]"
    },
    {
      "question": "Apply the minimal change that makes this line correct: `f = open ( self . ROOT_DIR + '/public/images/loading_wheel.gif' )`  (SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Correct the following line while preserving intent: `if d_estate != self . road_stack . value . local . name : log . error ( 'Road Router Received message for wrong estate: {0}' . format ( d_estate ) ) return`  (MORE_SPECIFIC_IF)"
    },
    {
      "question": "This line is buggy: `return self . success ( self )`. Provide the correct version only. [SAME_FUNCTION_LESS_ARGS]"
    },
    {
      "question": "Given the buggy code: `tree = option . ConfigurationProxy ( tree )`, rewrite it into a correct version. (Bug type: SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Apply the minimal change that makes this line correct: `status = self . client . jobs ( ) . get ( projectId = project_id , jobId = job_id ) . execute ( )`  (SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "This line is buggy: `def __init__ ( self , host , database , user , password , table , update_id , port = None ) :`. Provide the correct version only. [SINGLE_TOKEN]"
    },
    {
      "question": "Fix the following statement so it is correct: `return fh . read ( ) . replace ( '\\0' , ' ' ) . rstrip ( )` (Pattern: ADD_METHOD_CALL)"
    },
    {
      "question": "Apply the minimal change that makes this line correct: `self . deduplicate = False`  (SINGLE_TOKEN)"
    },
    {
      "question": "Given the buggy code: `tcd = thermal_cycle . ThermalCycleDesigner ( k )`, rewrite it into a correct version. (Bug type: SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Identify the issue in `label = getattr ( self . doc . data [ inhuman_header ] , \"m_label\" )` and provide the corrected single-line fix. [SAME_FUNCTION_MORE_ARGS]"
    },
    {
      "question": "Apply the minimal change that makes this line correct: `logging . debug ( '%s %s' , 'Update needed: %.2f>%.2f doc' % ( elp , lastt ) )`  (SAME_FUNCTION_LESS_ARGS)"
    },
    {
      "question": "Correct the following line while preserving intent: `f = functools . partial ( self . setInstrument , obj )`  (SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Apply the minimal change that makes this line correct: `return self . _panels . values ( )`  (ADD_FUNCTION_AROUND_EXPRESSION)"
    },
    {
      "question": "Produce the corrected version of: `return map ( self . _quote_expr , params )`  (family: ADD_FUNCTION_AROUND_EXPRESSION)"
    },
    {
      "question": "Produce the corrected version of: `primers = pd . read_csv ( \"seq-analysis/truseq_primers.csv\" )`  (family: SINGLE_TOKEN)"
    },
    {
      "question": "Identify the issue in `init_fuel . init ( valp , ** kwargs )` and provide the corrected single-line fix. [SAME_FUNCTION_LESS_ARGS]"
    },
    {
      "question": "Apply the minimal change that makes this line correct: `def udpate ( self ) : now = self . loop . time ( ) dt = now - self . last_time`  (SINGLE_TOKEN)"
    },
    {
      "question": "Given the buggy code: `if not tosave ( entry ) : continue`, rewrite it into a correct version. (Bug type: SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Identify the issue in `self . open_database ( path , new = True , browser = self )` and provide the corrected single-line fix. [SAME_FUNCTION_LESS_ARGS]"
    },
    {
      "question": "Apply the minimal change that makes this line correct: `f = indexer . SharedFile ( nativem4 )`  (SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Produce the corrected version of: `if 'dpi' in argsv : self . veusz_pixperpt = argsv [ 'dpi' ] / 72.`  (family: MORE_SPECIFIC_IF)"
    },
    {
      "question": "Produce the corrected version of: `numcols = min ( s . columns , count )`  (family: ADD_FUNCTION_AROUND_EXPRESSION)"
    },
    {
      "question": "Fix the error in: `elapsed0 = self . proxy . get_node_attr ( '/conf' , 'elapsed' )`. Return only the corrected line. [ADD_FUNCTION_AROUND_EXPRESSION]"
    },
    {
      "question": "Apply the minimal change that makes this line correct: `parser . add_option ( '--log-images' , dest = 'log_images' , default = False , help = 'Log captured images to the log directory' )`  (SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Fix the following statement so it is correct: `self . _dcm = dcm` (Pattern: ADD_METHOD_CALL)"
    },
    {
      "question": "Apply the minimal change that makes this line correct: `axis . Axis . draw ( self , bounds , painter )`  (SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Produce the corrected version of: `t = N . dtype ( params . field_results [ \"datatype\" ] )`  (family: ADD_FUNCTION_AROUND_EXPRESSION)"
    },
    {
      "question": "Fix the error in: `else : doc = util . get_connections_from_file ( self . filename )`. Return only the corrected line. [SAME_FUNCTION_MORE_ARGS]"
    },
    {
      "question": "Apply the minimal change that makes this line correct: `try : self . process ( data ) except Exception as error : log . error ( \"Bad data from %s: %s\" , addr , error )`  (SINGLE_TOKEN)"
    },
    {
      "question": "Given the buggy code: `try : impl . run_with_argv ( args ) except AssetCommandError , e : raise CommandError ( e )`, rewrite it into a correct version. (Bug type: SINGLE_TOKEN)"
    },
    {
      "question": "Apply the minimal change that makes this line correct: `else : doc = util . get_connections_from_file ( self . filename )`  (SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Produce the corrected version of: `return datetime . datetime . strptime ( datestring [ : 10 ] , '%Y-%m-%d' )`  (family: ADD_METHOD_CALL)"
    },
    {
      "question": "Apply the minimal change that makes this line correct: `if value is '' and self . allow_blank is not True : default_message = 'Field may not be blank.' message = ( default_message if isinstance ( self . allow_blank , bool ) else self . allow_blank )`  (CHANGE_BINARY_OPERATOR)"
    },
    {
      "question": "Correct the following line while preserving intent: `def test_one_of_custom_message ( ) : oneof = validate . OneOf ( [ 1 , 2 , 3 ] , error = '{input} is not one of {choices}' ) expected = '4 is not one of 1, 2, 3' with pytest . raises ( ValidationError ) as excinfo :`  (SINGLE_TOKEN)"
    },
    {
      "question": "Replace the buggy snippet with a correct one: `AttributeError : msg = '{0!r} cannot be formatted as a timedelta.' . format ( )`  [pattern=SAME_FUNCTION_MORE_ARGS]"
    },
    {
      "question": "Apply the minimal change that makes this line correct: `def test_integer_field ( self , user ) : field = fields . Integer ( as_string = True ) assert field . serialize ( 'age' , user ) == '42'`  (SINGLE_TOKEN)"
    },
    {
      "question": "Fix the error in: `super ( QuerySelectList ) . __init__ ( * args , ** kwargs )`. Return only the corrected line. [SAME_FUNCTION_MORE_ARGS]"
    },
    {
      "question": "This line is buggy: `label = qt4 . QLabel ( \"  \" )`. Provide the correct version only. [SAME_FUNCTION_MORE_ARGS]"
    },
    {
      "question": "Correct the following line while preserving intent: `return value`  (ADD_FUNCTION_AROUND_EXPRESSION)"
    },
    {
      "question": "Produce the corrected version of: `c [ 'ENVIRON' ] = os . environ`  (family: ADD_FUNCTION_AROUND_EXPRESSION)"
    },
    {
      "question": "Fix the following statement so it is correct: `keys [ k ] = v` (Pattern: ADD_FUNCTION_AROUND_EXPRESSION)"
    },
    {
      "question": "Given the buggy code: `return algo . sons ( _g , v , RestrictedTo = RestrictedTo , Scale = Scale , ContainedIn = ContainedIn )`, rewrite it into a correct version. (Bug type: SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Produce the corrected version of: `if complex not in self . _children . get ( parent_complex ) : self . add_child ( parent_complex , complex )`  (family: SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Replace the buggy snippet with a correct one: `vid = l . pop ( )`  [pattern=SAME_FUNCTION_MORE_ARGS]"
    },
    {
      "question": "This line is buggy: `remote_capabilities = capabilities . items ( ) + options . to_capabilities ( ) . items ( )`. Provide the correct version only. [ADD_FUNCTION_AROUND_EXPRESSION]"
    },
    {
      "question": "Fix the following statement so it is correct: `total = len ( all_ids , ids_to_remove )` (Pattern: SAME_FUNCTION_LESS_ARGS)"
    },
    {
      "question": "Fix the following statement so it is correct: `orig = BytesIO ( requests . get ( media . file ) . content )` (Pattern: ADD_FUNCTION_AROUND_EXPRESSION)"
    },
    {
      "question": "Apply the minimal change that makes this line correct: `self . data [ \"health\" ] = max ( 0 , health )`  (ADD_FUNCTION_AROUND_EXPRESSION)"
    },
    {
      "question": "Fix the following statement so it is correct: `Currency ( code = currency , name = d [ currency ] , factor = 1.0 ) . save ( )` (Pattern: SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Identify the issue in `rightmost_sibling = root_nodes . order_by ( '-%s' % opts . tree_id_attr ) [ 0 ]` and provide the corrected single-line fix. [ADD_METHOD_CALL]"
    },
    {
      "question": "Replace the buggy snippet with a correct one: `email_address = EmailAddress . objects . get ( email__iexact = credentials [ \"username\" ] )`  [pattern=SAME_FUNCTION_MORE_ARGS]"
    },
    {
      "question": "Produce the corrected version of: `if not do_updates and not same_order : same_order = True self . __class__ . _mptt_track_tree_modified ( self . _mpttfield ( 'tree_id' ) ) elif not same_order and old_parent_id is None : collapse_old_tree = self . _mpttfield ( 'tree_id' ) parent = getattr ( self , opts . parent_attr )`  (family: MORE_SPECIFIC_IF)"
    },
    {
      "question": "This line is buggy: `if self . tree_model is not model : self . _base_manager = self . tree_model . _tree_manager`. Provide the correct version only. [MORE_SPECIFIC_IF]"
    },
    {
      "question": "Given the buggy code: `self . create_account ( new_user )`, rewrite it into a correct version. (Bug type: SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Fix the error in: `for url , failures in self . sites : if self . _got_response ( url ) : failures = 0 rospy . logdebug ( \"%s response - internet is fine\" % url )`. Return only the corrected line. [ADD_METHOD_CALL]"
    },
    {
      "question": "Produce the corrected version of: `thread . start_new_thread ( tag_enumerator )`  (family: SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Apply the minimal change that makes this line correct: `initial_b = numpy . zeros ( n_hidden )`  (SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "This line is buggy: `path = os . path . dirname ( listpath ) + '/' + path`. Provide the correct version only. [ADD_FUNCTION_AROUND_EXPRESSION]"
    },
    {
      "question": "Given the buggy code: `self . logger . write ( 'my message' )`, rewrite it into a correct version. (Bug type: SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "This line is buggy: `if len ( args ) >= 2 and args [ - 2 ] . upper ( ) == 'WITH NAME' : lib_name = args [ - 1 ] . replace ( ' ' , '' ) args = args [ : - 2 ] else :`. Provide the correct version only. [MORE_SPECIFIC_IF]"
    },
    {
      "question": "Identify the issue in `return ResourceDoc ( libname , newname )` and provide the corrected single-line fix. [SAME_FUNCTION_MORE_ARGS]"
    },
    {
      "question": "Identify the issue in `row = row . rstrip ( )` and provide the corrected single-line fix. [ADD_METHOD_CALL]"
    },
    {
      "question": "Given the buggy code: `name = os . path . splitext ( os . path . basename ( name ) ) [ 0 ]`, rewrite it into a correct version. (Bug type: ADD_FUNCTION_AROUND_EXPRESSION)"
    },
    {
      "question": "Apply the minimal change that makes this line correct: `def test_missing_statistics_tag ( self ) : reader = _BaseReader ( DomWrapper ( string = data ) ) assert_equals ( reader . status , 'FAIL' ) assert_equals ( reader . starttime , 'N/A' )`  (SINGLE_TOKEN)"
    },
    {
      "question": "Produce the corrected version of: `quadKey . append ( digit )`  (family: ADD_FUNCTION_AROUND_EXPRESSION)"
    },
    {
      "question": "Produce the corrected version of: `if exc_info : os . remove ( self . _output_path )`  (family: ADD_FUNCTION_AROUND_EXPRESSION)"
    },
    {
      "question": "Correct the following line while preserving intent: `assert_equals ( cache . _keys [ 0 ] , normpath ( path ) )`  (SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Fix the error in: `content_type = ContentType . objects . get ( model = Message )`. Return only the corrected line. [SINGLE_TOKEN]"
    },
    {
      "question": "Given the buggy code: `form . fields [ \"email\" ] . initial = self . request . session . get ( 'account_verified_email' , None )`, rewrite it into a correct version. (Bug type: SAME_FUNCTION_LESS_ARGS)"
    },
    {
      "question": "Given the buggy code: `self . _names = argnames`, rewrite it into a correct version. (Bug type: ADD_FUNCTION_AROUND_EXPRESSION)"
    },
    {
      "question": "Apply the minimal change that makes this line correct: `args . append ( '%s=%r' % ( name , value ) )`  (ADD_FUNCTION_AROUND_EXPRESSION)"
    },
    {
      "question": "Correct the following line while preserving intent: `return subprocess . call ( command . split ( ) )`  (SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Fix the error in: `lines = [ 'Several failures occurred:' ] + [ '%d) %s' % ( i + 1 , err ) for i , err in enumerate ( self . _errors ) ]`. Return only the corrected line. [ADD_FUNCTION_AROUND_EXPRESSION]"
    },
    {
      "question": "Replace the buggy snippet with a correct one: `self . _test . run_errors . teardown_err ( error )`  [pattern=ADD_FUNCTION_AROUND_EXPRESSION]"
    },
    {
      "question": "Replace the buggy snippet with a correct one: `EmailAddress . DoesNotExist : EmailAddress . objects . add_email ( user , user . email )`  [pattern=SAME_FUNCTION_MORE_ARGS]"
    },
    {
      "question": "Given the buggy code: `query = dict ( [ ( name , var . resolve ( context ) ) for name , var in self . params . iteritems ( ) ] )`, rewrite it into a correct version. (Bug type: ADD_FUNCTION_AROUND_EXPRESSION)"
    },
    {
      "question": "Fix the following statement so it is correct: `self . __init__ ( self , self . setting_name , self . parent )` (Pattern: SAME_FUNCTION_LESS_ARGS)"
    },
    {
      "question": "Fix the error in: `db . add_column ( u'nuntium_nocontactom' , 'person' , self . gf ( 'django.db.models.fields.related.ForeignKey' ) ( default = 'olinwi' , to = orm [ 'popit.Person' ] ) , keep_default = False )`. Return only the corrected line. [SAME_FUNCTION_LESS_ARGS]"
    },
    {
      "question": "This line is buggy: `def test_x ( self ) : data = join ( ROOT , 'atest' , 'testdata' , 'variables' , 'commandline_variables.html' ) rc = run ( data , stdout = StringIO ( ) , stderr = StringIO ( ) , test = [ 'NormalText' ] , variable = [ 'NormalText:Hello' ] ) assert_equals ( rc , 0 )`. Provide the correct version only. [SINGLE_TOKEN]"
    },
    {
      "question": "Produce the corrected version of: `def multi_args ( p , cmd = \"celeryd\" , append = None , prefix = \"\" , suffix = \"\" ) : names = p . values options = dict ( p . options )`  (family: SINGLE_TOKEN)"
    },
    {
      "question": "Produce the corrected version of: `download_path = os . path . realpath ( proxy . get_directory ( ) . rstrip ( os . sep ) )`  (family: ADD_FUNCTION_AROUND_EXPRESSION)"
    },
    {
      "question": "Fix the following statement so it is correct: `except ( KeyError , bencode . BencodeError ) ,` (Pattern: SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Correct the following line while preserving intent: `if gamestate . musicfile : h . play_music ( gamestate . musicfile )`  (MORE_SPECIFIC_IF)"
    },
    {
      "question": "Correct the following line while preserving intent: `initial_b = numpy . zeros ( n_hidden )`  (SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Produce the corrected version of: `crit ( \"Can't decode message body: %r (type:%r encoding:%r raw:%r')\" , exc , message . content_type , message . content_encoding , dump_body ( message , message . body ) )`  (family: SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Given the buggy code: `mock_collection . remove . assert_called_once_with ( { '_id' : sentinel . task_id } , safe = True )`, rewrite it into a correct version. (Bug type: SAME_FUNCTION_LESS_ARGS)"
    },
    {
      "question": "Fix the following statement so it is correct: `mock_collection . remove . assert_called_once_with ( { '_id' : sentinel . task_id } , safe = True )` (Pattern: SAME_FUNCTION_LESS_ARGS)"
    },
    {
      "question": "Fix the error in: `platform = _platform . platform ( ) ,`. Return only the corrected line. [ADD_FUNCTION_AROUND_EXPRESSION]"
    },
    {
      "question": "Given the buggy code: `if action . interactive : self . options . interactive = True`, rewrite it into a correct version. (Bug type: MORE_SPECIFIC_IF)"
    },
    {
      "question": "Fix the following statement so it is correct: `c = 1e7` (Pattern: ADD_FUNCTION_AROUND_EXPRESSION)"
    },
    {
      "question": "This line is buggy: `assert start < end`. Provide the correct version only. [CHANGE_BINARY_OPERATOR]"
    },
    {
      "question": "Replace the buggy snippet with a correct one: `await slot_spinner . edit ( None , embed = slot_embed )`  [pattern=SAME_FUNCTION_LESS_ARGS]"
    },
    {
      "question": "This line is buggy: `raise node`. Provide the correct version only. [SINGLE_TOKEN]"
    },
    {
      "question": "Correct the following line while preserving intent: `async def math ( cmd , message , args ) : if not args : await cmd . reply ( cmd . help ( ) ) return`  (SINGLE_TOKEN)"
    },
    {
      "question": "Fix the error in: `self . dorks = dorks_re . match ( self . url )`. Return only the corrected line. [ADD_FUNCTION_AROUND_EXPRESSION]"
    },
    {
      "question": "Replace the buggy snippet with a correct one: `def get_extended_attributes ( self , version ) : if version == \"2.0\" : return FLAVOR_ATTRIBUTE else :`  [pattern=SINGLE_TOKEN]"
    },
    {
      "question": "Identify the issue in `if account . _id in c . user . enemies : self . set_error ( errors . USER_BLOCKED ) else : return account` and provide the corrected single-line fix. [MORE_SPECIFIC_IF]"
    },
    {
      "question": "Apply the minimal change that makes this line correct: `if len ( text ) < len ( orig_text ) : line_result . warn ( 'text' , 'truncating flair text to %d chars' % len ( text ) )`  (MORE_SPECIFIC_IF)"
    },
    {
      "question": "Fix the following statement so it is correct: `if u . is_reddit_url ( ) : return dest` (Pattern: SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Fix the error in: `return UploadedImage ( \"\" , \"\" , \"\" , errors = errors ) . render ( )`. Return only the corrected line. [SAME_FUNCTION_MORE_ARGS]"
    },
    {
      "question": "Fix the following statement so it is correct: `form = ClasseForms . EditForm ( classe , initial = classe_initial )` (Pattern: SAME_FUNCTION_LESS_ARGS)"
    },
    {
      "question": "Fix the error in: `if self . is_contiguous and value . is_contiguous and self . dtype == value . dtype : drv . memcpy_dtod_async ( self . gpudata , value . gpudata , self . nbytes , stream ) else :`. Return only the corrected line. [MORE_SPECIFIC_IF]"
    },
    {
      "question": "Fix the error in: `self . speciesList = speciesList`. Return only the corrected line. [ADD_FUNCTION_AROUND_EXPRESSION]"
    },
    {
      "question": "Replace the buggy snippet with a correct one: `return self . speciesList == [ maf . name ( i ) for i in range ( maf . count ( ) ) ]`  [pattern=ADD_FUNCTION_AROUND_EXPRESSION]"
    },
    {
      "question": "Correct the following line while preserving intent: `docs = func . __doc__ . strip ( )`  (ADD_FUNCTION_AROUND_EXPRESSION)"
    },
    {
      "question": "Produce the corrected version of: `os . mkdir ( 'yamels' )`  (family: ADD_FUNCTION_AROUND_EXPRESSION)"
    },
    {
      "question": "Fix the error in: `statics . sync ( verbose = verbose ) . start ( )`. Return only the corrected line. [SAME_FUNCTION_MORE_ARGS]"
    },
    {
      "question": "Given the buggy code: `if g : return frappe . get_doc ( doctype , g [ 0 ] [ 0 ] ) . get_website_route ( )`, rewrite it into a correct version. (Bug type: MORE_SPECIFIC_IF)"
    },
    {
      "question": "Identify the issue in `profile = ( 'http://127.0.0.1:9000/pc/' + ow_region . lower ( ) + '/' + ow_name + '/profile' )` and provide the corrected single-line fix. [ADD_METHOD_CALL]"
    },
    {
      "question": "Correct the following line while preserving intent: `random . randint ( 1 , 1724 )`  (ADD_FUNCTION_AROUND_EXPRESSION)"
    },
    {
      "question": "Fix the following statement so it is correct: `if review_queue > 150 : imgdraw . text ( ( 440 , 110 ) , '!' , ( 255 , 0 , 0 ) , font = font2 )` (Pattern: ADD_FUNCTION_AROUND_EXPRESSION)"
    },
    {
      "question": "Apply the minimal change that makes this line correct: `user = frappe . get_user ( frappe . session . user )`  (SAME_FUNCTION_LESS_ARGS)"
    },
    {
      "question": "Apply the minimal change that makes this line correct: `frappe . cache ( ) . hset ( \"temp\" , value )`  (SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Replace the buggy snippet with a correct one: `session = { 'user' : 'Administrator' }`  [pattern=ADD_FUNCTION_AROUND_EXPRESSION]"
    },
    {
      "question": "Given the buggy code: `return None`, rewrite it into a correct version. (Bug type: SINGLE_TOKEN)"
    },
    {
      "question": "Produce the corrected version of: `condition . append ( \"%s='%s'\" % ( key , val . replace ( \"'\" , \"\\'\" ) ) )`  (family: ADD_FUNCTION_AROUND_EXPRESSION)"
    },
    {
      "question": "Fix the error in: `backup = new_backup ( )`. Return only the corrected line. [SAME_FUNCTION_MORE_ARGS]"
    },
    {
      "question": "Fix the following statement so it is correct: `if next_item . name [ 0 ] != \"/\" : next_item . name = \"/\" + next_item . name` (Pattern: MORE_SPECIFIC_IF)"
    },
    {
      "question": "Identify the issue in `if self . doc . send_invite_email : webnotes . msgprint ( \"Sent welcome mail.\" ) self . send_welcome_mail ( self . doc . new_password )` and provide the corrected single-line fix. [ADD_FUNCTION_AROUND_EXPRESSION]"
    },
    {
      "question": "This line is buggy: `if self . name : return`. Provide the correct version only. [MORE_SPECIFIC_IF]"
    },
    {
      "question": "Given the buggy code: `response . headers [ b'X-Accel-Redirect' ] = path`, rewrite it into a correct version. (Bug type: ADD_FUNCTION_AROUND_EXPRESSION)"
    },
    {
      "question": "Identify the issue in `r . image = get_gravatar ( )` and provide the corrected single-line fix. [SAME_FUNCTION_MORE_ARGS]"
    },
    {
      "question": "Fix the following statement so it is correct: `if e . args [ 0 ] == 1054 and getattr ( frappe . local , 'request' ) : frappe . local . _comments = ( getattr ( frappe . local , \"_comments\" , [ ] ) + [ ( reference_doctype , reference_name , _comments ) ] )` (Pattern: SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Fix the following statement so it is correct: `if doctype in frappe . local . meta_cache : del frappe . local . meta_cache [ doctype ]` (Pattern: MORE_SPECIFIC_IF)"
    },
    {
      "question": "Identify the issue in `enqueue ( \"frappe.integrations.doctype.dropbox_settings.dropbox_settings.take_backup_to_dropbox\" , queue = 'long' )` and provide the corrected single-line fix. [SAME_FUNCTION_MORE_ARGS]"
    },
    {
      "question": "Correct the following line while preserving intent: `if not self . get ( 'roles' ) : meta = frappe . get_meta ( self . ref_doctype ) roles = [ { 'role' : d . role } for d in meta . permissions if d . permlevel == 0 ] self . set ( 'roles' , roles )`  (MORE_SPECIFIC_IF)"
    },
    {
      "question": "Fix the following statement so it is correct: `if d . reqd and not d . hidden : d . in_list_view = 1 cnt += 1 if cnt == 4 : break` (Pattern: MORE_SPECIFIC_IF)"
    },
    {
      "question": "Identify the issue in `remote_path = join ( self . remote_path . encode ( 'utf8' ) , relative_path . encode ( 'utf8' ) , f )` and provide the corrected single-line fix. [ADD_METHOD_CALL]"
    },
    {
      "question": "Correct the following line while preserving intent: `i . value = j . data`  (ADD_FUNCTION_AROUND_EXPRESSION)"
    },
    {
      "question": "Produce the corrected version of: `params = { 'url' : url , 'method' : method , 'headers' : headers , 'payload' : payload }`  (family: ADD_FUNCTION_AROUND_EXPRESSION)"
    },
    {
      "question": "This line is buggy: `if len ( self . user_image ) > 2000 : frappe . throw ( _ ( \"Not a valid User Image.\" ) )`. Provide the correct version only. [MORE_SPECIFIC_IF]"
    },
    {
      "question": "Fix the following statement so it is correct: `doc . name = make_autoname ( autoname )` (Pattern: SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Apply the minimal change that makes this line correct: `f . write ( cstr ( self . writer . getvalue ( ) ) )`  (ADD_METHOD_CALL)"
    },
    {
      "question": "Apply the minimal change that makes this line correct: `if not recipients : return`  (MORE_SPECIFIC_IF)"
    },
    {
      "question": "This line is buggy: `if getdate ( self . starts_on ) == getdate ( self . ends_on ) and self . repeat_on == \"Every Day\" : frappe . msgprint ( frappe . _ ( \"Every day events should finish on the same day.\" ) , raise_exception = True )`. Provide the correct version only. [CHANGE_BINARY_OPERATOR]"
    },
    {
      "question": "Replace the buggy snippet with a correct one: `secret = mysql41 . hash ( secret + self . salt )`  [pattern=ADD_METHOD_CALL]"
    },
    {
      "question": "Correct the following line while preserving intent: `if frappe . request : user = frappe . session . user`  (MORE_SPECIFIC_IF)"
    },
    {
      "question": "Identify the issue in `app_messages . sort ( )` and provide the corrected single-line fix. [SAME_FUNCTION_MORE_ARGS]"
    },
    {
      "question": "Fix the error in: `response = Response ( wrap_file ( frappe . local . request . environ , f ) )`. Return only the corrected line. [SAME_FUNCTION_MORE_ARGS]"
    },
    {
      "question": "Correct the following line while preserving intent: `self . assertEquals ( frappe . db . get_value ( \"Custom Field\" , \"User-test_custom_field\" , \"reqd\" ) , None )`  (SINGLE_TOKEN)"
    },
    {
      "question": "Given the buggy code: `\"gender\" : data . get ( \"gender\" ) ,`, rewrite it into a correct version. (Bug type: ADD_METHOD_CALL)"
    },
    {
      "question": "This line is buggy: `with open ( os . path . join ( get_module_path ( \"core\" ) , \"doctype\" , doc . doctype , \"boilerplate\" , template ) , 'r' ) as source : target . write ( source . read ( ) . format ( app_publisher = app_publisher , classname = doc . name . replace ( \" \" , \"\" ) , doctype = doc . name , ** opts ) )`. Provide the correct version only. [ADD_FUNCTION_AROUND_EXPRESSION]"
    },
    {
      "question": "Given the buggy code: `if \"<!-- render-jinja -->\" in context . main_section : context [ \"main_section\" ] = frappe . render_template ( context . main_section , { \"doc\" : self , \"frappe\" : frappe } ) context [ \"no_cache\" ] = 1`, rewrite it into a correct version. (Bug type: MORE_SPECIFIC_IF)"
    },
    {
      "question": "Correct the following line while preserving intent: `extra_arguments = self . setting ( 'AUTH_EXTRA_ARGUMENTS' , { } )`  (ADD_METHOD_CALL)"
    },
    {
      "question": "Produce the corrected version of: `for key , handlers in integration_events : scheduler_events . setdefault ( key , [ ] ) . extend ( handlers )`  (family: ADD_METHOD_CALL)"
    },
    {
      "question": "Given the buggy code: `if not getattr ( frappe . local , 'oauth_server' ) : oauth_validator = OAuthWebRequestValidator ( ) frappe . local . oauth_server = WebApplicationServer ( oauth_validator )`, rewrite it into a correct version. (Bug type: SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Fix the following statement so it is correct: `if fieldtype == \"Int\" and length > 11 : d = type_map . get ( \"Long Int\" )` (Pattern: MORE_SPECIFIC_IF)"
    },
    {
      "question": "Replace the buggy snippet with a correct one: `set_name_by_naming_series ( autoname , doc )`  [pattern=SAME_FUNCTION_LESS_ARGS]"
    },
    {
      "question": "Replace the buggy snippet with a correct one: `set_name_by_naming_series ( autoname , doc )`  [pattern=SAME_FUNCTION_LESS_ARGS]"
    },
    {
      "question": "Replace the buggy snippet with a correct one: `if host_name and not url_contains_port ( host_name ) and port : host_name = host_name + ':' + str ( port )`  [pattern=MORE_SPECIFIC_IF]"
    },
    {
      "question": "Produce the corrected version of: `result = frappe . get_all ( \"File\" , filters = { \"file_url\" : ( \"in\" , files ) } , fields = \"is_private\" )`  (family: ADD_FUNCTION_AROUND_EXPRESSION)"
    },
    {
      "question": "Fix the error in: `if self . extra_data : self . extra_data . update ( extra_data ) else : self . extra_data = extra_data`. Return only the corrected line. [MORE_SPECIFIC_IF]"
    },
    {
      "question": "This line is buggy: `return { 'username' : response [ 'screen_name' ] , 'email' : response . get ( 'email' ) , 'fullname' : fullname , 'first_name' : first_name , 'last_name' : last_name }`. Provide the correct version only. [SAME_FUNCTION_MORE_ARGS]"
    },
    {
      "question": "Given the buggy code: `if response . get ( \"error\" ) : raise GraphAPIError ( response [ \"error\" ] [ \"type\" ] , response [ \"error\" ] [ \"message\" ] )`, rewrite it into a correct version. (Bug type: MORE_SPECIFIC_IF)"
    },
    {
      "question": "Replace the buggy snippet with a correct one: `self . message = \"Unknown Error. Check result.\"`  [pattern=SINGLE_TOKEN]"
    },
    {
      "question": "Identify the issue in `cls . _query ( ) . filter ( cls . id . in_ ( ids_to_delete ) ) . delete ( )` and provide the corrected single-line fix. [SAME_FUNCTION_MORE_ARGS]"
    },
    {
      "question": "Fix the following statement so it is correct: `total_row [ i ] = total_row [ i ] / len ( result )` (Pattern: ADD_FUNCTION_AROUND_EXPRESSION)"
    },
    {
      "question": "Fix the error in: `dprof . save ( )`. Return only the corrected line. [SAME_FUNCTION_MORE_ARGS]"
    },
    {
      "question": "Produce the corrected version of: `if context . title and \"{{\" in context . title : title_template = context . pop ( 'title' ) context . title = frappe . render_template ( title_template , context )`  (family: ADD_FUNCTION_AROUND_EXPRESSION)"
    },
    {
      "question": "Identify the issue in `response . headers [ bytes ( key ) ] = val . encode ( \"utf-8\" )` and provide the corrected single-line fix. [ADD_METHOD_CALL]"
    },
    {
      "question": "Replace the buggy snippet with a correct one: `html = response . get_data ( )`  [pattern=ADD_FUNCTION_AROUND_EXPRESSION]"
    },
    {
      "question": "Identify the issue in `options , args = parser . parse_args ( )` and provide the corrected single-line fix. [SAME_FUNCTION_MORE_ARGS]"
    },
    {
      "question": "Identify the issue in `os . environ [ 'SERVER_NAME' ] = server . address` and provide the corrected single-line fix. [ADD_FUNCTION_AROUND_EXPRESSION]"
    },
    {
      "question": "Replace the buggy snippet with a correct one: `if step . scenario and step . scenario . outlines : return`  [pattern=MORE_SPECIFIC_IF]"
    },
    {
      "question": "Produce the corrected version of: `if name != USERNAME and value and value != getattr ( user , name , value ) : setattr ( user , name , value ) changed = True`  (family: SINGLE_TOKEN)"
    },
    {
      "question": "Fix the following statement so it is correct: `name = self . AUTH_BACKEND . name . upper ( ) + '_AUTH_EXTRA_ARGUMENTS'` (Pattern: ADD_METHOD_CALL)"
    },
    {
      "question": "Replace the buggy snippet with a correct one: `email_account . password = email_account . get_password ( )`  [pattern=SAME_FUNCTION_MORE_ARGS]"
    },
    {
      "question": "Produce the corrected version of: `ret = frappe . get_list ( doctype = dt , fields = fields , filters = filters )`  (family: SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Replace the buggy snippet with a correct one: `if len ( inspect . getargspec ( maybe ) [ 0 ] ) == 1 : ret [ maybe_field ] = _any ( maybe ( ) )`  [pattern=CHANGE_BINARY_OPERATOR]"
    },
    {
      "question": "Given the buggy code: `return key , raw`, rewrite it into a correct version. (Bug type: ADD_FUNCTION_AROUND_EXPRESSION)"
    },
    {
      "question": "Correct the following line while preserving intent: `count = user . received_messages . filter ( read_at__isnull = True ) . count ( )`  (SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Fix the error in: `if ASSOCIATE_BY_MAIL : try : user = User . objects . get ( email = email ) except MultipleObjectsReturned :`. Return only the corrected line. [MORE_SPECIFIC_IF]"
    },
    {
      "question": "This line is buggy: `extension = splitext ( image ) [ - 1 ]`. Provide the correct version only. [ADD_METHOD_CALL]"
    },
    {
      "question": "Identify the issue in `self . image . save ( img_buffer , FORMATS [ extension ] , quality = options . QUALITY )` and provide the corrected single-line fix. [ADD_METHOD_CALL]"
    },
    {
      "question": "Given the buggy code: `else : self . after_smart_detect ( )`, rewrite it into a correct version. (Bug type: SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "This line is buggy: `ret = os . system ( \"%s -u root -p%s %s < %s\" % ( mysql , root_password . replace ( \" \" , \"\\ \" ) , target , source ) )`. Provide the correct version only. [ADD_METHOD_CALL]"
    },
    {
      "question": "Correct the following line while preserving intent: `return unicode ( s )`  (SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Identify the issue in `def to_udpate ( self , d ) : if ( d . fieldtype not in [ 'Section Break' , 'Column Break' , 'HTML' ] ) and ( d . fieldname or d . label ) : return 1` and provide the corrected single-line fix. [SINGLE_TOKEN]"
    },
    {
      "question": "Given the buggy code: `print a`, rewrite it into a correct version. (Bug type: ADD_METHOD_CALL)"
    },
    {
      "question": "Identify the issue in `cv . Resize ( self . image , thumbnail )` and provide the corrected single-line fix. [SAME_FUNCTION_MORE_ARGS]"
    },
    {
      "question": "Fix the following statement so it is correct: `self . trust_root = query . get ( OPENID_PREFIX + 'trust_root' )` (Pattern: SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Fix the error in: `super ( JSONEngine , self ) . __init__ ( )`. Return only the corrected line. [SAME_FUNCTION_MORE_ARGS]"
    },
    {
      "question": "Given the buggy code: `self . testInit = TestInit ( )`, rewrite it into a correct version. (Bug type: SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Produce the corrected version of: `assert index [ 'request' ] . replace ( '_' , '' ) . isalnum ( )`  (family: ADD_METHOD_CALL)"
    },
    {
      "question": "Given the buggy code: `filesInCreated = aCreated . getElementsByTagName ( \"replica\" ) [ 0 ] . getAttribute ( \"files\" )`, rewrite it into a correct version. (Bug type: ADD_FUNCTION_AROUND_EXPRESSION)"
    },
    {
      "question": "Produce the corrected version of: `def SetPriority ( self , idnumber , newpriority ) : found = 0 count = 0 while ( len ( self . elements ) < count or found ) :`  (family: SINGLE_TOKEN)"
    },
    {
      "question": "Produce the corrected version of: `self . cache = ConfigCache . WMConfigCache ( 'testdb2' )`  (family: SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Fix the following statement so it is correct: `msg += '\\n Adding last ten lines of CMSSW stdout:\\n'` (Pattern: SINGLE_TOKEN)"
    },
    {
      "question": "Given the buggy code: `myReport . unpersist ( \"Report.pkl\" )`, rewrite it into a correct version. (Bug type: SINGLE_TOKEN)"
    },
    {
      "question": "Given the buggy code: `helper . setupPerformanceMonitoring ( self , int ( kwargs [ \"maxRSS\" ] ) , int ( kwargs [ \"maxVSize\" ] ) )`, rewrite it into a correct version. (Bug type: SAME_FUNCTION_LESS_ARGS)"
    },
    {
      "question": "Apply the minimal change that makes this line correct: `traceback = False ) obj = factory . loadObject ( component . object , component )`  (SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Given the buggy code: `if arguments . get ( \"IncludeParents\" , False ) : if inputdataset == None : msg = \"Validation failed: IncludeParent flag is True but there is no inputdataset\" raise WMSpecFactoryException ( msg )`, rewrite it into a correct version. (Bug type: ADD_FUNCTION_AROUND_EXPRESSION)"
    },
    {
      "question": "Identify the issue in `if self . multicore : taskType = \"MultiProcessing\"` and provide the corrected single-line fix. [MORE_SPECIFIC_IF]"
    },
    {
      "question": "Fix the following statement so it is correct: `recvline . HistoricRecvLine . __init__ ( self , namespace )` (Pattern: SAME_FUNCTION_LESS_ARGS)"
    },
    {
      "question": "Given the buggy code: `self . previousJobCount = math . ceil ( ( self . firstEvent - 1 ) / self . eventsPerJob )`, rewrite it into a correct version. (Bug type: ADD_FUNCTION_AROUND_EXPRESSION)"
    },
    {
      "question": "Apply the minimal change that makes this line correct: `timeleft = none`  (SINGLE_TOKEN)"
    },
    {
      "question": "Produce the corrected version of: `self . changeState . propagate ( cooloffJobs , '%scooloff' % ( jobType ) , '%sfailed' % ( jobType ) )`  (family: SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Produce the corrected version of: `file = File ( lfn = dbsResult [ \"LogicalFileName\" ] , size = dbsResult [ \"FileSize\" ] , events = dbsResult [ \"NumberOfEvents\" ] , locations = blockLocations [ blockName ] )`  (family: SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Correct the following line while preserving intent: `fileBlockName , details = None ,`  (SINGLE_TOKEN)"
    },
    {
      "question": "Identify the issue in `return sorted ( results , key = lambda x : x [ 2 ] )` and provide the corrected single-line fix. [SAME_FUNCTION_MORE_ARGS]"
    },
    {
      "question": "Identify the issue in `UnicodeDecodeError : self . privmsg ( NICKSERV , nickname , 'Your nickname cannot be decoded. Please use ASCII or UTF-8.' )` and provide the corrected single-line fix. [ADD_FUNCTION_AROUND_EXPRESSION]"
    },
    {
      "question": "Produce the corrected version of: `if len ( child_slugs ) != set ( child_slugs ) : raise CommandError , \"You can only specify each child placekind once, since each child can only have one parent\"`  (family: ADD_FUNCTION_AROUND_EXPRESSION)"
    },
    {
      "question": "Fix the error in: `\"\" % ( sys . argv [ 0 ] , DEFAULT_IFACE , DEFAULT_PCAP_DIR , DEFAULT_PING_TIMOUT )`. Return only the corrected line. [ADD_FUNCTION_AROUND_EXPRESSION]"
    },
    {
      "question": "Correct the following line while preserving intent: `def __init__ ( self , num_users = None , usernames = None , download_keys = True , download_keys_dir = None ) : if usernames : usernames = [ user . strip ( ) for user in usernames . split ( ',' ) ]`  (SINGLE_TOKEN)"
    },
    {
      "question": "Given the buggy code: `return StarClusterConfig ( config_file , cache )`, rewrite it into a correct version. (Bug type: ADD_METHOD_CALL)"
    },
    {
      "question": "This line is buggy: `files = find_py_files ( src )`. Provide the correct version only. [ADD_FUNCTION_AROUND_EXPRESSION]"
    },
    {
      "question": "Produce the corrected version of: `args , kwargs = utils . get_arg_spec ( klass . __init__ )`  (family: SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Identify the issue in `if os . path . isfile ( '/sbin/initctl' ) : run_command ( 'mv /sbin/initctl /sbin/initctl.bak' ) run_command ( 'ln -s /bin/true /sbin/initctl' )` and provide the corrected single-line fix. [MORE_SPECIFIC_IF]"
    },
    {
      "question": "Correct the following line while preserving intent: `producer = _PullToPush ( producer )`  (SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Correct the following line while preserving intent: `if entry . matchesHost ( hostname ) : if entry . matchesKey ( key ) : return True else :`  (MORE_SPECIFIC_IF)"
    },
    {
      "question": "Correct the following line while preserving intent: `makedirs ( dirname )`  (SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Fix the following statement so it is correct: `context [ 'positions' ] = sorted ( context [ 'positions' ] , key = key_position_sort_last_name , )` (Pattern: ADD_METHOD_CALL)"
    },
    {
      "question": "This line is buggy: `ImportError : def ipy_shell ( ) : log . error ( \"Unable to load IPython.\" )`. Provide the correct version only. [SAME_FUNCTION_MORE_ARGS]"
    },
    {
      "question": "Correct the following line while preserving intent: `def __init__ ( self , maxval = 100 , widgets = default_widgets , term_width = None , fd = sys . stderr , force_update = False ) : assert maxval > 0 self . maxval = maxval`  (SINGLE_TOKEN)"
    },
    {
      "question": "Produce the corrected version of: `def __init__ ( self , interval = 60 , max_nodes = 5 , wait_time = 900 , add_pi = 1 , kill_after = 45 , stab = 180 , lookback_win = 3 , min_nodes = 1 , allow_master_kill = False , plot_stats = False , plot_output_dir = None , dump_stats = False , stats_file = None ) :`  (family: SINGLE_TOKEN)"
    },
    {
      "question": "Given the buggy code: `for name , ip in node_names : name_ip = \"%s,%s\" % ( name , ip ) khosts . append ( ' ' . join ( [ name_ip , server_pkey . get_name ( ) , base64 . b64encode ( str ( server_pkey ) ) ] ) )`, rewrite it into a correct version. (Bug type: ADD_METHOD_CALL)"
    },
    {
      "question": "Produce the corrected version of: `print render_to_string ( template_path , { } , request_context )`  (family: ADD_METHOD_CALL)"
    },
    {
      "question": "Correct the following line while preserving intent: `context [ 'positions' ] = sorted ( context [ 'positions' ] , key = key_position_sort_last_name , )`  (ADD_METHOD_CALL)"
    },
    {
      "question": "Fix the following statement so it is correct: `print render_to_string ( template_path , { } , request_context )` (Pattern: ADD_METHOD_CALL)"
    },
    {
      "question": "Correct the following line while preserving intent: `if isinstance ( field . help_text , basestring ) : help_text = _ ( field . help_text ) else : help_text = field . help_text`  (MORE_SPECIFIC_IF)"
    },
    {
      "question": "Given the buggy code: `if description != '' : str_version += \"ver.property('description','\" + re . sub ( '[^A-Za-z0-9_\\\\\\/\\'\":. ]' , '' , description ) + \"');\"`, rewrite it into a correct version. (Bug type: MORE_SPECIFIC_IF)"
    },
    {
      "question": "Correct the following line while preserving intent: `if count_imported_EPVs == 0 : report [ 'message' ] = 'Nothing to be synced to Graph!'`  (MORE_SPECIFIC_IF)"
    },
    {
      "question": "Fix the error in: `if isinstance ( field . help_text , basestring ) : help_text = _ ( field . help_text ) else : help_text = field . help_text`. Return only the corrected line. [MORE_SPECIFIC_IF]"
    },
    {
      "question": "Replace the buggy snippet with a correct one: `self . log_call ( fetch_cmd )`  [pattern=SAME_FUNCTION_MORE_ARGS]"
    },
    {
      "question": "This line is buggy: `r = guess ( [ 1 , 2 , 7 , 42 , 429 , 7436 , 218348 , 10850216 ] )`. Provide the correct version only. [SAME_FUNCTION_MORE_ARGS]"
    },
    {
      "question": "Given the buggy code: `with open ( 'setup.py' , 'rb' ) as f : imp . load_module ( 'setup' , f , 'setup.py' , ( '.py' , 'r' , imp . PY_SOURCE ) )`, rewrite it into a correct version. (Bug type: ADD_FUNCTION_AROUND_EXPRESSION)"
    },
    {
      "question": "This line is buggy: `self . device_index = 0`. Provide the correct version only. [SINGLE_TOKEN]"
    },
    {
      "question": "Identify the issue in `for _ in range ( self . history . maxlen / 2 ) : self . history . popleft ( )` and provide the corrected single-line fix. [ADD_FUNCTION_AROUND_EXPRESSION]"
    },
    {
      "question": "Correct the following line while preserving intent: `for _ in range ( self . history . maxlen / 2 ) : self . history . popleft ( ) else :`  (CHANGE_BINARY_OPERATOR)"
    },
    {
      "question": "Apply the minimal change that makes this line correct: `node_response = self . create_node ( alias , image_id = image_id , instance_type = type , count = count , zone = zone )`  (SAME_FUNCTION_LESS_ARGS)"
    },
    {
      "question": "Fix the error in: `newsel . insert ( seedname )`. Return only the corrected line. [SAME_FUNCTION_MORE_ARGS]"
    },
    {
      "question": "Replace the buggy snippet with a correct one: `if not self . Stddev == - 1 or not self . Crop == - 1 or not self . Down == 1 : finalname += \".mrc\" else : finalname += extension`  [pattern=MORE_SPECIFIC_IF]"
    },
    {
      "question": "Correct the following line while preserving intent: `summary . append ( \"Number of families: \" + Nfamilies )`  (ADD_FUNCTION_AROUND_EXPRESSION)"
    },
    {
      "question": "Correct the following line while preserving intent: `return unittest . defaultTestLoader . discover ( join ( 'tests' , path ) , top_level_dir = pw . HOME )`  (SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Fix the following statement so it is correct: `return unittest . defaultTestLoader . discover ( join ( 'tests' , path ) , top_level_dir = pw . HOME )` (Pattern: SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Apply the minimal change that makes this line correct: `runParticlePicker ( obj . getMicrographs ( ) . getFileName ( ) , obj . getFileName ( ) , extraParams = 'readonly' )`  (ADD_FUNCTION_AROUND_EXPRESSION)"
    },
    {
      "question": "Fix the following statement so it is correct: `protML3D = XmippProtML3D ( angularSampling = 15 , numberOfIterations = 2 , runMode = 1 )` (Pattern: SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Correct the following line while preserving intent: `parent_id = self . insertParallelStep ( 'createDir' , verifyfiles = [ micrographDir ] , path = micrographDir )`  (SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Replace the buggy snippet with a correct one: `self . setVarValue ( \"DoFlip\" , md . containsLabel ( MDL_CTFMODEL ) )`  [pattern=ADD_FUNCTION_AROUND_EXPRESSION]"
    },
    {
      "question": "Given the buggy code: `if self . DoCorrectAmplitudes and not exists ( self . InCtfDatFile ) : errors . append ( \"Missing '%s' file for correcting amplitudes\" % self . InCtfDatFile )`, rewrite it into a correct version. (Bug type: MORE_SPECIFIC_IF)"
    },
    {
      "question": "Replace the buggy snippet with a correct one: `runShowJ ( fn )`  [pattern=SAME_FUNCTION_MORE_ARGS]"
    },
    {
      "question": "Identify the issue in `dirName = nameDir [ 1 : 2 ]` and provide the corrected single-line fix. [ADD_FUNCTION_AROUND_EXPRESSION]"
    },
    {
      "question": "Fix the following statement so it is correct: `if expr . subs ( tmp ) < 0 : expr *= - 1 rhs *= - 1` (Pattern: MORE_SPECIFIC_IF)"
    },
    {
      "question": "Apply the minimal change that makes this line correct: `if not os . path . exists ( self . getFilename ( 'svm' ) ) and os . path . exists ( self . ExtraDir ) : deleteDir ( self . ExtraDir )`  (SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Given the buggy code: `d = inputFile`, rewrite it into a correct version. (Bug type: ADD_FUNCTION_AROUND_EXPRESSION)"
    },
    {
      "question": "Replace the buggy snippet with a correct one: `while len ( d ) > 0 : d = dirname ( d ) ai = join ( d , ACQUISITION_INFO ) if exists ( ai ) :`  [pattern=MORE_SPECIFIC_IF]"
    },
    {
      "question": "Identify the issue in `MDout . setValue ( MDL_ENABLED , True , id )` and provide the corrected single-line fix. [SINGLE_TOKEN]"
    },
    {
      "question": "Identify the issue in `args + \" --centerPDB\"` and provide the corrected single-line fix. [CHANGE_BINARY_OPERATOR]"
    },
    {
      "question": "Given the buggy code: `os . system ( \"vmd -e %s\" % self . extraPath ( \"animations/animated_mode_%03d.vmd\" % self . DisplaySingleMode ) )`, rewrite it into a correct version. (Bug type: ADD_FUNCTION_AROUND_EXPRESSION)"
    },
    {
      "question": "Fix the error in: `validateInputSize ( references , self . ImgMd , errors )`. Return only the corrected line. [SAME_FUNCTION_MORE_ARGS]"
    },
    {
      "question": "Identify the issue in `writeSetOfClasses2D ( obj , fn , self . _getTmpPath ( ) )` and provide the corrected single-line fix. [SAME_FUNCTION_LESS_ARGS]"
    },
    {
      "question": "Apply the minimal change that makes this line correct: `args [ '--ref' ] = self . referenceVolume . get ( )`  (ADD_METHOD_CALL)"
    },
    {
      "question": "Replace the buggy snippet with a correct one: `XmippProtResize . _defineProcessParams ( form )`  [pattern=SAME_FUNCTION_MORE_ARGS]"
    },
    {
      "question": "Correct the following line while preserving intent: `return self . getError ( ) . get ( )`  (SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Replace the buggy snippet with a correct one: `cleanPath ( )`  [pattern=SAME_FUNCTION_MORE_ARGS]"
    },
    {
      "question": "Fix the error in: `particles . append ( par )`. Return only the corrected line. [ADD_METHOD_CALL]"
    },
    {
      "question": "Replace the buggy snippet with a correct one: `state_id = exp_services . convert_state_name_to_id ( state_name )`  [pattern=SAME_FUNCTION_MORE_ARGS]"
    },
    {
      "question": "Fix the following statement so it is correct: `key = _FakeUser ( user = u ) . put ( )` (Pattern: SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Fix the error in: `params2 = self . _setParams3DR ( iter )`. Return only the corrected line. [SAME_FUNCTION_MORE_ARGS]"
    },
    {
      "question": "Fix the following statement so it is correct: `if iter != 1 : copyFile ( volFn , iterVol ) else : self . _splitParFile ( iter , ref , cpusRef [ ref - 1 ] )` (Pattern: CHANGE_BINARY_OPERATOR)"
    },
    {
      "question": "Identify the issue in `if block == 1 : self . _enterDir ( iterDir )` and provide the corrected single-line fix. [MORE_SPECIFIC_IF]"
    },
    {
      "question": "Correct the following line while preserving intent: `if className != 'EMObject' : parent = createClassNode ( classObj . __bases__ [ 0 ] ) parent . addChild ( classNode )`  (MORE_SPECIFIC_IF)"
    },
    {
      "question": "Given the buggy code: `createLink ( )`, rewrite it into a correct version. (Bug type: SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Fix the following statement so it is correct: `return encode_for_xml ( str ( value ) )` (Pattern: SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Fix the error in: `languages . append ( value )`. Return only the corrected line. [ADD_METHOD_CALL]"
    },
    {
      "question": "This line is buggy: `text = '\\n\\n' . join ( [ subject , message ] ) ) except SparkApiError as e : abort ( 409 )`. Provide the correct version only. [SAME_FUNCTION_MORE_ARGS]"
    },
    {
      "question": "Replace the buggy snippet with a correct one: `ret = esi_calls . location_online ( char_id , access_token )`  [pattern=SAME_FUNCTION_MORE_ARGS]"
    },
    {
      "question": "Replace the buggy snippet with a correct one: `if len ( ids_list ) < 0 : return ret`  [pattern=CHANGE_BINARY_OPERATOR]"
    },
    {
      "question": "Fix the following statement so it is correct: `metadata [ 'language' ] = dict ( LiteratureForm . languages ) . get ( metadata [ 'language' ] )` (Pattern: ADD_FUNCTION_AROUND_EXPRESSION)"
    },
    {
      "question": "This line is buggy: `obj . set_error_message ( str ( err ) , msg )`. Provide the correct version only. [SAME_FUNCTION_LESS_ARGS]"
    },
    {
      "question": "Identify the issue in `trajectory_point . time_from_start = PAN_TILT_TIME` and provide the corrected single-line fix. [ADD_FUNCTION_AROUND_EXPRESSION]"
    },
    {
      "question": "Given the buggy code: `LOGGER . info ( 'Hash unchanged: not pushing #{} as not a meaningful update' )`, rewrite it into a correct version. (Bug type: ADD_METHOD_CALL)"
    },
    {
      "question": "Replace the buggy snippet with a correct one: `search_by_curated_author = LiteratureSearch ( ) . query ( 'nested' , path = 'authors' , query = query ) . params ( _source = [ 'control_number' ] )`  [pattern=SAME_FUNCTION_MORE_ARGS]"
    },
    {
      "question": "Identify the issue in `merged , conflicts = merge ( head = head , root = root , update = update )` and provide the corrected single-line fix. [ADD_METHOD_CALL]"
    },
    {
      "question": "This line is buggy: `safe_make_dir ( 'alignments/{sample}_{readid}' . format ( sample = sample_id ) )`. Provide the correct version only. [SAME_FUNCTION_MORE_ARGS]"
    },
    {
      "question": "Identify the issue in `output = 'coverage/all.multicov.txt' ) . follows ( index_sort_bam_picard )` and provide the corrected single-line fix. [SINGLE_TOKEN]"
    },
    {
      "question": "Fix the error in: `if ( self . article . current_revision . deleted == 0 ) : self . previous_revision = self . article . current_revision`. Return only the corrected line. [MORE_SPECIFIC_IF]"
    },
    {
      "question": "Fix the error in: `self . critic_optimizer_fn = Nonea`. Return only the corrected line. [SINGLE_TOKEN]"
    },
    {
      "question": "Correct the following line while preserving intent: `output_folder = os . path . join ( 'output-artifacts' , commit_id )`  (SAME_FUNCTION_LESS_ARGS)"
    },
    {
      "question": "Fix the error in: `self . batch_size = tf . placeholder ( tf . int32 )`. Return only the corrected line. [SAME_FUNCTION_MORE_ARGS]"
    },
    {
      "question": "Replace the buggy snippet with a correct one: `env_build . configure ( args = args )`  [pattern=SAME_FUNCTION_MORE_ARGS]"
    },
    {
      "question": "Identify the issue in `return await random . choice ( messages )` and provide the corrected single-line fix. [ADD_FUNCTION_AROUND_EXPRESSION]"
    },
    {
      "question": "Identify the issue in `instructor_result = evaluator ( instructor_variables , dict ( ) , self . correct_answer )` and provide the corrected single-line fix. [SAME_FUNCTION_MORE_ARGS]"
    },
    {
      "question": "Apply the minimal change that makes this line correct: `scores . append ( Score ( int ( correct ) , total , float ( p . get ( \"weight\" , 1 ) ) , graded , p . get ( \"name\" ) ) )`  (SINGLE_TOKEN)"
    },
    {
      "question": "Identify the issue in `run_stage ( 'apply_snpeff' , snpeff_command )` and provide the corrected single-line fix. [SAME_FUNCTION_MORE_ARGS]"
    },
    {
      "question": "Fix the error in: `module . get_html = replace_static_urls ( wrap_xmodule ( module . get_html , module , \"xmodule_display.html\" ) , module . metadata [ 'data_dir' ] )`. Return only the corrected line. [SAME_FUNCTION_MORE_ARGS]"
    },
    {
      "question": "Produce the corrected version of: `def updatable_attribtes ( self ) : return extract ( self . attributes , self . updatable_fields )`  (family: SINGLE_TOKEN)"
    },
    {
      "question": "Given the buggy code: `return candidates`, rewrite it into a correct version. (Bug type: ADD_FUNCTION_AROUND_EXPRESSION)"
    },
    {
      "question": "Produce the corrected version of: `module . get_html = add_histogram ( module . get_html )`  (family: SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "This line is buggy: `module . get_html = add_histogram ( module . get_html )`. Provide the correct version only. [SAME_FUNCTION_MORE_ARGS]"
    },
    {
      "question": "Correct the following line while preserving intent: `module . get_html = add_histogram ( module . get_html )`  (SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "This line is buggy: `if osfs . exists ( filename ) : filepath = filename`. Provide the correct version only. [MORE_SPECIFIC_IF]"
    },
    {
      "question": "Apply the minimal change that makes this line correct: `xm = x_module . XModule ( i4xs , 'a://b/c/d/e' , { } )`  (SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Identify the issue in `return _has_access_descriptor ( user , course , action )` and provide the corrected single-line fix. [SINGLE_TOKEN]"
    },
    {
      "question": "Given the buggy code: `return 'staff_%s' & loc . course_id`, rewrite it into a correct version. (Bug type: CHANGE_BINARY_OPERATOR)"
    },
    {
      "question": "Produce the corrected version of: `if vol >= 0 or vol <= 1 : settings [ \"VOLUME\" ] = vol await ( client . send_message ( message . channel , \"\\`Volume set. Next track will have the desired volume.\\`\" ) )`  (family: CHANGE_BINARY_OPERATOR)"
    },
    {
      "question": "This line is buggy: `with open ( qlist , \"r\" ) as f : qlist = f . readlines ( )`. Provide the correct version only. [SAME_FUNCTION_MORE_ARGS]"
    },
    {
      "question": "This line is buggy: `result = convertToModel ( json )`. Provide the correct version only. [SAME_FUNCTION_MORE_ARGS]"
    },
    {
      "question": "Produce the corrected version of: `textbooks . append ( )`  (family: SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Fix the following statement so it is correct: `textbooks . append ( )` (Pattern: SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Produce the corrected version of: `resp = self . client . get ( reverse ( 'jump_to' , kwargs = { 'course_id' : course_id , 'location' : descriptor . location . url ( ) } ) )`  (family: SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Replace the buggy snippet with a correct one: `html = '<div id=\"problem_{id}\" class=\"problem\" data-url=\"{ajax_url}\">' . format ( id = self . item_id ) + html + \"</div>\"`  [pattern=SAME_FUNCTION_MORE_ARGS]"
    },
    {
      "question": "This line is buggy: `station_id = api . get_station ( \"%s Radio\" % artist [ 0 ] , artist_id = artist [ 'artistId' ] )`. Provide the correct version only. [SINGLE_TOKEN]"
    },
    {
      "question": "Correct the following line while preserving intent: `root . rmtree ( )`  (SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Apply the minimal change that makes this line correct: `descriptor = Mock ( weight = \"1\" )`  (SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "This line is buggy: `print ( \"Data provided: \\n\" + str ( job_data , 'UTF-8' ) )`. Provide the correct version only. [SAME_FUNCTION_LESS_ARGS]"
    },
    {
      "question": "Fix the following statement so it is correct: `job_data = req . stream` (Pattern: ADD_METHOD_CALL)"
    },
    {
      "question": "This line is buggy: `print ( candidates [ 0 ] + \" has least load, sending request here!\" )`. Provide the correct version only. [ADD_FUNCTION_AROUND_EXPRESSION]"
    },
    {
      "question": "Apply the minimal change that makes this line correct: `with urlopen ( worker_url , job_data ) as response : html = response . read ( )`  (ADD_FUNCTION_AROUND_EXPRESSION)"
    },
    {
      "question": "This line is buggy: `with urlopen ( worker_url , urlencode ( job_data ) ) as response : html = response . read ( )`. Provide the correct version only. [ADD_FUNCTION_AROUND_EXPRESSION]"
    },
    {
      "question": "Replace the buggy snippet with a correct one: `m = pat . match ( stderr . strip ( ) )`  [pattern=ADD_METHOD_CALL]"
    },
    {
      "question": "This line is buggy: `response = HttpResponse ( json . dumps ( response_payload ) )`. Provide the correct version only. [SAME_FUNCTION_MORE_ARGS]"
    },
    {
      "question": "Produce the corrected version of: `section_data [ 'enrollment_count' ] = CourseEnrollment . objects . filter ( course_id = course_id ) . count ( )`  (family: SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Identify the issue in `descriptors = modulestore ( ) . get_items ( loc )` and provide the corrected single-line fix. [SAME_FUNCTION_MORE_ARGS]"
    },
    {
      "question": "Produce the corrected version of: `tab [ 'name' ] = metadata . get ( 'display_name' )`  (family: ADD_FUNCTION_AROUND_EXPRESSION)"
    },
    {
      "question": "Apply the minimal change that makes this line correct: `open ( \"file\" , \"w\" ) . close ( )`  (SINGLE_TOKEN)"
    },
    {
      "question": "Fix the following statement so it is correct: `ta . readFile ( )` (Pattern: SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Replace the buggy snippet with a correct one: `wizardHelperSetDownsampling ( self , var , None , None , downsample , md = MD )`  [pattern=SINGLE_TOKEN]"
    },
    {
      "question": "This line is buggy: `else : assoc = associations . pop ( handle )`. Provide the correct version only. [SAME_FUNCTION_MORE_ARGS]"
    },
    {
      "question": "Given the buggy code: `def test_success_downloading_chinise_transcripts ( self ) : good_youtube_subs = { 1.0 : 'j_jEn79vS3g' , }`, rewrite it into a correct version. (Bug type: SINGLE_TOKEN)"
    },
    {
      "question": "This line is buggy: `params = { 'student_id' : student_id , 'course_id' : course_id , 'user_is_staff' : user_is_staff , 'last_time_viewed' : last_time_viewed , }`. Provide the correct version only. [ADD_METHOD_CALL]"
    },
    {
      "question": "Given the buggy code: `role , __ = Role . objects . get_or_create ( course_id = course_id , name = \"Student\" )`, rewrite it into a correct version. (Bug type: SINGLE_TOKEN)"
    },
    {
      "question": "Identify the issue in `passs` and provide the corrected single-line fix. [SINGLE_TOKEN]"
    },
    {
      "question": "Identify the issue in `passs` and provide the corrected single-line fix. [SINGLE_TOKEN]"
    },
    {
      "question": "Apply the minimal change that makes this line correct: `def get_set_fields_by_scope ( self , scope = Scope . content ) :`  (SINGLE_TOKEN)"
    },
    {
      "question": "Given the buggy code: `params = PartialDictMatcher ( { \"course_id\" : self . course . id , \"page\" : params . get ( \"page\" , 1 ) , \"per_page\" : views . THREADS_PER_PAGE } ) ,`, rewrite it into a correct version. (Bug type: ADD_METHOD_CALL)"
    },
    {
      "question": "Given the buggy code: `retrieve_params = self . default_retrieve_params`, rewrite it into a correct version. (Bug type: ADD_METHOD_CALL)"
    },
    {
      "question": "Correct the following line while preserving intent: `if \"audio\" in fileMimeType or \"video\" in fileMimeType : tagParams = \"url=\\\"{0}\\\" type=\\\"{1}\\\" length=\\\"{2}\\\"\" . format ( fileURL , fileMimeType , os . path . getsize ( fname ) ) enclosure = { \"name\" : \"enclosure\" , \"value\" : None , \"params\" : tagParams } else :`  (MORE_SPECIFIC_IF)"
    },
    {
      "question": "Given the buggy code: `return len ( filter ( lambda x : x . status == st , client . servers . list ( search_opts = { 'all_tenants' : 1 } ) ) )`, rewrite it into a correct version. (Bug type: SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Fix the error in: `finally : shutil . rmtree ( tmp_dir )`. Return only the corrected line. [SAME_FUNCTION_MORE_ARGS]"
    },
    {
      "question": "Fix the following statement so it is correct: `rot = rot [ 0 ] [ : ] + ( rot [ 1 ] , )` (Pattern: ADD_METHOD_CALL)"
    },
    {
      "question": "Produce the corrected version of: `Nflare = np . floor ( ( len ( p ) / 3.0 ) )`  (family: ADD_FUNCTION_AROUND_EXPRESSION)"
    },
    {
      "question": "Fix the following statement so it is correct: `mount_result = sh . mount ( \"mount\" , \"-t\" , \"auto\" , \"{}\" . format ( partition ) , \"{}\" . format ( inspect_path ) )` (Pattern: SAME_FUNCTION_LESS_ARGS)"
    },
    {
      "question": "Fix the following statement so it is correct: `if doUnhidePolygons == False : bpy . ops . mesh . reveal ( ) doUnhidePolygons = True` (Pattern: CHANGE_BINARY_OPERATOR)"
    },
    {
      "question": "Given the buggy code: `if context . active_object . type in { 'MESH' , 'LATTICE' , 'CURVE' , 'SURFACE' } : return context . active_object . type`, rewrite it into a correct version. (Bug type: MORE_SPECIFIC_IF)"
    },
    {
      "question": "Fix the error in: `childStems = branches [ n + 1 ] * ( 1.0 - 0.5 * p . offset / p . lengthPar )`. Return only the corrected line. [ADD_FUNCTION_AROUND_EXPRESSION]"
    },
    {
      "question": "Given the buggy code: `if code != http . client . OK and content : self . send_header ( \"Content-type\" , content )`, rewrite it into a correct version. (Bug type: CHANGE_BINARY_OPERATOR)"
    },
    {
      "question": "Identify the issue in `return jsonify ( { \"movies\" : return_movies  )` and provide the corrected single-line fix. [SINGLE_TOKEN]"
    },
    {
      "question": "Produce the corrected version of: `if tweet . id not in seen_ids : seen_ids [ str ( tweet . id ) ] = 1 dict_tweets . append ( tweet . AsDict ( ) )`  (family: ADD_FUNCTION_AROUND_EXPRESSION)"
    },
    {
      "question": "Correct the following line while preserving intent: `return _deploy_contracts ( project , chain , web3 , chain_data , deploy_address )`  (SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Fix the error in: `self . assertEqual ( pywikibot . Link ( \"foo\" , source = mysite ) , u\"[[Foo]]\" )`. Return only the corrected line. [ADD_FUNCTION_AROUND_EXPRESSION]"
    },
    {
      "question": "Identify the issue in `s = tag . find ( 'url = ' , )` and provide the corrected single-line fix. [SAME_FUNCTION_MORE_ARGS]"
    },
    {
      "question": "Given the buggy code: `site . login ( )`, rewrite it into a correct version. (Bug type: SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Fix the error in: `return \"%s/\" % self . path ( self , code )`. Return only the corrected line. [SAME_FUNCTION_LESS_ARGS]"
    },
    {
      "question": "Fix the following statement so it is correct: `if sys . version_info [ 0 ] < 3 : helpText = helpText . decode ( 'utf-8' )` (Pattern: MORE_SPECIFIC_IF)"
    },
    {
      "question": "Correct the following line while preserving intent: `self . assertEqual ( len ( links ) , count )`  (ADD_FUNCTION_AROUND_EXPRESSION)"
    },
    {
      "question": "Produce the corrected version of: `db . alter_column ( 'rsr_budgetitem' , 'label_id' , self . gf ( 'django.db.models.fields.related.ForeignKey' ) ( default = '' , to = orm [ 'rsr.BudgetItemLabel' ] ) )`  (family: SINGLE_TOKEN)"
    },
    {
      "question": "Produce the corrected version of: `if model_instance . id and model_instance . id < getattr ( settings , 'OLD_PROJECT_MAX_ID' , 0 ) : self . validators = [ v for v in self . validators if type ( v ) != MaxLengthValidator ]`  (family: CHANGE_BINARY_OPERATOR)"
    },
    {
      "question": "Apply the minimal change that makes this line correct: `def global_project_organisation_map_json ( request , org_id ) : \"Should be replaced with API calls when the API is ready.\" locations = [ ] organisation = Organisation . objects . get ( id = org_id )`  (SINGLE_TOKEN)"
    },
    {
      "question": "Replace the buggy snippet with a correct one: `if sys . stdin . isatty ( ) : import subprocess python = sys . executable python = python . replace ( \"pythonw.exe\" , \"python.exe\" )`  [pattern=MORE_SPECIFIC_IF]"
    },
    {
      "question": "Fix the following statement so it is correct: `edit_summary = pywikibot . translate ( pywikibot . Site ( ) , fix [ 'msg' ] )` (Pattern: SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Fix the following statement so it is correct: `return '%s(\"%s\",%d bytes)' % ( self . __class__ . __name__ , self . title , len ( self . content ) )` (Pattern: ADD_METHOD_CALL)"
    },
    {
      "question": "Fix the following statement so it is correct: `date = get_module_mtime ( pywikibot )` (Pattern: ADD_METHOD_CALL)"
    },
    {
      "question": "Produce the corrected version of: `if rest [ : length ] > start and rest [ : length ] <= end : result += rest [ : length ] + '-' rest = rest [ length : ] break`  (family: CHANGE_BINARY_OPERATOR)"
    },
    {
      "question": "Given the buggy code: `if not hasattr ( self , lastNo ) : self . _lastNo = 1`, rewrite it into a correct version. (Bug type: SINGLE_TOKEN)"
    },
    {
      "question": "This line is buggy: `if force : del self . _userprops`. Provide the correct version only. [MORE_SPECIFIC_IF]"
    },
    {
      "question": "Correct the following line while preserving intent: `msg = u'Working on %r' % page`  (ADD_METHOD_CALL)"
    },
    {
      "question": "Fix the error in: `if not bones_in_frame ( f , rig , * args ) : continue`. Return only the corrected line. [MORE_SPECIFIC_IF]"
    },
    {
      "question": "Fix the error in: `if token . startswith ( b'-' ) : if curr_token : map_options [ curr_token [ 0 ] ] = curr_token [ 1 : ] curr_token [ : ] = [ ]`. Return only the corrected line. [MORE_SPECIFIC_IF]"
    },
    {
      "question": "Produce the corrected version of: `extract_sequences ( rank = rank , taxon = taxon , samples = samples )`  (family: SAME_FUNCTION_LESS_ARGS)"
    },
    {
      "question": "Replace the buggy snippet with a correct one: `print ( file . split ( \".\" ) [ : - 1 ] )`  [pattern=ADD_FUNCTION_AROUND_EXPRESSION]"
    },
    {
      "question": "Produce the corrected version of: `metadata . to_csv ( \"metadata.csv\" )`  (family: ADD_FUNCTION_AROUND_EXPRESSION)"
    },
    {
      "question": "Given the buggy code: `df = pd . read_table ( metadata_file , header = 0 )`, rewrite it into a correct version. (Bug type: SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Identify the issue in `def test_ASCII_comatible ( self ) : \"\"\"Test that repr returns ASCII compatible bytes in Python 2.\"\"\" page = pywikibot . Page ( self . site , 'ä')` and provide the corrected single-line fix. [SINGLE_TOKEN]"
    },
    {
      "question": "Identify the issue in `issue_deprecation_warning ( 'claim without on_item set' , 3 )` and provide the corrected single-line fix. [SAME_FUNCTION_MORE_ARGS]"
    },
    {
      "question": "Produce the corrected version of: `self . assertEqual ( self . site . category_namespaces ( ) , self . site . namespace ( 14 , all = True ) )`  (family: ADD_FUNCTION_AROUND_EXPRESSION)"
    },
    {
      "question": "Given the buggy code: `if http_url [ 4 : ] == https_url [ 5 : ] : urls = [ '(?:https?:)?' + re . escape ( http_url [ 5 : ] ) ]`, rewrite it into a correct version. (Bug type: MORE_SPECIFIC_IF)"
    },
    {
      "question": "Fix the error in: `if num > 0 : output ( color_format ( '{lightblue}Waiting for {num} pages to be put. ' 'Estimated time remaining: {sec}{default}' , num = num , sec = sec ) )`. Return only the corrected line. [MORE_SPECIFIC_IF]"
    },
    {
      "question": "Replace the buggy snippet with a correct one: `if self . limit < self . query_increment : self . request [ self . limit_name ] = self . limit pywikibot . debug ( u\"%s: Set request item limit to %i\" % ( self . __class__ . __name__ , self . limit ) , _logger )`  [pattern=MORE_SPECIFIC_IF]"
    },
    {
      "question": "Correct the following line while preserving intent: `total = None`  (SINGLE_TOKEN)"
    },
    {
      "question": "Fix the error in: `if fam == None : fam = config . family`. Return only the corrected line. [CHANGE_BINARY_OPERATOR]"
    },
    {
      "question": "Apply the minimal change that makes this line correct: `raise \"Bugcheck: finish called before done\"`  (ADD_FUNCTION_AROUND_EXPRESSION)"
    },
    {
      "question": "Fix the following statement so it is correct: `self . delete_1_broken_redirect ( redir_name , delete_reason )` (Pattern: SAME_FUNCTION_LESS_ARGS)"
    },
    {
      "question": "Given the buggy code: `cycles . parse ( mat_state . nodes , con_mesh , vert , frag , geom , tesc , tese , parse_opacity = False , parse_displacement = False )`, rewrite it into a correct version. (Bug type: SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "This line is buggy: `if con . target != None : if con . type == 'COPY_LOCATION' : co [ 'target' ] = con . target . name co [ 'use_x' ] = con . use_x`. Provide the correct version only. [MORE_SPECIFIC_IF]"
    },
    {
      "question": "Identify the issue in `bpy . data . images [ img_name ] . pack ( as_png = True )` and provide the corrected single-line fix. [SAME_FUNCTION_LESS_ARGS]"
    },
    {
      "question": "Correct the following line while preserving intent: `scene_objects = self . scene . collection . all_objects`  (ADD_METHOD_CALL)"
    },
    {
      "question": "Correct the following line while preserving intent: `self . camera_spawned = False`  (SINGLE_TOKEN)"
    },
    {
      "question": "Given the buggy code: `project_name = bpy . data . worlds [ 'Arm' ] . arm_project_name`, rewrite it into a correct version. (Bug type: ADD_FUNCTION_AROUND_EXPRESSION)"
    },
    {
      "question": "Fix the following statement so it is correct: `if link . from_node . type == \"VALUE\" : curshader . add_const ( 'float' , res_var , res ) else : curshader . write ( 'float {0} = {1};' . format ( res_var , res ) )` (Pattern: MORE_SPECIFIC_IF)"
    },
    {
      "question": "Apply the minimal change that makes this line correct: `d [ 'short' ] = ' ' . join ( [ tiers [ i ] [ 0 ] for i in range ( 3 ) if tiers [ i ] [ 0 ] ] )`  (SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Replace the buggy snippet with a correct one: `if set ( dbnames ) < set ( self . current_item . sitelinks . keys ( ) ) : if not self . handle_complicated ( ) : warning ( 'Interwiki conflict in %s, skipping...' % self . current_page . title ( asLink = True ) )`  [pattern=CHANGE_BINARY_OPERATOR]"
    },
    {
      "question": "This line is buggy: `family_text = re . sub ( r'(?msu)^ {8}self.languages_by_size.+?\\]' , text , family_text )`. Provide the correct version only. [SAME_FUNCTION_MORE_ARGS]"
    },
    {
      "question": "Given the buggy code: `def shared_image_repository ( self , code ) : return ( 'repo' , 'wikidata' )`, rewrite it into a correct version. (Bug type: SINGLE_TOKEN)"
    },
    {
      "question": "Fix the error in: `o [ 'count' ] = psettings . count * psettings . arm_count_mult`. Return only the corrected line. [ADD_FUNCTION_AROUND_EXPRESSION]"
    },
    {
      "question": "Apply the minimal change that makes this line correct: `if os . path . exists ( kode_path ) : if arm . utils . get_os ( ) == 'win' : kode_studio_mklink_win ( get_sdk_path ( ) ) args = [ kode_path , arm . utils . get_fp ( ) ]`  (MORE_SPECIFIC_IF)"
    },
    {
      "question": "Given the buggy code: `if tex [ 'source' ] == 'movie' : trait = { } trait [ 'type' ] = 'Script' trait [ 'class_name' ] = 'armory.trait.internal.MovieTexture'`, rewrite it into a correct version. (Bug type: MORE_SPECIFIC_IF)"
    },
    {
      "question": "Fix the following statement so it is correct: `cats = textlib . getCategoryLinks ( text )` (Pattern: SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "This line is buggy: `raise LimitExceeded ( self . limit , self . length )`. Provide the correct version only. [ADD_FUNCTION_AROUND_EXPRESSION]"
    },
    {
      "question": "Identify the issue in `if vector_node . attribute_name == uvlayers [ 1 ] : if def_name not in defs : defs . append ( def_name ) if '_Tex1' not in defs :` and provide the corrected single-line fix. [MORE_SPECIFIC_IF]"
    },
    {
      "question": "Produce the corrected version of: `self . predict_Webnames ( Webnames )`  (family: SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Identify the issue in `r = requests . get ( \"{0}/_cluster/health\" , auth = self . auth )` and provide the corrected single-line fix. [ADD_METHOD_CALL]"
    },
    {
      "question": "Apply the minimal change that makes this line correct: `if child in candidates and set ( child . free_indices ) != set ( node . free_indices ) : candidates . remove ( child )`  (CHANGE_BINARY_OPERATOR)"
    },
    {
      "question": "Fix the following statement so it is correct: `zero = coffee . FlatBlock ( str . format ( \"memset({name}, 0, {size} * sizeof(*{name}));\\n\" , name = funarg . sym . gencode ( ) , size = numpy . product ( shape ) ) )` (Pattern: SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Given the buggy code: `for child in node . children : if child not in seen : seen . add ( child ) lifo . append ( child )`, rewrite it into a correct version. (Bug type: ADD_FUNCTION_AROUND_EXPRESSION)"
    },
    {
      "question": "This line is buggy: `wm = self . win_map ( data )`. Provide the correct version only. [SAME_FUNCTION_MORE_ARGS]"
    },
    {
      "question": "Produce the corrected version of: `ActualLocation . objects . create ( pk = instance . did , location = Point ( 0 , 0 ) )`  (family: SAME_FUNCTION_LESS_ARGS)"
    },
    {
      "question": "Fix the following statement so it is correct: `return Response ( serializer . validated_data , HTTP_200_OK )` (Pattern: SAME_FUNCTION_LESS_ARGS)"
    },
    {
      "question": "Given the buggy code: `def text_sentenceSplitter1 ( self ) : \"\"\"test whether we properly capture text that terminates without a recognized sentence termination\"\"\" sentences = helpers . sentenceSplitter ( self . su3 ) assert len ( sentences ) == 2`, rewrite it into a correct version. (Bug type: SINGLE_TOKEN)"
    },
    {
      "question": "Identify the issue in `l += F . mean_squared_error ( h0 , h1 )` and provide the corrected single-line fix. [SINGLE_TOKEN]"
    },
    {
      "question": "Produce the corrected version of: `y_argmax = F . argmax ( y )`  (family: SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Replace the buggy snippet with a correct one: `for i , img in y_rec : fpath = \"./test_gen/{:05d}\" . format ( i ) cv2 . imwrite ( fpath , img . reshape ( 28 , 28 ) )`  [pattern=ADD_FUNCTION_AROUND_EXPRESSION]"
    },
    {
      "question": "This line is buggy: `inp_name = 'new armory.logicnode.StringNode(this, \"' + str ( inp . default_value ) + '\")'`. Provide the correct version only. [ADD_FUNCTION_AROUND_EXPRESSION]"
    },
    {
      "question": "Given the buggy code: `if rb . enabled : body_mass = rb . mass`, rewrite it into a correct version. (Bug type: MORE_SPECIFIC_IF)"
    },
    {
      "question": "Given the buggy code: `assets . add_shader_pass ( 'water_pass' , 'water_pass' )`, rewrite it into a correct version. (Bug type: SAME_FUNCTION_LESS_ARGS)"
    },
    {
      "question": "Correct the following line while preserving intent: `h = act ( h , w )`  (SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Identify the issue in `for i in h_gen . shape [ 0 ] : if np . random . randint ( 2 ) == 0 : h += ( F . expand_dims ( h [ : , i , : , : ] , axis = 1 ) , ) else :` and provide the corrected single-line fix. [ADD_FUNCTION_AROUND_EXPRESSION]"
    },
    {
      "question": "This line is buggy: `loss_rec = reduce ( lambda x , y : x + y , [ self . recon_loss ( h0 , 1 ) for h0 , h1 in zip ( self . encoder . hiddens , self . decoder . hiddens [ : : - 1 ] ) ] )`. Provide the correct version only. [SINGLE_TOKEN]"
    },
    {
      "question": "Apply the minimal change that makes this line correct: `x_gen = self . generator1 ( h , self . encoder . hiddens , y , test = True )`  (SAME_FUNCTION_LESS_ARGS)"
    },
    {
      "question": "Apply the minimal change that makes this line correct: `return h`  (SINGLE_TOKEN)"
    },
    {
      "question": "Fix the following statement so it is correct: `v_list . append ( )` (Pattern: SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "This line is buggy: `msg = \"Epoch:{},ElapsedTime:{},Acc:{}\" . format ( epoch , time . time ( ) - st , )`. Provide the correct version only. [SAME_FUNCTION_MORE_ARGS]"
    },
    {
      "question": "Apply the minimal change that makes this line correct: `h = F . max_pooling_2d ( h )`  (SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Produce the corrected version of: `pred_eval = cnn_model_003 ( ctx , x_eval )`  (family: SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Replace the buggy snippet with a correct one: `gsc . scale_grad ( nn . get_parameters ( ) )`  [pattern=SAME_FUNCTION_MORE_ARGS]"
    },
    {
      "question": "This line is buggy: `if act == None : return h`. Provide the correct version only. [CHANGE_BINARY_OPERATOR]"
    },
    {
      "question": "Apply the minimal change that makes this line correct: `def cnn_ae_model_000 ( ctx , x , act = F . relu , test = False ) : with nn . parameter_scope ( \"ae\" ) : with nn . context_scope ( ctx ) :`  (SINGLE_TOKEN)"
    },
    {
      "question": "Apply the minimal change that makes this line correct: `return batch_data_x0 , _ , batch_data_y`  (SINGLE_TOKEN)"
    },
    {
      "question": "Produce the corrected version of: `def cnn_model_003_with_cross_attension ( ctx , x_list , act = F . relu , test = False ) : with nn . context_scope ( ctx ) : h0_list = [ ]`  (family: SINGLE_TOKEN)"
    },
    {
      "question": "Produce the corrected version of: `slot = int ( data [ chan ] / 2.55 )`  (family: ADD_FUNCTION_AROUND_EXPRESSION)"
    },
    {
      "question": "Identify the issue in `self . loss = NOne` and provide the corrected single-line fix. [SINGLE_TOKEN]"
    },
    {
      "question": "Replace the buggy snippet with a correct one: `ne_l_loss = self . ne_loss ( y , y_p_l )`  [pattern=SAME_FUNCTION_LESS_ARGS]"
    },
    {
      "question": "Given the buggy code: `def output_file ( filename , title = \"Bokeh Plot\" , autosave = True , js = \"inline\" , css = \"inline\" , rootdir = None ) :`, rewrite it into a correct version. (Bug type: SINGLE_TOKEN)"
    },
    {
      "question": "Fix the error in: `if self . matches ( value , old ) : return`. Return only the corrected line. [MORE_SPECIFIC_IF]"
    },
    {
      "question": "Fix the error in: `kwargs [ \"radius\" ] = kwargs . get ( \"size\" ) / 2`. Return only the corrected line. [SAME_FUNCTION_MORE_ARGS]"
    },
    {
      "question": "This line is buggy: `data = json . loads ( request . body )`. Provide the correct version only. [ADD_METHOD_CALL]"
    },
    {
      "question": "Fix the error in: `timeout = kwargs . pop ( 'timeout' )`. Return only the corrected line. [SAME_FUNCTION_MORE_ARGS]"
    },
    {
      "question": "Fix the following statement so it is correct: `h = self . convunit ( x , mp_filtered )` (Pattern: SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Fix the error in: `z = Array ( Int , [ 1 , 2 , 3 ] )`. Return only the corrected line. [ADD_FUNCTION_AROUND_EXPRESSION]"
    },
    {
      "question": "Identify the issue in `return super ( AutoAutoSummary , self ) . run ( )` and provide the corrected single-line fix. [SAME_FUNCTION_LESS_ARGS]"
    },
    {
      "question": "Fix the error in: `cursor = get_connection ( ) . cursor ( )`. Return only the corrected line. [SAME_FUNCTION_MORE_ARGS]"
    },
    {
      "question": "Correct the following line while preserving intent: `if output_type == \"notebook\" : session . show ( plot , * session_objs ) else :`  (MORE_SPECIFIC_IF)"
    },
    {
      "question": "This line is buggy: `if output_type == \"notebook\" : session . show ( plot , * session_objs ) else :`. Provide the correct version only. [MORE_SPECIFIC_IF]"
    },
    {
      "question": "Fix the error in: `return self . _session_callbacks . values ( )`. Return only the corrected line. [ADD_FUNCTION_AROUND_EXPRESSION]"
    },
    {
      "question": "Apply the minimal change that makes this line correct: `def _remove_periodic_callback ( self , callback ) :`  (SINGLE_TOKEN)"
    },
    {
      "question": "Replace the buggy snippet with a correct one: `p = _subprocess . Popen ( [ command ] + list ( self . version_options ) , stdin = popen_stdin , stdout = _subprocess . PIPE , stderr = _subprocess . PIPE , close_fds = True , shell = False , universal_newlines = True )`  [pattern=SAME_FUNCTION_LESS_ARGS]"
    },
    {
      "question": "Fix the following statement so it is correct: `wc [ line [ 8 : ] ] = int ( line [ : 7 ] ) / words_all` (Pattern: ADD_METHOD_CALL)"
    },
    {
      "question": "Fix the following statement so it is correct: `player_round . first_side == player_round . current_side` (Pattern: CHANGE_BINARY_OPERATOR)"
    },
    {
      "question": "Identify the issue in `else : port = options [ 'port' ]` and provide the corrected single-line fix. [ADD_FUNCTION_AROUND_EXPRESSION]"
    },
    {
      "question": "Replace the buggy snippet with a correct one: `self . center_price = self . calculate_relative_center_price ( self [ 'order_ids' ] )`  [pattern=SAME_FUNCTION_MORE_ARGS]"
    },
    {
      "question": "Fix the following statement so it is correct: `missing = set ( argnames [ len ( args ) : ] ) - kwargs . keys ( )` (Pattern: ADD_FUNCTION_AROUND_EXPRESSION)"
    },
    {
      "question": "This line is buggy: `if len ( self . values . index ) == 1 : self . end_agg = None return self . values [ 0 ] elif isinstance ( self . end_agg , str ) :`. Provide the correct version only. [MORE_SPECIFIC_IF]"
    },
    {
      "question": "This line is buggy: `return upload_file_to_s3 ( file_path , s3_filename )`. Provide the correct version only. [SAME_FUNCTION_MORE_ARGS]"
    },
    {
      "question": "Fix the following statement so it is correct: `def handle_remove_worker ( self ) : dialog = ConfirmationDialog ( 'Are you sure you want to remove worker \"{}\"?' . format ( self . worker_name ) ) return_value = dialog . exec_ ( )` (Pattern: SINGLE_TOKEN)"
    },
    {
      "question": "Given the buggy code: `super ( ) . __init__ ( flags = 0 )`, rewrite it into a correct version. (Bug type: SAME_FUNCTION_LESS_ARGS)"
    },
    {
      "question": "Fix the error in: `a = np . arange ( 200 ) . reshape ( ( 20 , 10 ) )`. Return only the corrected line. [SAME_FUNCTION_MORE_ARGS]"
    },
    {
      "question": "Fix the error in: `n = len ( seq ) / shape [ 0 ]`. Return only the corrected line. [ADD_FUNCTION_AROUND_EXPRESSION]"
    },
    {
      "question": "Produce the corrected version of: `os . makedirs ( dir_path , exist_ok = True )`  (family: SAME_FUNCTION_LESS_ARGS)"
    },
    {
      "question": "Given the buggy code: `rate_index = tf . reduce_max ( tf . where ( tf . greater_equal ( global_step , boundaries ) , range ( num_boundaries ) , [ 0 ] * num_boundaries ) )`, rewrite it into a correct version. (Bug type: ADD_FUNCTION_AROUND_EXPRESSION)"
    },
    {
      "question": "Replace the buggy snippet with a correct one: `image = requests . get ( 'https://dnsdumpster.com/static/map/%s.png' % get_fld ( domain ) )`  [pattern=SAME_FUNCTION_MORE_ARGS]"
    },
    {
      "question": "Produce the corrected version of: `add_user_to_blacklist ( browser , username , blacklist [ 'campaign' ] , action )`  (family: SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Replace the buggy snippet with a correct one: `csv_rw . member_access_read ( 'access_tables.csv' , db_commutators , [ ] , [ ] )`  [pattern=SAME_FUNCTION_MORE_ARGS]"
    },
    {
      "question": "Correct the following line while preserving intent: `\"\" , - 1`  (SINGLE_TOKEN)"
    },
    {
      "question": "Identify the issue in `return self . longrepr . reprcrash` and provide the corrected single-line fix. [ADD_FUNCTION_AROUND_EXPRESSION]"
    },
    {
      "question": "This line is buggy: `if self . api . people . me ( ) . id in data [ 'mentionedPeople' ] : message_id = data [ 'id' ] message_text = self . api . messages . get ( message_id ) . text message_text = message_text . replace ( self . api . people . me ( ) . displayName , \"\" , 1 ) . strip ( )`. Provide the correct version only. [MORE_SPECIFIC_IF]"
    },
    {
      "question": "Produce the corrected version of: `self . create_message ( \"ERROR: '\" + str ( person . displayName ) + \"' was not found in the queue\" )`  (family: SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Given the buggy code: `pkg . main . SomeSubClass ( \"xxx\" ) . get_somevar ( )`, rewrite it into a correct version. (Bug type: SINGLE_TOKEN)"
    },
    {
      "question": "This line is buggy: `self . _test_tzwhere ( 'csv' , self . TEST_LOCATIONS_FORCETZ , path = None , shapely = True )`. Provide the correct version only. [SAME_FUNCTION_MORE_ARGS]"
    },
    {
      "question": "Correct the following line while preserving intent: `tf . train . write_graph ( self . sess . graph_def , self . save_dir , 'graph.pbtxt' )`  (SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Identify the issue in `self . ob = ModuleType ( )` and provide the corrected single-line fix. [SAME_FUNCTION_MORE_ARGS]"
    },
    {
      "question": "Produce the corrected version of: `\"votes\" : [ '1:0' ] ,`  (family: SINGLE_TOKEN)"
    },
    {
      "question": "Fix the error in: `seed = bytes ( nonce , 'ascii' ) + hexlify ( ss )`. Return only the corrected line. [ADD_FUNCTION_AROUND_EXPRESSION]"
    },
    {
      "question": "Given the buggy code: `raise AssertionError ( )`, rewrite it into a correct version. (Bug type: SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Given the buggy code: `addr = py23_bytes ( ctypes . c_uint8 ( version & 0xFF ) ) + addressbin`, rewrite it into a correct version. (Bug type: ADD_FUNCTION_AROUND_EXPRESSION)"
    },
    {
      "question": "Identify the issue in `pool = ThreadPoolExecutor ( )` and provide the corrected single-line fix. [SAME_FUNCTION_MORE_ARGS]"
    },
    {
      "question": "Fix the following statement so it is correct: `if k not in \"json_metadata\" and k != 'reputation' : self . assertEqual ( content [ k ] , json_content [ k ] )` (Pattern: MORE_SPECIFIC_IF)"
    },
    {
      "question": "Apply the minimal change that makes this line correct: `n = [ s . replace ( sep , enc ) for s in self ]`  (ADD_FUNCTION_AROUND_EXPRESSION)"
    },
    {
      "question": "Fix the following statement so it is correct: `from_string = CreateGuid ( ) [ 1 : - 1 ]` (Pattern: ADD_FUNCTION_AROUND_EXPRESSION)"
    },
    {
      "question": "This line is buggy: `( ob . _p_oid , self . CategoryDM . oidFor ( ob . category ) , ob . fullText , ob . postedBy . loginId , str ( ob . postedOn ) , ob . editedBy . loginId , str ( ob . editedOn ) , ob . hidden )`. Provide the correct version only. [ADD_FUNCTION_AROUND_EXPRESSION]"
    },
    {
      "question": "Fix the error in: `self . con = Gio . bus_get_sync ( type )`. Return only the corrected line. [SAME_FUNCTION_MORE_ARGS]"
    },
    {
      "question": "Identify the issue in `if column . type == 'many2one' : value = value [ 0 ]` and provide the corrected single-line fix. [MORE_SPECIFIC_IF]"
    },
    {
      "question": "Replace the buggy snippet with a correct one: `word = request . form [ 'word' ]`  [pattern=ADD_METHOD_CALL]"
    },
    {
      "question": "Identify the issue in `self . ob = ModuleType ( )` and provide the corrected single-line fix. [SAME_FUNCTION_MORE_ARGS]"
    },
    {
      "question": "Produce the corrected version of: `if not stat . started : delta = stat . aggregate_deltas [ - 1 ] if ( stat is self . eval_compile_stats and self . call_stats . started ) :`  (family: MORE_SPECIFIC_IF)"
    },
    {
      "question": "Fix the following statement so it is correct: `if len ( sys . argv ) > 1 : tests = [ ] for test_name in sys . argv [ 1 : ] : test = globals ( ) . get ( test_name )` (Pattern: MORE_SPECIFIC_IF)"
    },
    {
      "question": "Fix the error in: `def test_for_each_no_curry_executed_function_for_each_item_in_the_iterable ( ) : m = mock . MagicMock ( ) for_each ( m , ( [ 1 , 2 , 3 ] ) ) == [ 1 , 2 , 3 ] assert len ( m . mock_calls ) == 3`. Return only the corrected line. [SINGLE_TOKEN]"
    },
    {
      "question": "Given the buggy code: `key = self . generateRandomKey ( plaintext , len ( plaintext . getEncoded ( ) ) )`, rewrite it into a correct version. (Bug type: SAME_FUNCTION_LESS_ARGS)"
    },
    {
      "question": "This line is buggy: `key = self . generateRandomKey ( plaintext , len ( plaintext . getEncoded ( ) ) )`. Provide the correct version only. [SAME_FUNCTION_LESS_ARGS]"
    },
    {
      "question": "Fix the following statement so it is correct: `if filter ( lambda x : nodes [ x ] . group == 3 , pair ) : distance = 10 strength = 1` (Pattern: ADD_FUNCTION_AROUND_EXPRESSION)"
    },
    {
      "question": "Correct the following line while preserving intent: `if not os . path . isfile ( fileName ) : continue`  (ADD_FUNCTION_AROUND_EXPRESSION)"
    },
    {
      "question": "Identify the issue in `self . send_response ( code , reason )` and provide the corrected single-line fix. [ADD_FUNCTION_AROUND_EXPRESSION]"
    },
    {
      "question": "Replace the buggy snippet with a correct one: `self . reactor . callLater ( when - self . now ( ) , what , self , when )`  [pattern=ADD_FUNCTION_AROUND_EXPRESSION]"
    },
    {
      "question": "Fix the following statement so it is correct: `start_response ( self . error_status , self . error_headers [ : ] )` (Pattern: SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Fix the following statement so it is correct: `module = attrs [ 'module' ]` (Pattern: ADD_FUNCTION_AROUND_EXPRESSION)"
    },
    {
      "question": "This line is buggy: `if response . status_code >= 500 : marathon . log . error ( \"Got HTTP {code}: {body}\" . format ( code = response . status_code , body = response . text ) ) raise InternalServerError ( response ) elif response . status_code == 400 : marathon . log . error ( \"Got HTTP {code}: {body}\" . format ( code = response . status_code , body = response . text ) ) if response . status_code == 404 : raise NotFoundError ( response )`. Provide the correct version only. [CHANGE_BINARY_OPERATOR]"
    },
    {
      "question": "Fix the error in: `assert static == None`. Return only the corrected line. [CHANGE_BINARY_OPERATOR]"
    },
    {
      "question": "Produce the corrected version of: `if item . text and item . text . isspace ( ) == False : newitem . text = item . text`  (family: CHANGE_BINARY_OPERATOR)"
    },
    {
      "question": "This line is buggy: `if replace_steemit_by_steem : new_config = { } for key in config : new_config [ key . replace ( 'STEEMIT' , 'STEEM' ) ] = config [ key ]`. Provide the correct version only. [MORE_SPECIFIC_IF]"
    },
    {
      "question": "Produce the corrected version of: `blockchain . get_similar_account_names ( \"test\" , limit = 5 )`  (family: ADD_FUNCTION_AROUND_EXPRESSION)"
    },
    {
      "question": "Given the buggy code: `return filename in self . faces_detected`, rewrite it into a correct version. (Bug type: ADD_FUNCTION_AROUND_EXPRESSION)"
    },
    {
      "question": "Given the buggy code: `self . faces_detected [ os . path . basename ( filename ) ] = self . handleImage ( self , image )`, rewrite it into a correct version. (Bug type: SAME_FUNCTION_LESS_ARGS)"
    },
    {
      "question": "Produce the corrected version of: `def __init__ ( self , image = None , r = None , x = None , w = None , y = None , h = None , landmarksXY = None ) : self . image = image self . r = r self . x = x`  (family: SINGLE_TOKEN)"
    },
    {
      "question": "Correct the following line while preserving intent: `if self . rect . centerx == self . ship . rect . centerx and len ( eBullets ) <= 4 : if self . timer >= 50 : self . timer = 0 newBullet = EBullet ( setting , screen , self )`  (CHANGE_BINARY_OPERATOR)"
    },
    {
      "question": "This line is buggy: `type_data = INSTANCE_TYPES [ 'instance_type' ]`. Provide the correct version only. [SINGLE_TOKEN]"
    },
    {
      "question": "Given the buggy code: `for instance in db . instance_get_by_project ( project_id ) : line = '%s slots=%d' % ( instance . fixed_ip [ 'str_id' ] , INSTANCE_TYPES [ instance [ 'instance_type' ] ] [ 'vcpus' ] ) if instance [ 'key_name' ] in result :`, rewrite it into a correct version. (Bug type: SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Correct the following line while preserving intent: `return cls . override_type or cls . __name__`  (ADD_METHOD_CALL)"
    },
    {
      "question": "This line is buggy: `if self . _patIsWord . match ( word ) : lineColor = QColor ( resources . CUSTOM_SCHEME . get ( 'selected-word' , resources . COLOR_SCHEME [ 'selected-word' ] ) )`. Provide the correct version only. [MORE_SPECIFIC_IF]"
    },
    {
      "question": "Replace the buggy snippet with a correct one: `msg = \"This request was rate-limited.\"`  [pattern=ADD_FUNCTION_AROUND_EXPRESSION]"
    },
    {
      "question": "Correct the following line while preserving intent: `if line > line_changed : self . checkers_lines [ index ] = line + diference`  (CHANGE_BINARY_OPERATOR)"
    },
    {
      "question": "Produce the corrected version of: `filter ( models . FixedIp . instance_id != None ) . filter_by ( allocated = 0 ) . update ( { 'instance_id' : None , 'leased' : 0 } )`  (family: SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Identify the issue in `_execute ( 'sudo' , 'route' , 'del' , 'default' , 'gw' , gateway , 'dev' , interface )` and provide the corrected single-line fix. [SAME_FUNCTION_MORE_ARGS]"
    },
    {
      "question": "Fix the following statement so it is correct: `xml = self . to_xml ( instance , network_info )` (Pattern: SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Fix the error in: `address = self . _get_address ( public_ip )`. Return only the corrected line. [SAME_FUNCTION_MORE_ARGS]"
    },
    {
      "question": "This line is buggy: `raise msg`. Provide the correct version only. [ADD_FUNCTION_AROUND_EXPRESSION]"
    },
    {
      "question": "Replace the buggy snippet with a correct one: `else : inst_types = session . query ( models . InstanceTypes ) . filter_by ( deleted = inactive ) . order_by ( \"name\" ) . all ( )`  [pattern=SINGLE_TOKEN]"
    },
    {
      "question": "Correct the following line while preserving intent: `conn . spawn ( self . context , instance , network_info )`  (SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Correct the following line while preserving intent: `utils . execute ( 'ssh-keygen' , '-q' , '-b' , bits , '-N' , '' , '-f' , keyfile )`  (SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "This line is buggy: `consumer . call ( context , method , args )`. Provide the correct version only. [SAME_FUNCTION_MORE_ARGS]"
    },
    {
      "question": "Fix the following statement so it is correct: `conn . notify_send ( topic , msg , durable = True )` (Pattern: SAME_FUNCTION_LESS_ARGS)"
    },
    {
      "question": "Apply the minimal change that makes this line correct: `backend_conf . save ( session = session )`  (SAME_FUNCTION_LESS_ARGS)"
    },
    {
      "question": "Fix the error in: `if image . get ( 'container_format' ) != image_type : raise exception . ImageNotFound ( image_id = ec2_id )`. Return only the corrected line. [ADD_FUNCTION_AROUND_EXPRESSION]"
    },
    {
      "question": "This line is buggy: `def test_instance_type_get_with_extra_specs ( self ) : instance_type = db . api . instance_type_get_by_flavor_id ( context . get_admin_context ( ) , 105 )`. Provide the correct version only. [SINGLE_TOKEN]"
    },
    {
      "question": "Fix the error in: `msg = ( \"Not enough subnets avail to satisfy requested \" \"num_net works - some subnets in requested range\" \" already in use\" )`. Return only the corrected line. [ADD_FUNCTION_AROUND_EXPRESSION]"
    },
    {
      "question": "Replace the buggy snippet with a correct one: `fkey_name = vifs . c . instance_id . foreign_keys [ 0 ] . constraint . name`  [pattern=ADD_FUNCTION_AROUND_EXPRESSION]"
    },
    {
      "question": "Fix the error in: `exc = webob . exc . HTTPInternalServerError ( explanation = unicode ( ex ) )`. Return only the corrected line. [SAME_FUNCTION_LESS_ARGS]"
    },
    {
      "question": "Correct the following line while preserving intent: `utils . execute ( 'e2fsck' , '-f' , partition_path , run_as_root = True )`  (SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Apply the minimal change that makes this line correct: `robj [ 'Location' ] = link [ 0 ] [ 'href' ]`  (ADD_METHOD_CALL)"
    },
    {
      "question": "Apply the minimal change that makes this line correct: `conn . rescue ( instance , None )`  (SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Correct the following line while preserving intent: `self . reboot_instance ( admin_context , instance [ id ] )`  (SINGLE_TOKEN)"
    },
    {
      "question": "Fix the error in: `LOG . debug ( _ ( 'Rebooting instance %(name)s after nova-compute restart.' ) )`. Return only the corrected line. [SAME_FUNCTION_MORE_ARGS]"
    },
    {
      "question": "Apply the minimal change that makes this line correct: `return str ( jsonutils . dumps ( data , ensure_ascii = True ) )`  (SAME_FUNCTION_LESS_ARGS)"
    },
    {
      "question": "Identify the issue in `flavor_refs = instance_types . get_all_types ( inactive = True )` and provide the corrected single-line fix. [SAME_FUNCTION_LESS_ARGS]"
    },
    {
      "question": "Fix the error in: `return`. Return only the corrected line. [SINGLE_TOKEN]"
    },
    {
      "question": "Apply the minimal change that makes this line correct: `return self . call ( context , msg )`  (SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Produce the corrected version of: `rows = model_query ( context , models . InstanceFault , read_deleted = 'no' ) . filter ( models . InstanceFault . instance_uuid . in_ ( instance_uuids ) ) . order_by ( desc ( \"created_at\" ) ) . all ( )`  (family: SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Identify the issue in `( _out , err ) = _execute ( 'ip' , 'link' , 'show' , 'dev' , device , check_exit_code = False )` and provide the corrected single-line fix. [SAME_FUNCTION_MORE_ARGS]"
    },
    {
      "question": "Correct the following line while preserving intent: `return crypto . revoke_certs_by_user_and_project ( project_id )`  (SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Apply the minimal change that makes this line correct: `if fields [ 1 ] == path : device = fields [ 0 ] break`  (ADD_FUNCTION_AROUND_EXPRESSION)"
    },
    {
      "question": "Fix the following statement so it is correct: `utils . execute ( 'ssh-keygen' , '-q' , '-b' , bits , '-N' , '' , '-t' , 'rsa' , '-f' , keyfile )` (Pattern: SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Replace the buggy snippet with a correct one: `if instance [ 'task_state' ] in resize_states or instance [ 'vm_state' ] in vm_states . RESIZED : self . instance_names . add ( instance [ 'name' ] + '_resize' )`  [pattern=CHANGE_BINARY_OPERATOR]"
    },
    {
      "question": "Identify the issue in `SettingsWindow ( self . config )` and provide the corrected single-line fix. [SAME_FUNCTION_MORE_ARGS]"
    },
    {
      "question": "Identify the issue in `self . ui . debug ( \"Message with invalid date %s. Server will use local time.\" % datetuple )` and provide the corrected single-line fix. [SAME_FUNCTION_MORE_ARGS]"
    },
    {
      "question": "This line is buggy: `optgroup . add_option ( '-u' , '--saltapi-url' , dest = 'saltapiurl' , default = 'https://localhost:8000/' , help = \"Specify the host url.  Defaults to https://localhost:8080\" )`. Provide the correct version only. [SAME_FUNCTION_LESS_ARGS]"
    },
    {
      "question": "This line is buggy: `dzen2_line = \"^p(2)^fn(droid sans:bold:size=8)\" + self . time + \"^p(5)\" + self . workspaces + \"^p(2)^fg(#808080)^r(1x5)^fg()^p(6)\" + self . windows`. Provide the correct version only. [ADD_FUNCTION_AROUND_EXPRESSION]"
    },
    {
      "question": "Produce the corrected version of: `return d . add_callback ( callback )`  (family: SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Replace the buggy snippet with a correct one: `documents = docs`  [pattern=ADD_FUNCTION_AROUND_EXPRESSION]"
    },
    {
      "question": "Apply the minimal change that makes this line correct: `popup_menu . popup ( None , None , None , event . button , event . time )`  (SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Given the buggy code: `else : echo = ( input_method == 'echo' )`, rewrite it into a correct version. (Bug type: CHANGE_BINARY_OPERATOR)"
    },
    {
      "question": "Fix the error in: `self . set ( kl , val )`. Return only the corrected line. [SAME_FUNCTION_MORE_ARGS]"
    },
    {
      "question": "Correct the following line while preserving intent: `if res : res = yield from res`  (ADD_FUNCTION_AROUND_EXPRESSION)"
    },
    {
      "question": "Given the buggy code: `client = Client ( ( server , port ) )`, rewrite it into a correct version. (Bug type: SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Apply the minimal change that makes this line correct: `def test_http_get_timeit ( self ) : client = self . client ( ) response = yield client . timeit ( 10 , 'get' , 'http://www.amazon.co.uk/' ) . on_finished`  (SINGLE_TOKEN)"
    },
    {
      "question": "Produce the corrected version of: `aio_write ( fd , piece , offset , self . _write_callback )`  (family: ADD_METHOD_CALL)"
    },
    {
      "question": "Replace the buggy snippet with a correct one: `if group . screen . previous_group : target = group . screen . previous_group else : target = group . prevGroup ( )`  [pattern=MORE_SPECIFIC_IF]"
    },
    {
      "question": "This line is buggy: `def close ( self , group ) : c = Layout . clone ( self , group ) c . clients = [ ] return c`. Provide the correct version only. [SINGLE_TOKEN]"
    },
    {
      "question": "Produce the corrected version of: `shutil . rmtree ( path )`  (family: SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Fix the error in: `self . name = name`. Return only the corrected line. [ADD_FUNCTION_AROUND_EXPRESSION]"
    },
    {
      "question": "Given the buggy code: `if enable : enable = 1 else : enable = 0`, rewrite it into a correct version. (Bug type: ADD_FUNCTION_AROUND_EXPRESSION)"
    },
    {
      "question": "Produce the corrected version of: `return is_valid_wwn ( self . spec [ 'wwn_type' ] , wwn , self . spec [ 'wwn_list' ] )`  (family: SAME_FUNCTION_LESS_ARGS)"
    },
    {
      "question": "Given the buggy code: `wwn = wwn . strip ( )`, rewrite it into a correct version. (Bug type: ADD_FUNCTION_AROUND_EXPRESSION)"
    },
    {
      "question": "Identify the issue in `process = subprocess . Popen ( cmdline , stdout = subprocess . PIPE , stderr = subprocess . PIPE )` and provide the corrected single-line fix. [ADD_METHOD_CALL]"
    },
    {
      "question": "This line is buggy: `raise RTSLibError ( stderrdata )`. Provide the correct version only. [SINGLE_TOKEN]"
    },
    {
      "question": "Fix the following statement so it is correct: `if self . currentWindow : self . currentWindow . focus ( warp )` (Pattern: MORE_SPECIFIC_IF)"
    },
    {
      "question": "Produce the corrected version of: `if txt [ 0 ] in \"~/\" : path = os . path . expanduser ( txt ) if os . path . isdir ( path ) : files = glob . glob ( os . path . join ( path , \"*\" ) )`  (family: MORE_SPECIFIC_IF)"
    },
    {
      "question": "Fix the following statement so it is correct: `user1 = User . objects . order_by ( 'pk' ) . first ( )` (Pattern: ADD_METHOD_CALL)"
    },
    {
      "question": "Apply the minimal change that makes this line correct: `logger ( LOG_TEMPLATE . format ( project = self . project . slug , version = '' , msg = msg ) )`  (ADD_FUNCTION_AROUND_EXPRESSION)"
    },
    {
      "question": "Fix the error in: `if block * 50 > length_of_seqs : break`. Return only the corrected line. [CHANGE_BINARY_OPERATOR]"
    },
    {
      "question": "Correct the following line while preserving intent: `else : if value is None : dictionary . pop ( key )`  (ADD_FUNCTION_AROUND_EXPRESSION)"
    },
    {
      "question": "Fix the following statement so it is correct: `request = requests . delete ( url , json = configData , headers = headers )` (Pattern: SAME_FUNCTION_LESS_ARGS)"
    },
    {
      "question": "This line is buggy: `returnValue = None`. Provide the correct version only. [SINGLE_TOKEN]"
    },
    {
      "question": "Replace the buggy snippet with a correct one: `value = line [ i + 1 : ]`  [pattern=ADD_METHOD_CALL]"
    },
    {
      "question": "Replace the buggy snippet with a correct one: `tis = tis . all ( )`  [pattern=ADD_METHOD_CALL]"
    },
    {
      "question": "This line is buggy: `packages = find_packages ( ) ,`. Provide the correct version only. [SAME_FUNCTION_MORE_ARGS]"
    },
    {
      "question": "Apply the minimal change that makes this line correct: `if written != length : raise FieldError ( \"could not write bytes, written %d, should %d\" % ( written , length ) )`  (MORE_SPECIFIC_IF)"
    },
    {
      "question": "Produce the corrected version of: `def test_entitity_copy ( self ) : \"\"\"Make a copy of a residue.\"\"\" for e in ( self . s , self . m , self . c , self . r ) : ee = e . copy ( )`  (family: SINGLE_TOKEN)"
    },
    {
      "question": "Identify the issue in `if self . _run_count [ file_path ] != self . _max_runs : return False` and provide the corrected single-line fix. [CHANGE_BINARY_OPERATOR]"
    },
    {
      "question": "Given the buggy code: `self . duration = ( self . end_date - self . start_date ) . total_seconds ( )`, rewrite it into a correct version. (Bug type: ADD_FUNCTION_AROUND_EXPRESSION)"
    },
    {
      "question": "Apply the minimal change that makes this line correct: `def decrpyt ( self , b ) : return b`  (SINGLE_TOKEN)"
    },
    {
      "question": "Replace the buggy snippet with a correct one: `request = _rest_get_server_info ( project_token , region )`  [pattern=SAME_FUNCTION_MORE_ARGS]"
    },
    {
      "question": "Apply the minimal change that makes this line correct: `num_dag_from = start + 1 ,`  (ADD_FUNCTION_AROUND_EXPRESSION)"
    },
    {
      "question": "Identify the issue in `def testLoadable ( self ) : q = queen . Queen ( ) q . startService ( ) return q . stopService ( )` and provide the corrected single-line fix. [SINGLE_TOKEN]"
    },
    {
      "question": "Correct the following line while preserving intent: `if \"name\" in req . args : name = req . args [ \"name\" ] [ 0 ] elif name in req . fields : name = req . fields [ \"name\" ] . value`  (SINGLE_TOKEN)"
    },
    {
      "question": "Produce the corrected version of: `reactor . callLater ( c . startService )`  (family: SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Produce the corrected version of: `if flags | os . O_APPEND : m = m . replace ( 'w' , 'a' , 1 )`  (family: CHANGE_BINARY_OPERATOR)"
    },
    {
      "question": "Apply the minimal change that makes this line correct: `self . limit = 10`  (SINGLE_TOKEN)"
    },
    {
      "question": "Correct the following line while preserving intent: `try : self . f . close ( ) except BaseException as e : self . log ( \"suppressed %r from close of temporary file %r\" % ( e , self . f ) , level = WEIRD )`  (SINGLE_TOKEN)"
    },
    {
      "question": "Fix the error in: `if self . mode == ( MODE_CHECK , MODE_REPAIR ) : self . log ( \"done\" , parent = lp )`. Return only the corrected line. [CHANGE_BINARY_OPERATOR]"
    },
    {
      "question": "Produce the corrected version of: `self . doc . set_new_name ( )`  (family: SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Correct the following line while preserving intent: `if self . doc . send_invite_email : webnotes . msgprint ( \"Sent welcome mail.\" ) self . send_welcome_mail ( self . doc . new_password )`  (ADD_FUNCTION_AROUND_EXPRESSION)"
    },
    {
      "question": "This line is buggy: `if data . lang : webnotes . lang = data . lang`. Provide the correct version only. [MORE_SPECIFIC_IF]"
    },
    {
      "question": "Identify the issue in `if modified != str ( self . doc . modified ) : conflict = True` and provide the corrected single-line fix. [ADD_FUNCTION_AROUND_EXPRESSION]"
    },
    {
      "question": "Produce the corrected version of: `if parent == webnotes . session . user : defaults . update ( get_defaults_for_match ( defaults ) )`  (family: MORE_SPECIFIC_IF)"
    },
    {
      "question": "Replace the buggy snippet with a correct one: `self . roles = webnotes . get_roles ( )`  [pattern=SAME_FUNCTION_MORE_ARGS]"
    },
    {
      "question": "This line is buggy: `arg = webnotes . form_dict . get ( 'args' )`. Provide the correct version only. [SAME_FUNCTION_MORE_ARGS]"
    },
    {
      "question": "This line is buggy: `if ( \"System Manager\" not in get_roles ( ) ) or ( session . user != \"Administrator\" ) : msgprint ( \"Only Allowed for Role System Manager or Administrator\" , raise_exception = True )`. Provide the correct version only. [CHANGE_BINARY_OPERATOR]"
    },
    {
      "question": "Correct the following line while preserving intent: `if doc . parent : bean = webnotes . bean ( doc . parenttype , doc . parent ) child = bean . doclist . getone ( { \"doctype\" : doctype , \"name\" : docname } ) child . fields [ fieldname ] = value`  (MORE_SPECIFIC_IF)"
    },
    {
      "question": "Replace the buggy snippet with a correct one: `bundlejs . bundle ( options . no_compress )`  [pattern=SAME_FUNCTION_LESS_ARGS]"
    },
    {
      "question": "Fix the error in: `parser . add_option ( \"--patch_sync_build\" , help = \"run latest patches, sync all and rebuild js css\" )`. Return only the corrected line. [SAME_FUNCTION_MORE_ARGS]"
    },
    {
      "question": "Correct the following line while preserving intent: `session = { 'user' : 'Administrator' }`  (ADD_FUNCTION_AROUND_EXPRESSION)"
    },
    {
      "question": "Fix the error in: `return None`. Return only the corrected line. [SINGLE_TOKEN]"
    },
    {
      "question": "This line is buggy: `def to_udpate ( self , d ) : if ( d . fieldtype not in [ 'Section Break' , 'Column Break' , 'HTML' ] ) and ( d . fieldname or d . label ) : return 1`. Provide the correct version only. [SINGLE_TOKEN]"
    },
    {
      "question": "Produce the corrected version of: `@ webnotes . whitelist ( ) def logout ( ) : webnotes . login_manager . logout ( )`  (family: SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Fix the following statement so it is correct: `cur_val = '%.2f' % cur_val` (Pattern: ADD_FUNCTION_AROUND_EXPRESSION)"
    },
    {
      "question": "Fix the error in: `webnotes . conn . sql ( \"\"\"delete from \\`tab%s\\` where parent=%s and parenttype=%s and\n \t\t\t\tname not in (%s)\"\"\" % ( dt , '%s' , '%s' , ',' . join ( [ '%s' ] * len ( cnames ) ) ) , tuple ( [ self . doc . name , self . doc . doctype ] + cnames ) , debug = 1 )`. Return only the corrected line. [SAME_FUNCTION_LESS_ARGS]"
    },
    {
      "question": "Fix the error in: `params = \"\" . join ( ( cstr ( p ) for p in params ) )`. Return only the corrected line. [ADD_METHOD_CALL]"
    },
    {
      "question": "Correct the following line while preserving intent: `statics . sync ( verbose = verbose ) . start ( )`  (SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Fix the following statement so it is correct: `if g : return frappe . get_doc ( doctype , g [ 0 ] [ 0 ] ) . get_website_route ( )` (Pattern: MORE_SPECIFIC_IF)"
    },
    {
      "question": "Given the buggy code: `import_doclist ( frappe . get_app_path ( app , \"fixtures\" , fname ) , ignore_links = True )`, rewrite it into a correct version. (Bug type: SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "This line is buggy: `if self . name : return`. Provide the correct version only. [MORE_SPECIFIC_IF]"
    },
    {
      "question": "Apply the minimal change that makes this line correct: `locale = Locale ( frappe . local . lang )`  (SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Fix the following statement so it is correct: `if overwrite : bean = webnotes . bean ( doctype , doclist [ 0 ] [ \"name\" ] ) bean . ignore_links = ignore_links bean . doclist . update ( doclist )` (Pattern: MORE_SPECIFIC_IF)"
    },
    {
      "question": "Identify the issue in `args = data_map [ d ]` and provide the corrected single-line fix. [ADD_METHOD_CALL]"
    },
    {
      "question": "Identify the issue in `reload_doc ( db . get_value ( \"DocType\" , doctype , \"module\" ) , \"doctype\" , doctype )` and provide the corrected single-line fix. [ADD_FUNCTION_AROUND_EXPRESSION]"
    },
    {
      "question": "This line is buggy: `if doctype == \"DocType\" and frappe . get_meta ( doctype ) . issingle : continue`. Provide the correct version only. [CHANGE_BINARY_OPERATOR]"
    },
    {
      "question": "Fix the error in: `frappe . modules . import_file . import_file_by_path ( f , data_import = True )`. Return only the corrected line. [SAME_FUNCTION_MORE_ARGS]"
    },
    {
      "question": "Identify the issue in `return datetime . timedelta ( hours = t . hour , minutes = t . minute , seconds = t . second )` and provide the corrected single-line fix. [SAME_FUNCTION_MORE_ARGS]"
    },
    {
      "question": "Fix the following statement so it is correct: `val = flt ( val , self . precision ( df . fieldname ) )` (Pattern: SAME_FUNCTION_LESS_ARGS)"
    },
    {
      "question": "Fix the following statement so it is correct: `clear_cache ( old_route )` (Pattern: ADD_FUNCTION_AROUND_EXPRESSION)"
    },
    {
      "question": "Given the buggy code: `path = os . path . join ( get_doc_path ( frappe . db . get_value ( \"DocType\" , doctype , \"module\" ) , \"Print Format\" , format_name ) , format_name + \".html\" )`, rewrite it into a correct version. (Bug type: ADD_FUNCTION_AROUND_EXPRESSION)"
    },
    {
      "question": "Fix the error in: `classname = doctype . replace ( \" \" , \"\" )`. Return only the corrected line. [ADD_METHOD_CALL]"
    },
    {
      "question": "Produce the corrected version of: `path = os . path . join ( get_doc_path ( frappe . db . get_value ( \"DocType\" , doctype , \"module\" ) , \"Print Format\" , format_name ) , format_name + \".html\" )`  (family: ADD_FUNCTION_AROUND_EXPRESSION)"
    },
    {
      "question": "This line is buggy: `messages = get_messages_from_file ( file_path + \".html\" )`. Provide the correct version only. [SINGLE_TOKEN]"
    },
    {
      "question": "Given the buggy code: `self . assertEquals ( frappe . db . get_value ( \"Custom Field\" , \"User-test_custom_field\" , \"reqd\" ) , None )`, rewrite it into a correct version. (Bug type: SINGLE_TOKEN)"
    },
    {
      "question": "Fix the error in: `\"gender\" : data . get ( \"gender\" ) ,`. Return only the corrected line. [ADD_METHOD_CALL]"
    },
    {
      "question": "Fix the error in: `with open ( os . path . join ( get_module_path ( \"core\" ) , \"doctype\" , doc . doctype , \"boilerplate\" , template ) , 'r' ) as source : target . write ( source . read ( ) . format ( app_publisher = app_publisher , classname = doc . name . replace ( \" \" , \"\" ) , doctype = doc . name , ** opts ) )`. Return only the corrected line. [ADD_FUNCTION_AROUND_EXPRESSION]"
    },
    {
      "question": "Apply the minimal change that makes this line correct: `if \"<!-- render-jinja -->\" in context . main_section : context [ \"main_section\" ] = frappe . render_template ( context . main_section , { \"doc\" : self , \"frappe\" : frappe } ) context [ \"no_cache\" ] = 1`  (MORE_SPECIFIC_IF)"
    },
    {
      "question": "Fix the error in: `user = frappe . get_user ( frappe . session . user )`. Return only the corrected line. [SAME_FUNCTION_LESS_ARGS]"
    },
    {
      "question": "Correct the following line while preserving intent: `frappe . cache ( ) . hset ( \"temp\" , value )`  (SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Apply the minimal change that makes this line correct: `frappe . throw ( _ ( \"No permission to read {0}\" ) . format ( self . doctype ) )`  (SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Replace the buggy snippet with a correct one: `condition . append ( \"%s='%s'\" % ( key , val . replace ( \"'\" , \"\\'\" ) ) )`  [pattern=ADD_FUNCTION_AROUND_EXPRESSION]"
    },
    {
      "question": "Fix the following statement so it is correct: `session = Session ( None ) . get_session_data ( )` (Pattern: SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Fix the error in: `ret = os . system ( \"%s -u root -p%s %s < %s\" % ( mysql , root_password . replace ( \" \" , \"\\ \" ) , target , source ) )`. Return only the corrected line. [ADD_METHOD_CALL]"
    },
    {
      "question": "Apply the minimal change that makes this line correct: `return unicode ( s )`  (SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "This line is buggy: `frappe . get_doc ( \"File\" , self . folder ) . save ( )`. Provide the correct version only. [SAME_FUNCTION_MORE_ARGS]"
    },
    {
      "question": "Apply the minimal change that makes this line correct: `columns = [ c [ 0 ] for c in frappe . db . get_description ( ) ]`  (ADD_FUNCTION_AROUND_EXPRESSION)"
    },
    {
      "question": "Replace the buggy snippet with a correct one: `if not ( frappe . conf . get ( \"deny_multiple_sessions\" ) or frappe . db . get_system_setting ( 'deny_multiple_sessions' ) ) : return`  [pattern=ADD_FUNCTION_AROUND_EXPRESSION]"
    },
    {
      "question": "Given the buggy code: `if not ( frappe . conf . get ( \"deny_multiple_sessions\" ) or frappe . db . get_system_setting ( 'deny_multiple_sessions' ) ) : return`, rewrite it into a correct version. (Bug type: ADD_FUNCTION_AROUND_EXPRESSION)"
    },
    {
      "question": "Apply the minimal change that makes this line correct: `frappe . local . response . filecontent = get_pdf ( html )`  (SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Replace the buggy snippet with a correct one: `print frappe . get_traceback ( )`  [pattern=ADD_METHOD_CALL]"
    },
    {
      "question": "Correct the following line while preserving intent: `can_read_docs . append ( '\"{}|{}\"' . format ( doctype , n ) )`  (ADD_FUNCTION_AROUND_EXPRESSION)"
    },
    {
      "question": "Replace the buggy snippet with a correct one: `if \"_starred_by\" in columns : frappe . db . sql_ddl ( \"\"\"alter table \\`{0}\\` change \\`_starred_by\\` \\`_liked_by\\` Text \"\"\" . format ( table ) )`  [pattern=MORE_SPECIFIC_IF]"
    },
    {
      "question": "Fix the following statement so it is correct: `backup = new_backup ( )` (Pattern: SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Fix the error in: `if next_item . name [ 0 ] != \"/\" : next_item . name = \"/\" + next_item . name`. Return only the corrected line. [MORE_SPECIFIC_IF]"
    },
    {
      "question": "This line is buggy: `if getattr ( frappe . get_meta ( self . doctype ) , 'track_seen' ) : self . fields . append ( '_seen' )`. Provide the correct version only. [SAME_FUNCTION_MORE_ARGS]"
    },
    {
      "question": "Produce the corrected version of: `response . headers [ b'X-Accel-Redirect' ] = path`  (family: ADD_FUNCTION_AROUND_EXPRESSION)"
    },
    {
      "question": "Produce the corrected version of: `r . image = get_gravatar ( )`  (family: SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Correct the following line while preserving intent: `frappe . get_doc ( { \"doctype\" : \"Patch Log\" , \"patch\" : patch } ) . insert ( )`  (SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Apply the minimal change that makes this line correct: `'evalue' : cstr ( evalue ) ,`  (SINGLE_TOKEN)"
    },
    {
      "question": "This line is buggy: `with open ( get_site_path ( \"public\" , file_path ) , 'r' ) as f : content = f . read ( )`. Provide the correct version only. [ADD_FUNCTION_AROUND_EXPRESSION]"
    },
    {
      "question": "Fix the error in: `app_messages . sort ( )`. Return only the corrected line. [SAME_FUNCTION_MORE_ARGS]"
    },
    {
      "question": "Apply the minimal change that makes this line correct: `response = Response ( wrap_file ( frappe . local . request . environ , f ) )`  (SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "This line is buggy: `if keyword in comment . body : comments . append ( comment . lower ( ) )`. Provide the correct version only. [ADD_METHOD_CALL]"
    },
    {
      "question": "This line is buggy: `status = bigchain . get_status ( tx_id , include_status = True )`. Provide the correct version only. [SAME_FUNCTION_LESS_ARGS]"
    },
    {
      "question": "Replace the buggy snippet with a correct one: `logger . info ( 'Write new block %s with %s transactions' , block . id , block . transactions )`  [pattern=ADD_FUNCTION_AROUND_EXPRESSION]"
    },
    {
      "question": "Fix the following statement so it is correct: `print ( \"Name error here\" )` (Pattern: SINGLE_TOKEN)"
    },
    {
      "question": "This line is buggy: `apps_to_install = [ 'frappe' ] + ( frappe . conf . get ( \"install_apps\" ) or [ ] ) + ( install_apps or [ ] )`. Provide the correct version only. [ADD_FUNCTION_AROUND_EXPRESSION]"
    },
    {
      "question": "Fix the error in: `self . set_onload ( 'all_modules' , [ m . module_name for m in frappe . db . get_all ( 'Desktop Icon' , fields = [ 'module_name' ] , filters = { 'standard' : 1 } ) ] )`. Return only the corrected line. [SAME_FUNCTION_MORE_ARGS]"
    },
    {
      "question": "Apply the minimal change that makes this line correct: `doc . name = validate_name ( doc . doctype , doc . name )`  (SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "This line is buggy: `return Node ( feed . __next__ )`. Provide the correct version only. [SAME_FUNCTION_MORE_ARGS]"
    },
    {
      "question": "Fix the error in: `if not player . is_stopped : estimated_time += player . current_entry . duration - player . progress`. Return only the corrected line. [MORE_SPECIFIC_IF]"
    },
    {
      "question": "Produce the corrected version of: `self . _reuse_timeout = 30`  (family: SINGLE_TOKEN)"
    },
    {
      "question": "Fix the following statement so it is correct: `for key , handlers in integration_events : scheduler_events . setdefault ( key , [ ] ) . extend ( handlers )` (Pattern: ADD_METHOD_CALL)"
    },
    {
      "question": "Given the buggy code: `if not getattr ( frappe . local , 'oauth_server' ) : oauth_validator = OAuthWebRequestValidator ( ) frappe . local . oauth_server = WebApplicationServer ( oauth_validator )`, rewrite it into a correct version. (Bug type: SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Produce the corrected version of: `b = Bigchain ( public_key = node_public )`  (family: SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Apply the minimal change that makes this line correct: `validate_raises ( tx , AmountError )`  (SAME_FUNCTION_LESS_ARGS)"
    },
    {
      "question": "Correct the following line while preserving intent: `custom_fields = frappe . get_all ( 'Custom Field' )`  (SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Fix the error in: `self . db_set ( 'seen' , 1 )`. Return only the corrected line. [SAME_FUNCTION_MORE_ARGS]"
    },
    {
      "question": "Given the buggy code: `save_url ( attach_item . file_url , attach_item . file_name , self . doctype , self . name , \"Home/Attachments\" )`, rewrite it into a correct version. (Bug type: SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Replace the buggy snippet with a correct one: `email_account . password = email_account . get_password ( )`  [pattern=SAME_FUNCTION_MORE_ARGS]"
    },
    {
      "question": "Produce the corrected version of: `if e . args [ 0 ] == 1054 and getattr ( frappe . local , 'request' ) : frappe . local . _comments = ( getattr ( frappe . local , \"_comments\" , [ ] ) + [ ( reference_doctype , reference_name , _comments ) ] )`  (family: SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Fix the following statement so it is correct: `parent . append ( doc )` (Pattern: SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Apply the minimal change that makes this line correct: `if not self . is_dummy_password ( self . get ( fieldname ) ) : return self . get ( fieldname )`  (MORE_SPECIFIC_IF)"
    },
    {
      "question": "Fix the following statement so it is correct: `half = ( prompt_length - 3 ) / 2` (Pattern: CHANGE_BINARY_OPERATOR)"
    },
    {
      "question": "Fix the error in: `self . write_event ( ecodes . EV_ABS , name , sum ( params [ : 2 ] ) / 2 )`. Return only the corrected line. [ADD_FUNCTION_AROUND_EXPRESSION]"
    },
    {
      "question": "Produce the corrected version of: `self . response . close . assert_called_with ( True )`  (family: SAME_FUNCTION_LESS_ARGS)"
    },
    {
      "question": "Identify the issue in `def test_keepalive_two_requests_sucess ( self ) : @ asyncio . coroutine def handler ( request ) : body = yield from request . read ( )` and provide the corrected single-line fix. [SINGLE_TOKEN]"
    },
    {
      "question": "Fix the following statement so it is correct: `self . handler = app . make_handler ( debug = True )` (Pattern: SAME_FUNCTION_LESS_ARGS)"
    },
    {
      "question": "Fix the following statement so it is correct: `self . handler = app . make_handler ( debug = True , keep_alive_on = False , access_log = log . access_logger )` (Pattern: SAME_FUNCTION_LESS_ARGS)"
    },
    {
      "question": "Apply the minimal change that makes this line correct: `self . handler = app . make_handler ( debug = True , keep_alive_on = False , access_log = log . access_logger )`  (SAME_FUNCTION_LESS_ARGS)"
    },
    {
      "question": "Fix the following statement so it is correct: `res = receiver ( ** kwargs )` (Pattern: SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Apply the minimal change that makes this line correct: `traceback . print_exc ( )`  (SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Produce the corrected version of: `with open ( self . file ) as data : try : parsed = json . load ( data ) except Exception :`  (family: SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Produce the corrected version of: `cmd += ' ' + ' ' . join ( [ '%s=%s' % ( key , value ) for key , value in self . options ] )`  (family: ADD_METHOD_CALL)"
    },
    {
      "question": "Given the buggy code: `if permissions . max_songs and player . playlist . count_for_user ( author ) > permissions . max_songs : raise PermissionsError ( \"You have reached your playlist item limit (%s)\" % permissions . max_songs )`, rewrite it into a correct version. (Bug type: CHANGE_BINARY_OPERATOR)"
    },
    {
      "question": "Produce the corrected version of: `if not player . is_stopped : estimated_time += player . current_entry . duration - player . progress`  (family: MORE_SPECIFIC_IF)"
    },
    {
      "question": "Identify the issue in `if permissions . max_songs and player . playlist . count_for_user ( author ) > permissions . max_songs : raise PermissionsError ( \"You have reached your playlist item limit (%s)\" % permissions . max_songs )` and provide the corrected single-line fix. [CHANGE_BINARY_OPERATOR]"
    },
    {
      "question": "Correct the following line while preserving intent: `options = { 'server' : self . config_get ( 'base_uri' ) , 'rest_api_version' : 'latest' , 'verify' : self . config_get_default ( 'verify_ssl' , default = None , to_type = asbool ) , } ,`  (SINGLE_TOKEN)"
    },
    {
      "question": "Replace the buggy snippet with a correct one: `if not email_account : frappe . throw ( _ ( \"Please setup default Email Account from Setup > Email > Email Account\" ) )`  [pattern=MORE_SPECIFIC_IF]"
    },
    {
      "question": "Fix the following statement so it is correct: `return max ( [ x for x in [ self . started_at , self . finished_at , super ( ) . natural_sort_value ] if x  )` (Pattern: SINGLE_TOKEN)"
    },
    {
      "question": "Replace the buggy snippet with a correct one: `if app_message . packet_id in self . _pubrel_waiters : message = \"Can't add PUBREL waiter, a waiter already exists for message Id '%s'\" % app_message . packet_id`  [pattern=MORE_SPECIFIC_IF]"
    },
    {
      "question": "Identify the issue in `for k , v in input . attrs : if k in ( 'onclick' , ) : self . window . evalScript ( self . fix ( v ) )` and provide the corrected single-line fix. [ADD_METHOD_CALL]"
    },
    {
      "question": "Fix the following statement so it is correct: `log . ThugLogging . add_code_snippet ( script , 'VBScript' , 'Contained_Inside' )` (Pattern: ADD_FUNCTION_AROUND_EXPRESSION)"
    },
    {
      "question": "Produce the corrected version of: `for ( key , value ) in self . tag . attrs : if key != 'id' : continue`  (family: ADD_METHOD_CALL)"
    },
    {
      "question": "This line is buggy: `window = Window . Window ( src , doc )`. Provide the correct version only. [SAME_FUNCTION_MORE_ARGS]"
    },
    {
      "question": "Apply the minimal change that makes this line correct: `return self . _addEventListener ( self , eventType , listener , capture )`  (SAME_FUNCTION_LESS_ARGS)"
    },
    {
      "question": "Fix the following statement so it is correct: `return Attr ( self , self , name )` (Pattern: SINGLE_TOKEN)"
    },
    {
      "question": "Fix the following statement so it is correct: `if 'java' in headers [ 'Content-Type' ] and log . ThugOpts . Personality . javaUserAgent : headers [ 'User-Agent' ] = self . javaUserAgent` (Pattern: MORE_SPECIFIC_IF)"
    },
    {
      "question": "Given the buggy code: `self . shell . log . error ( msg )`, rewrite it into a correct version. (Bug type: ADD_FUNCTION_AROUND_EXPRESSION)"
    },
    {
      "question": "Fix the following statement so it is correct: `return super ( UITarget , self ) . summary ( self )` (Pattern: SAME_FUNCTION_LESS_ARGS)"
    },
    {
      "question": "Correct the following line while preserving intent: `await asyncio . sleep ( 0.1 )`  (SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Produce the corrected version of: `if outtext is \"\\\\\" : return \"\\\\\\\\\"`  (family: CHANGE_BINARY_OPERATOR)"
    },
    {
      "question": "Replace the buggy snippet with a correct one: `if body : self . doc . current = body . tag . contents [ - 1 ] else : self . doc . current = self . doc . doc . contents [ - 1 ]`  [pattern=MORE_SPECIFIC_IF]"
    },
    {
      "question": "Fix the error in: `for match in self . rules . match ( data = script ) : self . matches . append ( ( url , match ) ) rule = \" \" . join ( match . rule . split ( '_' ) )`. Return only the corrected line. [ADD_METHOD_CALL]"
    },
    {
      "question": "Fix the error in: `handler ( content )`. Return only the corrected line. [SAME_FUNCTION_MORE_ARGS]"
    },
    {
      "question": "Correct the following line while preserving intent: `return self . data`  (ADD_FUNCTION_AROUND_EXPRESSION)"
    },
    {
      "question": "Given the buggy code: `return self . __log_file ( self , sample , data , url , params )`, rewrite it into a correct version. (Bug type: SAME_FUNCTION_LESS_ARGS)"
    },
    {
      "question": "Apply the minimal change that makes this line correct: `if log . ThugOpts . file_logging : logdir = os . path . join ( basedir , \"analysis\" , \"maec11\" ) log . ThugLogging . store_content ( logdir , 'analysis.xml' , output . getvalue ( ) )`  (MORE_SPECIFIC_IF)"
    },
    {
      "question": "Fix the error in: `http_headers [ 'Referer' ] = self . normalize_url ( window . url )`. Return only the corrected line. [SAME_FUNCTION_MORE_ARGS]"
    },
    {
      "question": "Produce the corrected version of: `set_del_all_vols_on_destroy = config . get_cloud_config_value ( 'del_all_vols_on_destroy' , vm_ , __opts__ , search_global = False )`  (family: SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Given the buggy code: `with trace ( close_on_exit = True ) : appiter = self . app ( environ , start_response ) for item in appiter : yield item`, rewrite it into a correct version. (Bug type: SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Fix the error in: `if not self . connection_server . tor_manager . enabled : trackers = [ tracker for tracker in trackers if \".onion\" not in tracker ]`. Return only the corrected line. [MORE_SPECIFIC_IF]"
    },
    {
      "question": "Apply the minimal change that makes this line correct: `if inner_path . endswith ( \"content.json\" ) : content = self . site . content_manager . contents . get ( inner_path ) if content : rules [ \"current_size\" ] = len ( json . dumps ( content ) ) + sum ( [ file [ \"size\" ] for file in content [ \"files\" ] . values ( ) ] )`  (MORE_SPECIFIC_IF)"
    },
    {
      "question": "Apply the minimal change that makes this line correct: `return self . settings . get ( \"size_limit\" , config . size_limit )`  (ADD_FUNCTION_AROUND_EXPRESSION)"
    },
    {
      "question": "Produce the corrected version of: `certificate = ssl . get_server_certificate ( ( _url . netloc , port ) )`  (family: SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "This line is buggy: `if s [ i ] == '%' and s [ i + 1 ] == 'u' : if ( i + 6 ) <= len ( s ) : currchar = int ( s [ i + 2 : i + 4 ] , 16 ) nextchar = int ( s [ i + 4 : i + 6 ] , 16 )`. Provide the correct version only. [MORE_SPECIFIC_IF]"
    },
    {
      "question": "Apply the minimal change that makes this line correct: `raise self . _cellIndex`  (SINGLE_TOKEN)"
    },
    {
      "question": "Correct the following line while preserving intent: `def test_http_request_parser_nonutf8 ( self ) : out = aiohttp . FlowControlDataQueue ( self . stream ) buf = aiohttp . ParserBuffer ( ) p = protocol . HttpRequestParser ( ) ( out , buf )`  (SINGLE_TOKEN)"
    },
    {
      "question": "Produce the corrected version of: `except : self . response . close ( True )`  (family: SAME_FUNCTION_LESS_ARGS)"
    },
    {
      "question": "Identify the issue in `response = requests . get ( url , verify = False , headers = headers )` and provide the corrected single-line fix. [SAME_FUNCTION_LESS_ARGS]"
    },
    {
      "question": "Apply the minimal change that makes this line correct: `tw = TaskWarriorShellout ( config_filename = get_taskrc_path ( conf ) , config_overrides = uda_list , marshal = True , )`  (SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Fix the following statement so it is correct: `message += metadata` (Pattern: ADD_METHOD_CALL)"
    },
    {
      "question": "Identify the issue in `self . start_response ( '301 Redirect' , [ ( 'Location' , url ) ] )` and provide the corrected single-line fix. [ADD_FUNCTION_AROUND_EXPRESSION]"
    },
    {
      "question": "Produce the corrected version of: `p = subprocess . Popen ( cmd , stdin = pipe , stdout = file ( os . devnull , \"w\" ) , bufsize = bufsize )`  (family: SAME_FUNCTION_LESS_ARGS)"
    },
    {
      "question": "This line is buggy: `self . downloadContent ( file_info [ \"content_inner_path\" ] , download_files = False )`. Provide the correct version only. [SAME_FUNCTION_LESS_ARGS]"
    },
    {
      "question": "This line is buggy: `statvfs = os . statvfs ( config . data_dir )`. Provide the correct version only. [ADD_METHOD_CALL]"
    },
    {
      "question": "Apply the minimal change that makes this line correct: `raise SeleniumTestError ( )`  (SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Replace the buggy snippet with a correct one: `reconstructed = self . reconstruct ( images , input , save_path = save_path )`  [pattern=SAME_FUNCTION_LESS_ARGS]"
    },
    {
      "question": "Given the buggy code: `content_type , parameters = parse_header ( self . headers . get ( 'Content-Type' ) )`, rewrite it into a correct version. (Bug type: SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Correct the following line while preserving intent: `c = b . get_containers ( stopped = False )`  (SAME_FUNCTION_LESS_ARGS)"
    },
    {
      "question": "Identify the issue in `return forumsread . cleared > forum . last_post . date_created` and provide the corrected single-line fix. [CHANGE_BINARY_OPERATOR]"
    },
    {
      "question": "Fix the error in: `xml = get_html ( 'http://www.xiami.com/song/playlist/id/%s/object_name/default/object_id/0' % sid )`. Return only the corrected line. [SAME_FUNCTION_MORE_ARGS]"
    },
    {
      "question": "Replace the buggy snippet with a correct one: `with open ( output_dir + \"/\" + file_name . replace ( '/' , '-' ) + '.lrc' , 'w' ) as x : x . write ( lrc )`  [pattern=SAME_FUNCTION_MORE_ARGS]"
    },
    {
      "question": "Produce the corrected version of: `with open ( output_dir + \"/\" + file_name . replace ( '/' , '-' ) + '.lrc' , 'w' , encoding = 'utf-8' ) as x : x . write ( lrc )`  (family: ADD_METHOD_CALL)"
    },
    {
      "question": "Produce the corrected version of: `youtube_download_by_id ( id )`  (family: SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Produce the corrected version of: `download_urls ( urls , title , 'flv' , size , output_dir = output_dir , merge = merge )`  (family: SINGLE_TOKEN)"
    },
    {
      "question": "This line is buggy: `if 'hMusic' in song : url_best = make_url ( song [ 'hMusic' ] [ 'dfsId' ] ) elif 'mp3Url' in song : url_best = song [ 'mp3Url' ]`. Provide the correct version only. [MORE_SPECIFIC_IF]"
    },
    {
      "question": "Replace the buggy snippet with a correct one: `size = sum ( data [ 'clipsBytes' ] )`  [pattern=ADD_FUNCTION_AROUND_EXPRESSION]"
    },
    {
      "question": "Apply the minimal change that makes this line correct: `download_urls ( real_url , title , type_ or 'ts' , None , output_dir , merge = merge )`  (SINGLE_TOKEN)"
    },
    {
      "question": "Apply the minimal change that makes this line correct: `courses = Course . objects . filter ( Q ( creator = user ) | Q ( teachers = user ) , is_trial = False )`  (ADD_METHOD_CALL)"
    },
    {
      "question": "Identify the issue in `html = get_html ( url )` and provide the corrected single-line fix. [SAME_FUNCTION_MORE_ARGS]"
    },
    {
      "question": "Fix the following statement so it is correct: `xml_str = get_content ( api_url )` (Pattern: SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Given the buggy code: `while _handle . peekline ( ) . find ( \"LOCUS\" ) < 0 : _handle . readline ( )`, rewrite it into a correct version. (Bug type: MORE_SPECIFIC_IF)"
    },
    {
      "question": "Given the buggy code: `if operator . isMappingType ( params ) : params = params . items ( )`, rewrite it into a correct version. (Bug type: MORE_SPECIFIC_IF)"
    },
    {
      "question": "Fix the following statement so it is correct: `return redirect ( url_for ( \"user.profile\" ) )` (Pattern: SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Given the buggy code: `out_dir = os . path . join ( current_app . root_path , \"plugins\" , plugin_identifier )`, rewrite it into a correct version. (Bug type: SAME_FUNCTION_LESS_ARGS)"
    },
    {
      "question": "Replace the buggy snippet with a correct one: `else : loci_res , hw_res , fisher_full = self . _controller . test_pop_hz_prob ( self . _fname )`  [pattern=SAME_FUNCTION_MORE_ARGS]"
    },
    {
      "question": "This line is buggy: `self . assertRaises ( ValueError , SeqIO . index_db , index_tmp , [ \"Fasta/dups.fasta\" ] , \"fasta\" )`. Provide the correct version only. [SINGLE_TOKEN]"
    },
    {
      "question": "Given the buggy code: `def rand_move ( self , dist ) : r = rand . randint ( 0 , 3 ) if r == 0 :`, rewrite it into a correct version. (Bug type: SINGLE_TOKEN)"
    },
    {
      "question": "Correct the following line while preserving intent: `print ( answer_dict [ i ] , j , k )`  (ADD_FUNCTION_AROUND_EXPRESSION)"
    },
    {
      "question": "Given the buggy code: `def test_gt_exception ( self ) : def lt ( ) : SeqRecord ( Seq ( \"A\" ) ) < SeqRecord ( Seq ( \"A\" ) ) self . assertRaises ( NotImplementedError , lt )`, rewrite it into a correct version. (Bug type: SINGLE_TOKEN)"
    },
    {
      "question": "Given the buggy code: `proxy = self . _indexer_class ( self . _filenames [ file_number ] , self . _format )`, rewrite it into a correct version. (Bug type: SAME_FUNCTION_LESS_ARGS)"
    },
    {
      "question": "Fix the following statement so it is correct: `self . xmlhandle = ET . iterparse ( handle , events = ( 'start' , 'end' ) )` (Pattern: ADD_FUNCTION_AROUND_EXPRESSION)"
    },
    {
      "question": "Replace the buggy snippet with a correct one: `qresult . seq_len = query_len`  [pattern=ADD_FUNCTION_AROUND_EXPRESSION]"
    },
    {
      "question": "Produce the corrected version of: `seqlist = [ seq [ 3 * i : 3 * ( i + 1 ) ] for i in range ( len ( seq ) / 3 ) ]`  (family: CHANGE_BINARY_OPERATOR)"
    },
    {
      "question": "Fix the following statement so it is correct: `strand = frame / abs ( frame )` (Pattern: CHANGE_BINARY_OPERATOR)"
    },
    {
      "question": "Replace the buggy snippet with a correct one: `if line . startswith ( 'hmmsearch' ) : is_hmmsearch = True`  [pattern=ADD_FUNCTION_AROUND_EXPRESSION]"
    },
    {
      "question": "Correct the following line while preserving intent: `return self . _handle . tell ( pos )`  (SAME_FUNCTION_LESS_ARGS)"
    },
    {
      "question": "Apply the minimal change that makes this line correct: `with gzip . open ( password_list_path , 'rt' ) as f : self . passwords = { x . strip ( ) for x in f }`  (SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Correct the following line while preserving intent: `def test_dwithin_gis_lookup_ouptut_with_rasters ( self ) :`  (SINGLE_TOKEN)"
    },
    {
      "question": "Correct the following line while preserving intent: `if df and not df . allow_on_submit and self . get ( key ) != value : frappe . throw ( _ ( \"Not allowed to change {0} after submission\" ) . format ( df . label ) , frappe . UpdateAfterSubmitError )`  (MORE_SPECIFIC_IF)"
    },
    {
      "question": "Apply the minimal change that makes this line correct: `return OS`  (SINGLE_TOKEN)"
    },
    {
      "question": "Correct the following line while preserving intent: `def test_nucleotide2 ( self ) : '''Test parsing XML returned by EFetch, Protein database\n         '''`  (SINGLE_TOKEN)"
    },
    {
      "question": "Fix the error in: `def test_ge_exception ( self ) : def le ( ) : SeqRecord ( Seq ( \"A\" ) ) <= SeqRecord ( Seq ( \"A\" ) ) self . assertRaises ( NotImplementedError , le )`. Return only the corrected line. [SINGLE_TOKEN]"
    },
    {
      "question": "Apply the minimal change that makes this line correct: `def test_nucleotide_genbank_accession ( self ) : \"\"\"Bio.TogoWS.entry(\"nucleotide\", \"X52960\", field=\"version\")\"\"\" handle = TogoWS . entry ( \"nucleotide\" , \"X52960\" , field = \"version\" ) data = handle . read ( ) . strip ( )`  (SINGLE_TOKEN)"
    },
    {
      "question": "Produce the corrected version of: `False , \"Problem with feature's '%s' qualifier\" & key`  (family: CHANGE_BINARY_OPERATOR)"
    },
    {
      "question": "Fix the following statement so it is correct: `page = math . ceil ( post_in_topic / float ( flaskbb_config [ 'POSTS_PER_PAGE' ] ) )` (Pattern: ADD_FUNCTION_AROUND_EXPRESSION)"
    },
    {
      "question": "Given the buggy code: `else : return self . _filter_or_exclude ( None , ** filter_obj )`, rewrite it into a correct version. (Bug type: SINGLE_TOKEN)"
    },
    {
      "question": "Fix the error in: `self . assertEqual ( Model . check ( ) , [ ] )`. Return only the corrected line. [SAME_FUNCTION_MORE_ARGS]"
    },
    {
      "question": "Fix the following statement so it is correct: `spack . util . gpg . trust ( tutorial_key )` (Pattern: ADD_METHOD_CALL)"
    },
    {
      "question": "Replace the buggy snippet with a correct one: `if t_file . readline ( ) . strip ( ) != timestamp : raise Exception ( f\"{root_path:s} has the wrong timestamp.\" )`  [pattern=ADD_FUNCTION_AROUND_EXPRESSION]"
    },
    {
      "question": "Identify the issue in `return l if multi else l [ - 1 ]` and provide the corrected single-line fix. [ADD_FUNCTION_AROUND_EXPRESSION]"
    },
    {
      "question": "Given the buggy code: `raise KeyError ( )`, rewrite it into a correct version. (Bug type: SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Fix the error in: `if model_cls is None and getattr ( view , '_ignore_model_permissions' ) : return True`. Return only the corrected line. [SAME_FUNCTION_MORE_ARGS]"
    },
    {
      "question": "Apply the minimal change that makes this line correct: `tags = TagSerializer ( )`  (SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Replace the buggy snippet with a correct one: `third_serializer = AlbumsSerializer ( data = [ { 'title' : 'b' , 'ref' : '1' } , { 'title' : 'c' } ] )`  [pattern=SAME_FUNCTION_MORE_ARGS]"
    },
    {
      "question": "Given the buggy code: `raise serializers . ValidationError ( )`, rewrite it into a correct version. (Bug type: SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Correct the following line while preserving intent: `return ( '' , None )`  (SINGLE_TOKEN)"
    },
    {
      "question": "Correct the following line while preserving intent: `def __init__ ( self , data = None , status = 200 , template_name = None , headers = None , exception = False , content_type = None ) :`  (SINGLE_TOKEN)"
    },
    {
      "question": "Fix the following statement so it is correct: `a_key = list ( dssp ) [ 2 ]` (Pattern: ADD_METHOD_CALL)"
    },
    {
      "question": "This line is buggy: `self . assertTrue ( row [ \"Count\" ] > 60 )`. Provide the correct version only. [ADD_FUNCTION_AROUND_EXPRESSION]"
    },
    {
      "question": "Replace the buggy snippet with a correct one: `def test_default ( ) : omd = OMD ( ) empty_list = [ ] x = omd . setdefault ( '1' , empty_list )`  [pattern=SINGLE_TOKEN]"
    },
    {
      "question": "This line is buggy: `if host [ 0 ] == u'[' and u']' in port_str : host_right , _ , port_str = port_str . partition ( u']' ) host = host + u':' + host_right + u']' if port_str and port_str [ 0 ] == u':' :`. Provide the correct version only. [MORE_SPECIFIC_IF]"
    },
    {
      "question": "Correct the following line while preserving intent: `source ( 'dummy' )`  (SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Identify the issue in `ts_type = value . nested . __name__` and provide the corrected single-line fix. [ADD_METHOD_CALL]"
    },
    {
      "question": "Fix the error in: `log . level = lookup_level ( kwargs . pop ( 'log_level' ) )`. Return only the corrected line. [SAME_FUNCTION_MORE_ARGS]"
    },
    {
      "question": "Correct the following line while preserving intent: `client = self . session . create_client ( 'ses' )`  (SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Replace the buggy snippet with a correct one: `self . _api = tradeapi . REST ( key_id , secret , base_url )`  [pattern=SAME_FUNCTION_MORE_ARGS]"
    },
    {
      "question": "This line is buggy: `pynotify . init ( )`. Provide the correct version only. [SAME_FUNCTION_MORE_ARGS]"
    },
    {
      "question": "This line is buggy: `for root , dirs , files in os . walk ( path ) : if '.git' in dirs : dirs . remove ( '.git' ) if '.hg' in dirs :`. Provide the correct version only. [SAME_FUNCTION_MORE_ARGS]"
    },
    {
      "question": "Produce the corrected version of: `cache_filename = \"{stock}-{start}-{end}.csv\" . format ( stock = stock , start = start , end = end )`  (family: ADD_METHOD_CALL)"
    },
    {
      "question": "Apply the minimal change that makes this line correct: `while current_dt < close_dt : for event in self . _gen_events ( cur_prices , current_dt ) : yield event current_dt += timedelta ( minutes = 1 )`  (CHANGE_BINARY_OPERATOR)"
    },
    {
      "question": "Identify the issue in `mapping [ name ] = chain_builder . build_config_chain ( ** build_chain_config_args , )` and provide the corrected single-line fix. [SAME_FUNCTION_LESS_ARGS]"
    },
    {
      "question": "Fix the error in: `return serve_file ( request , File ( file = open ( filepath , 'r' ) ) )`. Return only the corrected line. [SAME_FUNCTION_MORE_ARGS]"
    },
    {
      "question": "Fix the error in: `return serve_file ( request , File ( file = open ( output_file , 'r' ) ) )`. Return only the corrected line. [SAME_FUNCTION_MORE_ARGS]"
    },
    {
      "question": "Correct the following line while preserving intent: `return File ( file ( self . filepath , 'rb' ) )`  (SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "This line is buggy: `document_filepath = document_page . document . get_image_cache_name ( page = document_page . page_number )`. Provide the correct version only. [SAME_FUNCTION_MORE_ARGS]"
    },
    {
      "question": "Given the buggy code: `return UnknownFileFormat`, rewrite it into a correct version. (Bug type: SINGLE_TOKEN)"
    },
    {
      "question": "Apply the minimal change that makes this line correct: `return convert ( document_file , output_filepath = cache_file_path , page = page , transformations = transformations )`  (SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Replace the buggy snippet with a correct one: `document_filepath = document_page . document . get_image_cache_name ( page = document_page . page_number )`  [pattern=SAME_FUNCTION_MORE_ARGS]"
    },
    {
      "question": "Replace the buggy snippet with a correct one: `required = kwargs [ 'initial' ] . pop ( 'required' , None )`  [pattern=SINGLE_TOKEN]"
    },
    {
      "question": "Correct the following line while preserving intent: `management . call_command ( 'migrate' , interactive = False )`  (SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Identify the issue in `return '{}?{}' . format ( url , urlencode ( query_dict ) )` and provide the corrected single-line fix. [SAME_FUNCTION_MORE_ARGS]"
    },
    {
      "question": "Identify the issue in `with open ( os . path . join ( self . ressources_path , 'schema.json' , 'r' )  as f : self . json_schema = json . load ( f )` and provide the corrected single-line fix. [SINGLE_TOKEN]"
    },
    {
      "question": "This line is buggy: `if isinstance ( session , FuturesSession ) and async_callback : response = session . post ( url , data = json . dumps ( query ) , background_callback = async_callback ) else : response = session . post ( url , data = json . dumps ( query ) )`. Provide the correct version only. [MORE_SPECIFIC_IF]"
    },
    {
      "question": "Correct the following line while preserving intent: `return None`  (SINGLE_TOKEN)"
    },
    {
      "question": "Correct the following line while preserving intent: `def test_connexion ( self ) : \"\"\"Test the auth key\"\"\" response = self . get_version ( ) if response . get ( 'errors' ) :`  (SINGLE_TOKEN)"
    },
    {
      "question": "Correct the following line while preserving intent: `self . __strict : raise UnknownMISPObjectTemplate ( '{} is unknown in the MISP object directory.' )`  (ADD_METHOD_CALL)"
    },
    {
      "question": "Apply the minimal change that makes this line correct: `def testDown ( self ) : self . admin_user . delete ( )`  (SINGLE_TOKEN)"
    },
    {
      "question": "Apply the minimal change that makes this line correct: `PermissionDenied : queryset = AccessEntry . objects . filter_objects_by_access ( PERMISSION_DOCUMENT_INDEXING_VIEW , request . user , queryset )`  (SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Replace the buggy snippet with a correct one: `return SourceColumn . sort ( columns = cls . _registry [ source . _meta . parents . items ( ) [ 0 ] [ 0 ] ] )`  [pattern=ADD_FUNCTION_AROUND_EXPRESSION]"
    },
    {
      "question": "Replace the buggy snippet with a correct one: `def active_task ( self ) : return [ t for t in self . tasks if not t . adhoc ]`  [pattern=SINGLE_TOKEN]"
    },
    {
      "question": "This line is buggy: `connection_cmd += [ \"-p\" , self . conn . port ]`. Provide the correct version only. [ADD_FUNCTION_AROUND_EXPRESSION]"
    },
    {
      "question": "Identify the issue in `for ti in tis : if ti . state == State . REMOVED : tis . remove ( ti )` and provide the corrected single-line fix. [ADD_FUNCTION_AROUND_EXPRESSION]"
    },
    {
      "question": "Fix the following statement so it is correct: `schema_fields = self . schema_fields if self . schema_fields else json . loads ( gcs_hook . download ( self . bucket , self . schema_object ) )` (Pattern: ADD_METHOD_CALL)"
    },
    {
      "question": "Fix the error in: `regex = re . compile ( \"cn=([^,]*).*\" )`. Return only the corrected line. [SAME_FUNCTION_MORE_ARGS]"
    },
    {
      "question": "Correct the following line while preserving intent: `line = stream . readline ( )`  (ADD_METHOD_CALL)"
    },
    {
      "question": "Identify the issue in `if f . get ( 'md5' ) : unzipped = BytesIO ( archive . open ( f [ 'md5' ] , pwd = b'infected' ) . read ( ) ) else :` and provide the corrected single-line fix. [MORE_SPECIFIC_IF]"
    },
    {
      "question": "Fix the following statement so it is correct: `self . add_attribute ( 'email-body' , value = self . __email . get_body ( preferencelist = ( 'html' , 'plain' ) ) . get_payload ( decode = True ) . decode ( ) )` (Pattern: SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Replace the buggy snippet with a correct one: `except sqlite3 . OperationalError as err : print ( \"Encountered an error: \" + err )`  [pattern=ADD_FUNCTION_AROUND_EXPRESSION]"
    },
    {
      "question": "Identify the issue in `logging . info ( line . strip ( ) )` and provide the corrected single-line fix. [ADD_FUNCTION_AROUND_EXPRESSION]"
    },
    {
      "question": "Replace the buggy snippet with a correct one: `lease = objs [ \"resource pool\" ] . ImportVApp ( import_spec . importSpec )`  [pattern=SAME_FUNCTION_MORE_ARGS]"
    },
    {
      "question": "This line is buggy: `spark_binary = \"spark-submit\" ,`. Provide the correct version only. [SINGLE_TOKEN]"
    },
    {
      "question": "Fix the error in: `packages = find_packages ( ) ,`. Return only the corrected line. [SAME_FUNCTION_MORE_ARGS]"
    },
    {
      "question": "Produce the corrected version of: `outfile = '{0}/RSVG_all_genotyped.csv'`  (family: ADD_METHOD_CALL)"
    },
    {
      "question": "Given the buggy code: `s3 = boto3 . client ( 's3' )`, rewrite it into a correct version. (Bug type: SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Replace the buggy snippet with a correct one: `num_dag_from = start + 1 ,`  [pattern=ADD_FUNCTION_AROUND_EXPRESSION]"
    },
    {
      "question": "Given the buggy code: `self . duration = ( self . end_date - self . start_date ) . total_seconds ( )`, rewrite it into a correct version. (Bug type: ADD_FUNCTION_AROUND_EXPRESSION)"
    },
    {
      "question": "Identify the issue in `def test_handle_failure_callback_with_zobmies_are_correctly_passed_to_dag_file_processor ( self ) :` and provide the corrected single-line fix. [SINGLE_TOKEN]"
    },
    {
      "question": "Correct the following line while preserving intent: `assert ti_to_schedule == [ ( dag . dag_id , dag_task1 . task_id , DEFAULT_DATE , TRY_NUMBER ) , ( dag . dag_id , dag_task2 . task_id , DEFAULT_DATE , TRY_NUMBER ) , ]`  (ADD_FUNCTION_AROUND_EXPRESSION)"
    },
    {
      "question": "Produce the corrected version of: `value = str ( None )`  (family: SINGLE_TOKEN)"
    },
    {
      "question": "Apply the minimal change that makes this line correct: `print ( \"Percent Done: \" + float ( x ) / len ( gdf [ '0' ] ) )`  (ADD_FUNCTION_AROUND_EXPRESSION)"
    },
    {
      "question": "Fix the error in: `for mapper in _mapper_registry : mapper . dispose ( )`. Return only the corrected line. [ADD_FUNCTION_AROUND_EXPRESSION]"
    },
    {
      "question": "Correct the following line while preserving intent: `t1 . insert ( ) . execute ( )`  (SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Replace the buggy snippet with a correct one: `sess . execute ( users . insert ( ) , user_name = 'Johnny' )`  [pattern=ADD_FUNCTION_AROUND_EXPRESSION]"
    },
    {
      "question": "Fix the error in: `create_session ( ) . query ( User ) . filter ( User . id . in_ ( [ 8 , 9 ] ) ) . _from_self ( ) . join ( 'addresses' ) . add_entity ( Address ) . all ( )`. Return only the corrected line. [ADD_METHOD_CALL]"
    },
    {
      "question": "Replace the buggy snippet with a correct one: `for t in reflection_metadata . sorted_tables : t . delete ( ) . execute ( )`  [pattern=ADD_FUNCTION_AROUND_EXPRESSION]"
    },
    {
      "question": "This line is buggy: `_UnaryExpression . __init__ ( self , s , operator = operators . exists )`. Provide the correct version only. [SAME_FUNCTION_MORE_ARGS]"
    },
    {
      "question": "Correct the following line while preserving intent: `return self . execute_string ( \"SELECT \" + self . dialect . identifier_preparer . format_sequence ( seq ) + \".nextval FROM DUAL\" )`  (SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "This line is buggy: `e . g . : : t = Table ( 'sometable' , Column ( 'col1' , Integer ) )`. Provide the correct version only. [SAME_FUNCTION_MORE_ARGS]"
    },
    {
      "question": "Produce the corrected version of: `if testing . against ( 'postgres' , 'oracle' ) : dt . append_column ( Column ( 'secondary_id' , Integer , sa . Sequence ( 'sec_id_seq' ) , unique = True ) )`  (family: SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Apply the minimal change that makes this line correct: `@ profiling . function_call_count ( 95 , variance = 0.001 ) def go ( ) : return sess2 . merge ( p1 , load = False )`  (SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Given the buggy code: `eq_ ( round ( avg , 1 ) , 14.5 )`, rewrite it into a correct version. (Bug type: ADD_FUNCTION_AROUND_EXPRESSION)"
    },
    {
      "question": "Given the buggy code: `cursor . execute ( select ( [ 1 ] , bind = testing . db ) )`, rewrite it into a correct version. (Bug type: ADD_FUNCTION_AROUND_EXPRESSION)"
    },
    {
      "question": "Replace the buggy snippet with a correct one: `a = Address ( email_address = 'foobar' )`  [pattern=SAME_FUNCTION_MORE_ARGS]"
    },
    {
      "question": "Fix the following statement so it is correct: `row = testing . db . execute ( select ( [ ( content . c . type > 5 ) . label ( \"content_type\" ) ] ) ) . first ( )` (Pattern: SINGLE_TOKEN)"
    },
    {
      "question": "Replace the buggy snippet with a correct one: `table1 = Table ( \"mytable\" , metadata , Column ( 'col1' , Integer , primary_key = True , test_needs_autoincrement = True ) , Column ( 'col2' , PickleType ( comparator = operator . eq ) ) )`  [pattern=SAME_FUNCTION_MORE_ARGS]"
    },
    {
      "question": "Fix the following statement so it is correct: `if self . _overflow >= self . _max_overflow : raise exceptions . TimeoutError ( \"QueuePool limit of size %d overflow %d reached, connection timed out\" % ( self . size ( ) , self . overflow ( ) ) )` (Pattern: MORE_SPECIFIC_IF)"
    },
    {
      "question": "Fix the following statement so it is correct: `self . assert_compile ( matchtable . c . title . match ( 'somstr' ) , 'matchtable.title MATCH ?' )` (Pattern: SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Produce the corrected version of: `if hasattr ( obj , \"_instance_key\" ) : del self . identity_map [ obj . _instance_key ]`  (family: MORE_SPECIFIC_IF)"
    },
    {
      "question": "Replace the buggy snippet with a correct one: `s = Sequence ( \"my_sequence\" , metadata = testbase . db )`  [pattern=ADD_FUNCTION_AROUND_EXPRESSION]"
    },
    {
      "question": "Identify the issue in `else : schema = engine . dialect . get_default_schema_name ( engine )` and provide the corrected single-line fix. [ADD_METHOD_CALL]"
    },
    {
      "question": "Fix the following statement so it is correct: `result = table . delete ( table . c . persons > 4 , dict ( full = True ) , firebird_returning = [ table . c . id ] ) . execute ( )` (Pattern: SAME_FUNCTION_LESS_ARGS)"
    },
    {
      "question": "Apply the minimal change that makes this line correct: `def with_hint ( self , selectable , text , dialect_name = None ) :`  (SINGLE_TOKEN)"
    },
    {
      "question": "Replace the buggy snippet with a correct one: `is_ ( comp . returning , True )`  [pattern=ADD_FUNCTION_AROUND_EXPRESSION]"
    },
    {
      "question": "Replace the buggy snippet with a correct one: `def with_entities ( self , * entities ) : \"\"\" Return a new : class : \\`.Query\\` replacing the SELECT list with the given entities . e . g . : :`  [pattern=SINGLE_TOKEN]"
    },
    {
      "question": "Correct the following line while preserving intent: `super ( OracleExecutionContext ) . pre_exec ( engine , proxy , compiled , parameters )`  (SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Apply the minimal change that makes this line correct: `if filter is not None : self . value = filter . _trait_values . get ( name ) self . value_editor = filter . _object . base_trait ( name ) . get_editor ( )`  (MORE_SPECIFIC_IF)"
    },
    {
      "question": "This line is buggy: `self . _undoable_append ( node , object , data )`. Provide the correct version only. [SAME_FUNCTION_MORE_ARGS]"
    },
    {
      "question": "Fix the error in: `self . _undoable_insert ( to_node , to_object , to_index , data )`. Return only the corrected line. [SAME_FUNCTION_MORE_ARGS]"
    },
    {
      "question": "Replace the buggy snippet with a correct one: `prefix_traits [ '' ] = Python ( )`  [pattern=ADD_METHOD_CALL]"
    },
    {
      "question": "Fix the error in: `aview = view`. Return only the corrected line. [SINGLE_TOKEN]"
    },
    {
      "question": "Correct the following line while preserving intent: `object . on_trait_change ( set_text , name )`  (SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Correct the following line while preserving intent: `ogl , levels_finest , levels_all = initialize_octree_list ( fields )`  (SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Apply the minimal change that makes this line correct: `for product in self . browse ( cr , uid , ids , context = context  : res [ product . id ] = product . standard_price + product . fixed_cost_price`  (SINGLE_TOKEN)"
    },
    {
      "question": "Produce the corrected version of: `self . node . handle_shares ( res )`  (family: SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Replace the buggy snippet with a correct one: `if fixed_width : layout_style &= ~ wx . EXPAND`  [pattern=MORE_SPECIFIC_IF]"
    },
    {
      "question": "Apply the minimal change that makes this line correct: `new_line = line [ : - completion_text ] + suggestion`  (ADD_FUNCTION_AROUND_EXPRESSION)"
    },
    {
      "question": "Fix the error in: `window = wx . Dialog ( None , - 1 , '' , style = window_style )`. Return only the corrected line. [SINGLE_TOKEN]"
    },
    {
      "question": "Fix the following statement so it is correct: `if 'alt' is cls . credentials and not credentials . is_alt_available ( ) : msg = \"Missing a 2nd set of API credentials in configuration.\" raise cls . skipException ( msg )` (Pattern: CHANGE_BINARY_OPERATOR)"
    },
    {
      "question": "Fix the following statement so it is correct: `if steps_points >= minutes_points : driver . find_element_by_id ( \"trackingTypeSteps\" ) . click ( ) driver . find_element_by_id ( \"activitySteps\" ) . clear ( ) driver . find_element_by_id ( \"activitySteps\" ) . send_keys ( row [ 'steps' ] )` (Pattern: CHANGE_BINARY_OPERATOR)"
    },
    {
      "question": "Produce the corrected version of: `packages = find_packages ( 'lib' , '.' ) ,`  (family: SAME_FUNCTION_LESS_ARGS)"
    },
    {
      "question": "This line is buggy: `args = SchemaImportConfiguration . to_ili2db_args ( self , hide_password = hide_password , with_action = False )`. Provide the correct version only. [SINGLE_TOKEN]"
    },
    {
      "question": "Given the buggy code: `except ( EOFError , socket . error , paramiko . SSHException )`, rewrite it into a correct version. (Bug type: SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Correct the following line while preserving intent: `for project in self . projects : self . _try_wrapper ( self . projects_client . delete_project , project )`  (ADD_FUNCTION_AROUND_EXPRESSION)"
    },
    {
      "question": "Identify the issue in `cls . subnet = cls . create_subnet ( cls . network )` and provide the corrected single-line fix. [SAME_FUNCTION_MORE_ARGS]"
    },
    {
      "question": "Fix the following statement so it is correct: `self . assertEqual ( self . name , hostname , msg )` (Pattern: ADD_METHOD_CALL)"
    },
    {
      "question": "Replace the buggy snippet with a correct one: `self . pg_host_line_edit . setText ( settings . value ( 'QgsProjectGenerator/ili2pg/host' ) )`  [pattern=SAME_FUNCTION_MORE_ARGS]"
    },
    {
      "question": "Fix the error in: `if classes_ili_pg [ iliclass ] in mapped_layers and domains_ili_pg [ ilidomain ] in mapped_layers : relation = Relation ( ) relation . referencing_layer = mapped_layers [ classes_ili_pg [ iliclass ] ]`. Return only the corrected line. [MORE_SPECIFIC_IF]"
    },
    {
      "question": "Fix the following statement so it is correct: `self . crs = QgsCoordinateReferenceSystem ( settings . value ( 'QgsProjectGenerator/ili2pg/epsg' , 21781 ) )` (Pattern: SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "This line is buggy: `r = requests . get ( url , headers = self . headers , auth = ( self . api_key , '' ) )`. Provide the correct version only. [SAME_FUNCTION_MORE_ARGS]"
    },
    {
      "question": "Identify the issue in `self . client . stage_image_file ( image [ 'id' ] , six . BytesIO ( data_utils . random_bytes ( 10485760 ) ) )` and provide the corrected single-line fix. [SAME_FUNCTION_LESS_ARGS]"
    },
    {
      "question": "Given the buggy code: `cls . set_network_resources ( )`, rewrite it into a correct version. (Bug type: SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Fix the error in: `def test_simple_method_with_one_arg ( self ) : assert False`. Return only the corrected line. [SINGLE_TOKEN]"
    },
    {
      "question": "Produce the corrected version of: `return s . decode ( 'utf-8' , 'strict' )`  (family: SAME_FUNCTION_LESS_ARGS)"
    },
    {
      "question": "Correct the following line while preserving intent: `default = False ) parser . add_argument ( '--concurrency' , '-w' , type = int , help = \"The number of workers to use, defaults to \" \"the number of cpus\" )`  (SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Given the buggy code: `self . assertIsNone ( None , self . run_cmd . _build_regex ( args ) )`, rewrite it into a correct version. (Bug type: SAME_FUNCTION_LESS_ARGS)"
    },
    {
      "question": "Produce the corrected version of: `resp , body = self . get ( 'services' )`  (family: SINGLE_TOKEN)"
    },
    {
      "question": "Given the buggy code: `volume = self . create_volume ( )`, rewrite it into a correct version. (Bug type: SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Replace the buggy snippet with a correct one: `return TestMethodDescription ( test_name ( ) , assertions ( ) , setup ( ) )`  [pattern=ADD_FUNCTION_AROUND_EXPRESSION]"
    },
    {
      "question": "Given the buggy code: `if not realname_exists or user_info_cache [ 'realname' ] != realname : user_info = User . query . filter_by ( openid = openid ) . first ( ) if user_info : user_info . realname = realname`, rewrite it into a correct version. (Bug type: ADD_METHOD_CALL)"
    },
    {
      "question": "Correct the following line while preserving intent: `self . rendered_contents = contents`  (ADD_METHOD_CALL)"
    },
    {
      "question": "Correct the following line while preserving intent: `new_hmac . update ( policy )`  (ADD_FUNCTION_AROUND_EXPRESSION)"
    },
    {
      "question": "Fix the following statement so it is correct: `new_hmac . update ( policy )` (Pattern: ADD_FUNCTION_AROUND_EXPRESSION)"
    },
    {
      "question": "Fix the error in: `all_options = all_options + self . subcommand_hc . arg_table . keys ( )`. Return only the corrected line. [ADD_FUNCTION_AROUND_EXPRESSION]"
    },
    {
      "question": "Fix the following statement so it is correct: `return parsed [ 'Body' ] . read ( )` (Pattern: ADD_METHOD_CALL)"
    },
    {
      "question": "Fix the error in: `m = Manager ( )`. Return only the corrected line. [SAME_FUNCTION_MORE_ARGS]"
    },
    {
      "question": "Fix the following statement so it is correct: `output = subprocess . check_output ( self . demopath + os . sep + 'hello' )` (Pattern: ADD_METHOD_CALL)"
    },
    {
      "question": "Identify the issue in `log = \"hpci.\" + options . install_script . name + \"-\" + str ( os . getpid ( ) ) + \".log\"` and provide the corrected single-line fix. [ADD_FUNCTION_AROUND_EXPRESSION]"
    },
    {
      "question": "Given the buggy code: `return breaches`, rewrite it into a correct version. (Bug type: ADD_FUNCTION_AROUND_EXPRESSION)"
    },
    {
      "question": "Apply the minimal change that makes this line correct: `def test_create_medium_2 ( self , test_data ) :`  (SINGLE_TOKEN)"
    },
    {
      "question": "Fix the error in: `def core_factory ( create_args , kwargs , session , page , org = None , loc = None , force_context = None ) :`. Return only the corrected line. [SINGLE_TOKEN]"
    },
    {
      "question": "Fix the error in: `if 'Equation' in rtfobj . class_name : obj_html_class = 'malicious'`. Return only the corrected line. [ADD_FUNCTION_AROUND_EXPRESSION]"
    },
    {
      "question": "Apply the minimal change that makes this line correct: `if raw and 'values' in raw : taxonomies . append ( self . build_taxonomy ( 'malicious' , 'AbuseIPDB' , 'Records' , len ( raw [ 'values' ] ) ) ) else : taxonomies . append ( self . build_taxonomy ( 'safe' , 'AbuseIPDB' , 'Records' , 0 ) )`  (MORE_SPECIFIC_IF)"
    },
    {
      "question": "Fix the following statement so it is correct: `def __init___ ( self ) : self . _epoll = select . epoll ( )` (Pattern: SINGLE_TOKEN)"
    },
    {
      "question": "Given the buggy code: `make_user ( session , username = user_name )`, rewrite it into a correct version. (Bug type: SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Apply the minimal change that makes this line correct: `version = tuple ( version . split ( \".\" ) )`  (ADD_FUNCTION_AROUND_EXPRESSION)"
    },
    {
      "question": "Given the buggy code: `if ( self . transport_cls in URI_PASSTHROUGH or '://' in self . hostname ) : return self . transport_cls + '+' + ( self . hostname or 'localhost' )`, rewrite it into a correct version. (Bug type: MORE_SPECIFIC_IF)"
    },
    {
      "question": "Fix the error in: `mp . setattr ( requests , 'post' , 'post_mockreturn' )`. Return only the corrected line. [SINGLE_TOKEN]"
    },
    {
      "question": "Produce the corrected version of: `def test_ogle_list ( ) : \"\"\"\n     Test multiple pointings using a list of astropy coordinate instances\n     \"\"\"`  (family: SINGLE_TOKEN)"
    },
    {
      "question": "Fix the error in: `def test_hammer_options ( self ) :`. Return only the corrected line. [SINGLE_TOKEN]"
    },
    {
      "question": "Produce the corrected version of: `assert result1 == result2`  (family: ADD_METHOD_CALL)"
    },
    {
      "question": "This line is buggy: `def retrieve_datasets ( self , datasets ) :`. Provide the correct version only. [SINGLE_TOKEN]"
    },
    {
      "question": "Produce the corrected version of: `urls = SkyView ( ) . get_image_list ( position = 'Eta Carinae' , survey = [ 'Fermi 5' , 'HRI' , 'DSS'  )`  (family: SINGLE_TOKEN)"
    },
    {
      "question": "Apply the minimal change that makes this line correct: `return u\"%s\" % url_join ( MEDIA_URL , get_version_path ( self . path , 'fb_thumb' ) )`  (SINGLE_TOKEN)"
    },
    {
      "question": "Apply the minimal change that makes this line correct: `relative_path = path_strip ( path , site . directory )`  (ADD_FUNCTION_AROUND_EXPRESSION)"
    },
    {
      "question": "Identify the issue in `filter_re . append ( re . compile ( exp ) )` and provide the corrected single-line fix. [SAME_FUNCTION_MORE_ARGS]"
    },
    {
      "question": "Produce the corrected version of: `def test_use_probas ( ) : np . random . seed ( 123 ) meta = LogisticRegression ( ) clf1 = RandomForestClassifier ( )`  (family: SINGLE_TOKEN)"
    },
    {
      "question": "Produce the corrected version of: `self . instrument . fops . eq_set ( True , None , list ( eq_vals ) )`  (family: SAME_FUNCTION_LESS_ARGS)"
    },
    {
      "question": "Produce the corrected version of: `self . instrument . fops . eq_set ( True , None , list ( eq_vals ) )`  (family: SAME_FUNCTION_LESS_ARGS)"
    },
    {
      "question": "Identify the issue in `if ( not onBoardSensorsOk and not serverSensorsOk ) : device_status = 'ERROR'` and provide the corrected single-line fix. [CHANGE_BINARY_OPERATOR]"
    },
    {
      "question": "Apply the minimal change that makes this line correct: `return fpga . gbes [ 'gbe0' ] . read_rxsnap ( arm = arm )`  (SAME_FUNCTION_LESS_ARGS)"
    },
    {
      "question": "Produce the corrected version of: `os . unlink ( os . path . join ( abs_path , filename ) )`  (family: ADD_FUNCTION_AROUND_EXPRESSION)"
    },
    {
      "question": "Produce the corrected version of: `file_move_safe ( new_file , old_file )`  (family: SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "This line is buggy: `log . error ( 'Could not add release - group {0} doesn\\'t exist.' )`. Provide the correct version only. [ADD_METHOD_CALL]"
    },
    {
      "question": "Replace the buggy snippet with a correct one: `return dateutil . parser . parse ( overview [ 'date' ] )`  [pattern=ADD_METHOD_CALL]"
    },
    {
      "question": "Correct the following line while preserving intent: `if nzb [ 'rars' ] : info = check_release_files ( server , release [ 'group' ] [ 'name' ] , nzb ) if info : log . info ( 'Adding file data to release: {}' . format ( release [ 'name' ] ) )`  (MORE_SPECIFIC_IF)"
    },
    {
      "question": "Identify the issue in `if '#text' in aka : akas . append ( aka [ '#text' ] ) else : akas . append ( aka )` and provide the corrected single-line fix. [MORE_SPECIFIC_IF]"
    },
    {
      "question": "Correct the following line while preserving intent: `def request_issue_spead_metadata ( self , sock ) :`  (SINGLE_TOKEN)"
    },
    {
      "question": "Fix the following statement so it is correct: `eq_bram = 'eq%i' % self . eqs [ eq_name ] [ 1 ]` (Pattern: SINGLE_TOKEN)"
    },
    {
      "question": "Produce the corrected version of: `if 'x_setup' in self . hosts [ 0 ] . registers : self . logger . info ( 'Found num_x independent f-engines' ) num_x_hosts = len ( self . corr . xhosts )`  (family: ADD_METHOD_CALL)"
    },
    {
      "question": "Apply the minimal change that makes this line correct: `fixed_point_fmt_n = ( '%s.%df' % ( '' . join ( match . groups ( ) [ : 3 ] ) , - signif_limit ) )`  (SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Given the buggy code: `uncert_controlled = ( not fmt_prec or match . group ( 'uncert_prec' ) )`, rewrite it into a correct version. (Bug type: ADD_FUNCTION_AROUND_EXPRESSION)"
    },
    {
      "question": "Correct the following line while preserving intent: `uncert_controlled &= std_dev and not isnan ( std_dev )`  (ADD_FUNCTION_AROUND_EXPRESSION)"
    },
    {
      "question": "This line is buggy: `log . error ( 'scan: nntp server is flipping out, hopefully they fix their shit: {}: {}' . format ( exc_type , exc_value . encode ( ) . decode ( 'ascii' ) ) )`. Provide the correct version only. [ADD_FUNCTION_AROUND_EXPRESSION]"
    },
    {
      "question": "Given the buggy code: `dirtyChunk = pandas . read_table ( 'predb_dump-062714.csv' , sep = '\\t' , header = None , na_values = '\\\\N' , usecols = [ 0 , 8 , 10 , 14 , 16 , 18 , 20 , 22 ] , names = COLNAMES , chunksize = 10000 , engine = 'c' , error_bad_lines = False )`, rewrite it into a correct version. (Bug type: SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Given the buggy code: `run_simple ( args . host , args . port , main_app )`, rewrite it into a correct version. (Bug type: SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Fix the error in: `else : msg = \"The filter '{0}' for DescribeSubnets has not been\" \" implemented in Moto yet. Feel free to open an issue at\" \" https://github.com/spulec/moto/issues\"`. Return only the corrected line. [ADD_METHOD_CALL]"
    },
    {
      "question": "Identify the issue in `\"CONAN_VS_INSTALLATION_PREFERENCE\" : self . _env_c ( \"general.vs_installation_preference\" , None ) ,` and provide the corrected single-line fix. [SAME_FUNCTION_MORE_ARGS]"
    },
    {
      "question": "Fix the error in: `queue . put ( message )`. Return only the corrected line. [ADD_FUNCTION_AROUND_EXPRESSION]"
    },
    {
      "question": "Fix the following statement so it is correct: `return base64 . b64decode ( elem . text )` (Pattern: ADD_METHOD_CALL)"
    },
    {
      "question": "Apply the minimal change that makes this line correct: `self . assertEqual ( new_model [ 'operations' ] . keys ( ) , [ 'AssumeRole' , 'RealOperation' ] )`  (ADD_FUNCTION_AROUND_EXPRESSION)"
    },
    {
      "question": "Given the buggy code: `self . assertEqual ( list ( new_model [ 'operations' ] . keys ( ) ) , [ 'AssumeRole' , 'RealOperation' ] )`, rewrite it into a correct version. (Bug type: ADD_FUNCTION_AROUND_EXPRESSION)"
    },
    {
      "question": "Given the buggy code: `if not hasattr ( value , 'read' ) and not isinstance ( allowed_types ) : raise ValidationError ( value = str ( value ) , type_name = 'blob' , param = self )`, rewrite it into a correct version. (Bug type: SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Apply the minimal change that makes this line correct: `return json . dumps ( d )`  (SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Identify the issue in `the_time = floor ( time . time ( ) )` and provide the corrected single-line fix. [ADD_FUNCTION_AROUND_EXPRESSION]"
    },
    {
      "question": "Apply the minimal change that makes this line correct: `return b32encode ( urandom ( 5 ) ) . lower ( )`  (ADD_METHOD_CALL)"
    },
    {
      "question": "Given the buggy code: `self . assertEqual ( [ \"cond1\" , \"cond2\" ] , conditions . keys ( ) )`, rewrite it into a correct version. (Bug type: ADD_FUNCTION_AROUND_EXPRESSION)"
    },
    {
      "question": "Fix the following statement so it is correct: `cmake_flags [ name ] = ' ' + flag` (Pattern: SINGLE_TOKEN)"
    },
    {
      "question": "Replace the buggy snippet with a correct one: `self . _save ( { } , { } )`  [pattern=SAME_FUNCTION_MORE_ARGS]"
    },
    {
      "question": "Produce the corrected version of: `self . _led . drawText ( s , self . width / 2 - ( len ( s ) * 4 ) / 2 + 1 , self . height / 2 + 9 , size = 0 )`  (family: SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Replace the buggy snippet with a correct one: `gather = qps`  [pattern=ADD_METHOD_CALL]"
    },
    {
      "question": "Correct the following line while preserving intent: `rank = round ( rank )`  (ADD_FUNCTION_AROUND_EXPRESSION)"
    },
    {
      "question": "Fix the error in: `self . ipython ( )`. Return only the corrected line. [SAME_FUNCTION_MORE_ARGS]"
    },
    {
      "question": "Apply the minimal change that makes this line correct: `system_python = path . join ( self . settings [ 'python_folder' ] [ sys . platform ] , self . preconditions [ 'python_version' ] )`  (ADD_FUNCTION_AROUND_EXPRESSION)"
    },
    {
      "question": "This line is buggy: `if not path . exists ( path . join ( hitchtest . utils . get_hitch_directory ( ) , \"node_modules\" , \"less\" , \"bin\" , \"lessc\" )  : chdir ( hitchtest . utils . get_hitch_directory ( ) ) check_call ( [ node_package . npm , \"install\" , \"less\" ] ) chdir ( PROJECT_DIRECTORY )`. Provide the correct version only. [SINGLE_TOKEN]"
    },
    {
      "question": "Apply the minimal change that makes this line correct: `codesnippet += etree . tostring ( element , pretty_print = True )`  (ADD_FUNCTION_AROUND_EXPRESSION)"
    },
    {
      "question": "Fix the error in: `stepping_thread_group . append ( JMX . _string_prop ( \"flighttime\" , hold_for ) )`. Return only the corrected line. [ADD_FUNCTION_AROUND_EXPRESSION]"
    },
    {
      "question": "This line is buggy: `self . stats . set ( 'last_success_at' )`. Provide the correct version only. [SAME_FUNCTION_MORE_ARGS]"
    },
    {
      "question": "Correct the following line while preserving intent: `if net . BITCOIN_POW_FUNC is bitcoin_data . block_header_type . scrypt : self . hash = share1a_type . scrypt ( self . as_share1a ( ) ) else :`  (CHANGE_BINARY_OPERATOR)"
    },
    {
      "question": "This line is buggy: `def test_missing_data ( self ) : super ( CourseEnrollmentByCountryCSVViewTests , self ) . test_404 ( )`. Provide the correct version only. [SINGLE_TOKEN]"
    },
    {
      "question": "Apply the minimal change that makes this line correct: `if isinstance ( t , basestring ) and self . names . has_name ( t , \"\" ) : avsc = self . names . get_name ( t , \"\" ) elif isinstance ( t , dict ) and self . names . has_name ( t [ \"name\" ] , \"\" ) : avsc = self . names . get_name ( t [ \"name\" ] , \"\" ) else : avsc = avro . schema . make_avsc_object ( t , self . names )`  (MORE_SPECIFIC_IF)"
    },
    {
      "question": "Produce the corrected version of: `if isinstance ( t , basestring ) and self . names . has_name ( t , \"\" ) : avsc = self . names . get_name ( t , \"\" ) elif isinstance ( t , dict ) and self . names . has_name ( t [ \"name\" ] , \"\" ) : avsc = self . names . get_name ( t [ \"name\" ] , \"\" ) else : avsc = avro . schema . make_avsc_object ( t , self . names )`  (family: MORE_SPECIFIC_IF)"
    },
    {
      "question": "Identify the issue in `j . generatefiles [ t [ \"filename\" ] ] = copy . deepcopy ( builder . do_eval ( t [ \"fileContent\" ] ) )` and provide the corrected single-line fix. [ADD_FUNCTION_AROUND_EXPRESSION]"
    },
    {
      "question": "This line is buggy: `if stage_output : containertgt = container_outdir + vol . target [ len ( host_outdir ) : ] else : containertgt = vol . target`. Provide the correct version only. [MORE_SPECIFIC_IF]"
    },
    {
      "question": "Replace the buggy snippet with a correct one: `tag = Tag . _byID ( result . thing2_id )`  [pattern=SAME_FUNCTION_MORE_ARGS]"
    },
    {
      "question": "Given the buggy code: `if not self . path_has_subreddit ( ) : self . path = ( subreddit . path + self . path )`, rewrite it into a correct version. (Bug type: MORE_SPECIFIC_IF)"
    },
    {
      "question": "Produce the corrected version of: `while 0x80 <= s [ pos ] <= 0xBF : pos += 1`  (family: MORE_SPECIFIC_IF)"
    },
    {
      "question": "Identify the issue in `while 0x80 <= s [ pos ] <= 0xBF : pos += 1` and provide the corrected single-line fix. [MORE_SPECIFIC_IF]"
    },
    {
      "question": "Correct the following line while preserving intent: `with open ( input_filename , 'w' ) as fp : fp . write ( html )`  (SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "This line is buggy: `return Meetup . _query ( Meetup . c . timestamp > time . time ( ) , data = True )`. Provide the correct version only. [SAME_FUNCTION_MORE_ARGS]"
    },
    {
      "question": "Identify the issue in `html_doc = soupparser . fromstring ( html )` and provide the corrected single-line fix. [ADD_FUNCTION_AROUND_EXPRESSION]"
    },
    {
      "question": "Fix the following statement so it is correct: `else : username = Account . _byID ( userid ) . name` (Pattern: SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Identify the issue in `pollobj = Poll . _byID ( pollid )` and provide the corrected single-line fix. [SAME_FUNCTION_MORE_ARGS]"
    },
    {
      "question": "Identify the issue in `adjs = list ( KarmaAdjustment . _query ( KarmaAdjustment . c . _id >= id_low , KarmaAdjustment . c . _id < id_low + STEP ) )` and provide the corrected single-line fix. [SAME_FUNCTION_MORE_ARGS]"
    },
    {
      "question": "Correct the following line while preserving intent: `return WikiPageInline ( html = html , name = name , skiplayout = skiplayout ) . render ( )`  (SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Fix the error in: `next_ = self . get_argument ( 'next' )`. Return only the corrected line. [SAME_FUNCTION_MORE_ARGS]"
    },
    {
      "question": "This line is buggy: `soup = bs4 . BeautifulSoup ( html )`. Provide the correct version only. [SAME_FUNCTION_MORE_ARGS]"
    },
    {
      "question": "This line is buggy: `changed = validate . user_login ( login , new = True )`. Provide the correct version only. [SAME_FUNCTION_LESS_ARGS]"
    },
    {
      "question": "Produce the corrected version of: `' ' . join ( sorted ( t . id for t in self . tags ) ) ,`  (family: ADD_FUNCTION_AROUND_EXPRESSION)"
    },
    {
      "question": "Identify the issue in `stdout . write ( gather ( wf , ctx ) . serialize ( format = sr ) )` and provide the corrected single-line fix. [ADD_METHOD_CALL]"
    },
    {
      "question": "Replace the buggy snippet with a correct one: `else : change_password ( c . user , curpass , password )`  [pattern=SAME_FUNCTION_LESS_ARGS]"
    },
    {
      "question": "Identify the issue in `key = '' . join ( ( str ( c . lang ) , str ( c . content_langs ) , request . host , c . cname , request . fullpath , str ( c . firsttime ) , str ( c . over18 ) ) )` and provide the corrected single-line fix. [ADD_FUNCTION_AROUND_EXPRESSION]"
    },
    {
      "question": "Apply the minimal change that makes this line correct: `schema_fields = self . schema_fields if self . schema_fields else json . loads ( gcs_hook . download ( self . bucket , self . schema_object ) )`  (ADD_METHOD_CALL)"
    },
    {
      "question": "This line is buggy: `regex = re . compile ( \"cn=([^,]*).*\" )`. Provide the correct version only. [SAME_FUNCTION_MORE_ARGS]"
    },
    {
      "question": "This line is buggy: `return tuplify ( set ( _to_tuples_recursive ( obj ) ) )`. Provide the correct version only. [ADD_FUNCTION_AROUND_EXPRESSION]"
    },
    {
      "question": "Correct the following line while preserving intent: `parser . add_argument ( '--logs' , help = 'Path to save statistics like the PR curves.' , action = 'store_true' )`  (SAME_FUNCTION_LESS_ARGS)"
    },
    {
      "question": "Fix the error in: `printtail ( err . stdout , 'STDOUT' , Out_Fore . YELLOW , tail_n , re . compile ( filter_in ) if filter_in else None , re . compile ( filter_out ) if filter_out else None )`. Return only the corrected line. [ADD_METHOD_CALL]"
    },
    {
      "question": "Replace the buggy snippet with a correct one: `if self . ctx . python_recipe . from_crystax : env [ 'CRYSTAX_PYTHON_VERSION' ] = self . ctx . python_recipe . version`  [pattern=MORE_SPECIFIC_IF]"
    },
    {
      "question": "Fix the error in: `def init_action ( self , action ) : if action is None : action = lambda : None self . action = action`. Return only the corrected line. [SINGLE_TOKEN]"
    },
    {
      "question": "Correct the following line while preserving intent: `htmlGen . restore_color_scheme ( self . view )`  (SAME_FUNCTION_LESS_ARGS)"
    },
    {
      "question": "Fix the following statement so it is correct: `continue` (Pattern: SINGLE_TOKEN)"
    },
    {
      "question": "This line is buggy: `return tohex_rgba ( r , g , b )`. Provide the correct version only. [SAME_FUNCTION_MORE_ARGS]"
    },
    {
      "question": "Apply the minimal change that makes this line correct: `obj . dump ( fname )`  (SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Apply the minimal change that makes this line correct: `if os . isatty ( sys . stdout ) : readsofar = blocknum * blocksize if totalsize > 0 : percent = readsofar * 100 / totalsize`  (ADD_METHOD_CALL)"
    },
    {
      "question": "Correct the following line while preserving intent: `return [ parent ] + [ join ( base , subdir ) for subdir in ( 'utils' , ) ]`  (SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Given the buggy code: `vers = config [ 'vers' ]`, rewrite it into a correct version. (Bug type: ADD_FUNCTION_AROUND_EXPRESSION)"
    },
    {
      "question": "Identify the issue in `commits_behind = self . repo . iter_commits ( 'master..origin/master' )` and provide the corrected single-line fix. [ADD_FUNCTION_AROUND_EXPRESSION]"
    },
    {
      "question": "This line is buggy: `for key in config . keys ( ) : if key not in ( \"scenarios\" , \"execution\" , \"included-configs\" , Service . SERV ) : config . pop ( key )`. Provide the correct version only. [ADD_FUNCTION_AROUND_EXPRESSION]"
    },
    {
      "question": "Correct the following line while preserving intent: `else : self . _label = hashlib . md5 ( to_json ( self . __scenario ) ) . hexdigest ( )`  (ADD_METHOD_CALL)"
    },
    {
      "question": "Produce the corrected version of: `Salts = receipt . get_salts ( )`  (family: ADD_FUNCTION_AROUND_EXPRESSION)"
    },
    {
      "question": "Fix the following statement so it is correct: `if self . point_of_sale_id . company_id != self . company_id : raise Warning ( _ ( 'The company of the point of sale and of the \\\n                 journal must be the same!' ) )` (Pattern: MORE_SPECIFIC_IF)"
    },
    {
      "question": "Fix the following statement so it is correct: `if not self . responsability_id : self . responsability_id = self . partner_id . commercial_partner_id . responsability_id` (Pattern: MORE_SPECIFIC_IF)"
    },
    {
      "question": "Produce the corrected version of: `r = send ( ** kwargs )`  (family: SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Correct the following line while preserving intent: `parser . add_argument ( dest = 'test' , type = str , default = 'lat' , choices = [ 'lat' , 'thr' ] , help = 'which test to run' )`  (SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Fix the following statement so it is correct: `except : if not ignore_errors : raise OSError ( 'Create dir: {} error.' )` (Pattern: ADD_METHOD_CALL)"
    },
    {
      "question": "This line is buggy: `RT = np . zeros ( np . append ( Rdims , int ( 1 / s ) ) , Rtype )`. Provide the correct version only. [ADD_FUNCTION_AROUND_EXPRESSION]"
    },
    {
      "question": "Apply the minimal change that makes this line correct: `im2_blur += 128 * ( im2_blur <= 1.0 )`  (ADD_METHOD_CALL)"
    },
    {
      "question": "Correct the following line while preserving intent: `draw_caption ( image , boxes [ i , : ] , caption )`  (SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "This line is buggy: `return dns . query . udp ( request , timeout , 53 )`. Provide the correct version only. [SAME_FUNCTION_MORE_ARGS]"
    },
    {
      "question": "Given the buggy code: `self . msg ( \"Opening %s for write\" % filename , debug = Tre )`, rewrite it into a correct version. (Bug type: SINGLE_TOKEN)"
    },
    {
      "question": "Fix the error in: `def constrech ( img , cmd , perc ) : from ImageProcess import togray import numpy as np omax = 255`. Return only the corrected line. [SINGLE_TOKEN]"
    },
    {
      "question": "Identify the issue in `def constretch ( img , cmd , perc ) : from ImageProcess import togray import numpy as np omax = 255` and provide the corrected single-line fix. [SINGLE_TOKEN]"
    },
    {
      "question": "Produce the corrected version of: `if keyword . upper ( ) in entry_request . text : print ( \" [KEYWORD] Paste \\'{0}\\' contains keyword \\'{1}\\'\" . format ( entry [ \"key\" ] , keyword ) ) entry_file = open ( path_t_important , \"w+\" )`  (family: ADD_METHOD_CALL)"
    },
    {
      "question": "Fix the error in: `command = command [ : 252 ] + '...'`. Return only the corrected line. [ADD_FUNCTION_AROUND_EXPRESSION]"
    },
    {
      "question": "Fix the error in: `exceptions . handle ( request )`. Return only the corrected line. [SAME_FUNCTION_MORE_ARGS]"
    },
    {
      "question": "This line is buggy: `if not request . user . profile . is_admin : request . user . profile . type = models . USER_ADMIN request . user . profile . save ( )`. Provide the correct version only. [MORE_SPECIFIC_IF]"
    },
    {
      "question": "Correct the following line while preserving intent: `return [ ( 'name' , ) + clause [ 1 : ] ]`  (ADD_FUNCTION_AROUND_EXPRESSION)"
    },
    {
      "question": "Correct the following line while preserving intent: `return [ ( 'name' , ) + clause [ 1 : ] ]`  (ADD_FUNCTION_AROUND_EXPRESSION)"
    },
    {
      "question": "Apply the minimal change that makes this line correct: `return [ ( 'name' , ) + clause [ 1 : ] ]`  (ADD_FUNCTION_AROUND_EXPRESSION)"
    },
    {
      "question": "Given the buggy code: `return [ ( 'name' , ) + clause [ 1 : ] ]`, rewrite it into a correct version. (Bug type: ADD_FUNCTION_AROUND_EXPRESSION)"
    },
    {
      "question": "Fix the following statement so it is correct: `return 1` (Pattern: SINGLE_TOKEN)"
    },
    {
      "question": "Produce the corrected version of: `return [ ( 'name' , ) + clause [ 1 : ] ]`  (family: ADD_FUNCTION_AROUND_EXPRESSION)"
    },
    {
      "question": "Replace the buggy snippet with a correct one: `return [ ( 'name' , ) + clause [ 1 : ] ]`  [pattern=ADD_FUNCTION_AROUND_EXPRESSION]"
    },
    {
      "question": "Fix the error in: `return [ ( 'name' , ) + clause [ 1 : ] ]`. Return only the corrected line. [ADD_FUNCTION_AROUND_EXPRESSION]"
    },
    {
      "question": "Apply the minimal change that makes this line correct: `return [ ( 'name' , ) + clause [ 1 : ] ]`  (ADD_FUNCTION_AROUND_EXPRESSION)"
    },
    {
      "question": "This line is buggy: `return [ ( 'name' , ) + clause [ 1 : ] ]`. Provide the correct version only. [ADD_FUNCTION_AROUND_EXPRESSION]"
    },
    {
      "question": "Identify the issue in `return [ ( 'name' , ) + clause [ 1 : ] ]` and provide the corrected single-line fix. [ADD_FUNCTION_AROUND_EXPRESSION]"
    },
    {
      "question": "Fix the error in: `return sorted ( { getattr ( z , 'name' ) for z in records } )`. Return only the corrected line. [SINGLE_TOKEN]"
    },
    {
      "question": "Produce the corrected version of: `return reports ( self , environment_id , session_id , service_id )`  (family: ADD_FUNCTION_AROUND_EXPRESSION)"
    },
    {
      "question": "Produce the corrected version of: `return len ( windcclient ( request ) . sessions . reports ( self , environment_id , session_id , service_id ) )`  (family: SAME_FUNCTION_LESS_ARGS)"
    },
    {
      "question": "Produce the corrected version of: `return len ( windcclient ( request ) . sessions . reports ( environment_id , session_id , service_id = service_id ) )`  (family: SAME_FUNCTION_LESS_ARGS)"
    },
    {
      "question": "Replace the buggy snippet with a correct one: `params = html . Params ( nav = 'tags' , sort = '' )`  [pattern=SAME_FUNCTION_MORE_ARGS]"
    },
    {
      "question": "Fix the following statement so it is correct: `self . content_type = ContentType . objects . get_for_model ( self . instance , )` (Pattern: SAME_FUNCTION_LESS_ARGS)"
    },
    {
      "question": "Identify the issue in `ch . basic_consume ( conf . results_exchange , callback = handle_result , no_ack = True )` and provide the corrected single-line fix. [SAME_FUNCTION_LESS_ARGS]"
    },
    {
      "question": "This line is buggy: `self . pDockCtrl = cmds . dockControl ( 'dpAutoRigSystem' , area = \"left\" , content = self . allUIs [ \"dpAutoRigWin\" ] , vcc = self . jobDockVisChange )`. Provide the correct version only. [SAME_FUNCTION_LESS_ARGS]"
    },
    {
      "question": "Given the buggy code: `if ( circleDistX <= Laine . r or circleDistY <= Laine . r ) : return True`, rewrite it into a correct version. (Bug type: CHANGE_BINARY_OPERATOR)"
    },
    {
      "question": "Given the buggy code: `self . apply_patch ( 'add_length.patch' )`, rewrite it into a correct version. (Bug type: SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Fix the following statement so it is correct: `neckJnt = cmds . joint ( name = neckCtrlBaseName + \"_\" + str ( n ) . zfill ( 2 ) + \"_Jnt\" )` (Pattern: SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "This line is buggy: `return manga . replace ( ' - ' , ' ' ) . replace ( ' ' , '-' ) . lower ( )`. Provide the correct version only. [ADD_METHOD_CALL]"
    },
    {
      "question": "Replace the buggy snippet with a correct one: `expect_none = ( ( req_type is None ) or ( ( tdtsz < rdtsz ) and not ok_T ) )`  [pattern=CHANGE_BINARY_OPERATOR]"
    },
    {
      "question": "Apply the minimal change that makes this line correct: `ret = reshape ( newdata , tdshape )`  (ADD_FUNCTION_AROUND_EXPRESSION)"
    },
    {
      "question": "This line is buggy: `if isinstance ( r , ( generic , int ) ) : return Date ( self . freq , value = r ) elif r . size == 1 : return Date ( self . freq , value = r . item ( ) ) else : return r`. Provide the correct version only. [MORE_SPECIFIC_IF]"
    },
    {
      "question": "Identify the issue in `if hasattr ( item , \"_mask\" ) and item . _mask : return self . mr else : return self . f ( item )` and provide the corrected single-line fix. [MORE_SPECIFIC_IF]"
    },
    {
      "question": "Produce the corrected version of: `printText ( '    ' + each )`  (family: ADD_FUNCTION_AROUND_EXPRESSION)"
    },
    {
      "question": "Fix the error in: `context [ 'yesterdays_percent_compliant' ] = int ( ( compliant_participant_count_list [ 29 ] [ 1 ] / total_participant_count_list [ 29 ] [ 1 ] ) * 100 )`. Return only the corrected line. [ADD_FUNCTION_AROUND_EXPRESSION]"
    },
    {
      "question": "Replace the buggy snippet with a correct one: `for m in self . messages : print ( m , file = stream )`  [pattern=ADD_FUNCTION_AROUND_EXPRESSION]"
    },
    {
      "question": "Produce the corrected version of: `if port . upper ( ) == pref_port : selected_port_idx = i`  (family: MORE_SPECIFIC_IF)"
    },
    {
      "question": "Replace the buggy snippet with a correct one: `return redirect ( url_for ( controller = 'dimension' , action = 'entries' ) )`  [pattern=SAME_FUNCTION_MORE_ARGS]"
    },
    {
      "question": "Produce the corrected version of: `rows = min ( 1000 , request . params . get ( 'rows' , 10 ) )`  (family: ADD_FUNCTION_AROUND_EXPRESSION)"
    },
    {
      "question": "Correct the following line while preserving intent: `return to_jsonp ( { 'errors' : [ ve ] } )`  (ADD_FUNCTION_AROUND_EXPRESSION)"
    },
    {
      "question": "Identify the issue in `continue` and provide the corrected single-line fix. [SINGLE_TOKEN]"
    },
    {
      "question": "Identify the issue in `return lxml . html . tostring ( root )` and provide the corrected single-line fix. [SAME_FUNCTION_MORE_ARGS]"
    },
    {
      "question": "Fix the following statement so it is correct: `def test_read_symmetric ( self ) : \"\"\"read a symmetric pattern matrix\"\"\" fn = mktemp ( ) f = open ( fn , 'w' )` (Pattern: SINGLE_TOKEN)"
    },
    {
      "question": "Produce the corrected version of: `hist , bin_edges = np . histogram ( a , bins = numbins , range = defaultlimits , weights = weights , new = True )`  (family: SAME_FUNCTION_LESS_ARGS)"
    },
    {
      "question": "Identify the issue in `freq , hsupp = np . histogram ( rvs , histsupp , new = True )` and provide the corrected single-line fix. [SAME_FUNCTION_LESS_ARGS]"
    },
    {
      "question": "Fix the error in: `c = df [ [ 'a' , 'b' , 'm' , 'n' ] ] . values . copy ( )`. Return only the corrected line. [ADD_METHOD_CALL]"
    },
    {
      "question": "Produce the corrected version of: `c = df [ [ 'a' , 'b' , 'm' , 'n' ] ] . values . copy ( )`  (family: ADD_METHOD_CALL)"
    },
    {
      "question": "Correct the following line while preserving intent: `self . _url = url`  (ADD_METHOD_CALL)"
    },
    {
      "question": "Fix the error in: `status = self . client . jobs ( ) . get ( projectId = project_id , jobId = job_id ) . execute ( )`. Return only the corrected line. [SAME_FUNCTION_MORE_ARGS]"
    },
    {
      "question": "This line is buggy: `def __init__ ( self , host , database , user , password , table , update_id , port = None ) :`. Provide the correct version only. [SINGLE_TOKEN]"
    },
    {
      "question": "Given the buggy code: `return fh . read ( ) . replace ( '\\0' , ' ' ) . rstrip ( )`, rewrite it into a correct version. (Bug type: ADD_METHOD_CALL)"
    },
    {
      "question": "Produce the corrected version of: `if not url . startswith ( \"http\" ) : xlog . error ( \"gae:%s\" , url ) return`  (family: MORE_SPECIFIC_IF)"
    },
    {
      "question": "Replace the buggy snippet with a correct one: `if content_range : start , end , length = tuple ( int ( x ) for x in re . search ( r'bytes (\\d+)-(\\d+)/(\\d+)' , content_range ) . group ( 1 , 2 , 3 ) ) else :`  [pattern=MORE_SPECIFIC_IF]"
    },
    {
      "question": "Fix the following statement so it is correct: `if self . options . debug : self . config . set_debug ( [ \"all\" ] ) self . config [ \"threads\" ] = 1` (Pattern: ADD_METHOD_CALL)"
    },
    {
      "question": "Fix the error in: `if not config . get ( [ \"update\" , \"check_update\" ] ) : return`. Return only the corrected line. [SAME_FUNCTION_MORE_ARGS]"
    },
    {
      "question": "This line is buggy: `RemoteContralServerHandler . deploy_proc = subprocess . Popen ( [ sys . executable , script_path , appid , email , passwd , rc4_passwd ] , stdout = subprocess . PIPE )`. Provide the correct version only. [SAME_FUNCTION_LESS_ARGS]"
    },
    {
      "question": "Given the buggy code: `p = Popen ( [ \"xset\" , \"-q\" ] , stdout = PIPE , stderr = PIPE )`, rewrite it into a correct version. (Bug type: SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Apply the minimal change that makes this line correct: `p = Popen ( [ \"xset\" , \"-q\" ] , stdout = PIPE , stderr = PIPE , shell = True )`  (SAME_FUNCTION_LESS_ARGS)"
    },
    {
      "question": "Correct the following line while preserving intent: `self . assertEquals ( linkcheck . strformat . unquote ( None ) , \"\" )`  (SINGLE_TOKEN)"
    },
    {
      "question": "Apply the minimal change that makes this line correct: `if \"gws\" not in server_type and \"Google Frontend\" not in server_type : xlog . warn ( \"IP:%s not support GAE, server type:%s\" , response . ssl_sock . ip , server_type ) google_ip . report_connect_fail ( response . ssl_sock . ip , force_remove = True ) response . close ( )`  (MORE_SPECIFIC_IF)"
    },
    {
      "question": "Given the buggy code: `return`, rewrite it into a correct version. (Bug type: SINGLE_TOKEN)"
    },
    {
      "question": "Correct the following line while preserving intent: `return ptype . strip ( )`  (ADD_METHOD_CALL)"
    },
    {
      "question": "Identify the issue in `return N0ne` and provide the corrected single-line fix. [SINGLE_TOKEN]"
    },
    {
      "question": "Identify the issue in `def print_status ( self , checked , in_progress , queue , duration ) : msg = _n ( \"%2d URL active\" , \"%2d URLs active\" , in_progress ) % in_progress self . write ( u\"%s, \" % msg )` and provide the corrected single-line fix. [SINGLE_TOKEN]"
    },
    {
      "question": "Correct the following line while preserving intent: `text = [ x [ 1 ] for x in url_data . warnings ]`  (ADD_FUNCTION_AROUND_EXPRESSION)"
    },
    {
      "question": "Fix the error in: `def print_status ( self , checked , in_progress , queued , duration ) : self . widget . emit ( QtCore . SIGNAL ( \"log_url(int,int,int,float)\" ) , checked , in_progress , queued , duration )`. Return only the corrected line. [SINGLE_TOKEN]"
    },
    {
      "question": "This line is buggy: `return rb . allows_url ( roboturl , url , self . proxy , user , password , callback = callback , )`. Provide the correct version only. [SAME_FUNCTION_LESS_ARGS]"
    },
    {
      "question": "Replace the buggy snippet with a correct one: `linkcheck . log . error ( _ ( \"ignore%d: syntax error %s\\n\" ) % ( i , ctuple ) )`  [pattern=SAME_FUNCTION_MORE_ARGS]"
    },
    {
      "question": "This line is buggy: `assert None == linkcheck . log . debug ( linkcheck . LOG_CHECK , \"%s line %d: missing blank line before user-agent\" \" directive\" , linenumber )`. Provide the correct version only. [SAME_FUNCTION_MORE_ARGS]"
    },
    {
      "question": "Correct the following line while preserving intent: `def test_lines_kepp_spaces ( self ) : text = Text ( \"hello world\" ) assert [ \"HELLO WORLD\" ] == text . lines`  (SINGLE_TOKEN)"
    },
    {
      "question": "Fix the error in: `return render_template ( \"js/default.js\" , ga_tid = tid )`. Return only the corrected line. [ADD_FUNCTION_AROUND_EXPRESSION]"
    },
    {
      "question": "This line is buggy: `add_devices_callback ( [ device ] )`. Provide the correct version only. [ADD_FUNCTION_AROUND_EXPRESSION]"
    },
    {
      "question": "Replace the buggy snippet with a correct one: `api_password = config [ DOMAIN ] . get ( CONF_API_PASSWORD )`  [pattern=ADD_FUNCTION_AROUND_EXPRESSION]"
    },
    {
      "question": "Fix the following statement so it is correct: `device = row [ 'device' ]` (Pattern: ADD_METHOD_CALL)"
    },
    {
      "question": "Replace the buggy snippet with a correct one: `self . writer . write_game_update_message ( new_action , round_state , action_histories )`  [pattern=SAME_FUNCTION_LESS_ARGS]"
    },
    {
      "question": "Fix the following statement so it is correct: `self . eq ( range ( 1 , 53 ) , [ card . to_id ( ) for card in deck . deck ] )` (Pattern: ADD_FUNCTION_AROUND_EXPRESSION)"
    },
    {
      "question": "Given the buggy code: `def _format_value ( self , value ) : if not value : return ''`, rewrite it into a correct version. (Bug type: SINGLE_TOKEN)"
    },
    {
      "question": "Apply the minimal change that makes this line correct: `else : trans . setlang ( lang )`  (SINGLE_TOKEN)"
    },
    {
      "question": "Identify the issue in `return { 'id' : id , 'resistricted' : False , 'language' : lang }` and provide the corrected single-line fix. [ADD_FUNCTION_AROUND_EXPRESSION]"
    },
    {
      "question": "Apply the minimal change that makes this line correct: `trans . gettext_remote ( data , serverlist . list [ serverid ] [ 'language' ] )`  (ADD_FUNCTION_AROUND_EXPRESSION)"
    },
    {
      "question": "Replace the buggy snippet with a correct one: `gold_standard_file = Path ( os . path . join ( script_dir , rel_path ) )`  [pattern=ADD_FUNCTION_AROUND_EXPRESSION]"
    },
    {
      "question": "Identify the issue in `row_indices , col_indices = linear_sum_assignment ( w . max ( ) - w , maximize = True )` and provide the corrected single-line fix. [SAME_FUNCTION_LESS_ARGS]"
    },
    {
      "question": "Fix the following statement so it is correct: `data . append ( unicode ( self . get_column_data ( i , name , obj ) [ 0 ] ) )` (Pattern: ADD_METHOD_CALL)"
    },
    {
      "question": "Identify the issue in `if not pretty_name : field = self . model . _meta . get_field_by_name ( column . fields [ 0 ] ) [ 0 ] column_name = field . name pretty_name = field . verbose_name` and provide the corrected single-line fix. [MORE_SPECIFIC_IF]"
    },
    {
      "question": "Produce the corrected version of: `helper = partial ( make_xeditable , * args , ** kwargs )`  (family: SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Fix the following statement so it is correct: `kwargs [ 'columns' ] = list ( map ( lambda f : ( f . verbose_name , f . name ) , model_fields ) )` (Pattern: ADD_FUNCTION_AROUND_EXPRESSION)"
    },
    {
      "question": "Apply the minimal change that makes this line correct: `mail . send ( recipients = [ 'test@example.com' ] )`  (SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Fix the following statement so it is correct: `transitions [ s , el [ 1 ] ] = el [ 0 ]` (Pattern: SINGLE_TOKEN)"
    },
    {
      "question": "Replace the buggy snippet with a correct one: `self . limit = kwargs . pop ( 'limit' , 10 )`  [pattern=ADD_FUNCTION_AROUND_EXPRESSION]"
    },
    {
      "question": "Correct the following line while preserving intent: `if hasattr ( mod , version_attr ) : attr = getattr ( mod , version_attr ) version = attr ( ) if callable ( attr ) else attr module_infos . append ( \"%s %s\" % ( name , version ) )`  (MORE_SPECIFIC_IF)"
    },
    {
      "question": "Correct the following line while preserving intent: `if is_multi : it . insert ( 0 , header )`  (MORE_SPECIFIC_IF)"
    },
    {
      "question": "Fix the following statement so it is correct: `one_us = np . timedelta64 ( 1 )` (Pattern: ADD_METHOD_CALL)"
    },
    {
      "question": "Fix the error in: `if Atom ( 'Neighbour' , safe_cell , tunnel_cell ) in state . rigid_atoms : result [ 'safe' ] . remove ( safe_cell )`. Return only the corrected line. [MORE_SPECIFIC_IF]"
    },
    {
      "question": "Produce the corrected version of: `config . hook . pytest_deselected ( items = deselected_items )`  (family: ADD_FUNCTION_AROUND_EXPRESSION)"
    },
    {
      "question": "Fix the error in: `patternNZHistory . append ( learnPatternNZ )`. Return only the corrected line. [ADD_FUNCTION_AROUND_EXPRESSION]"
    },
    {
      "question": "Produce the corrected version of: `self . assertEqual ( result , Segment ( 0 , 20 ) )`  (family: SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Fix the error in: `self . arr = np . random . randn ( N , N )`. Return only the corrected line. [SAME_FUNCTION_LESS_ARGS]"
    },
    {
      "question": "Replace the buggy snippet with a correct one: `avgBinWeight = cumWeights [ - 1 ] / nBins`  [pattern=ADD_FUNCTION_AROUND_EXPRESSION]"
    },
    {
      "question": "Correct the following line while preserving intent: `if ( self . _random . getReal64 ( ) < connectedPct ) : perm [ i ] = self . _initPermConnected ( ) else : perm [ i ] = self . _initPermNonConnected ( )`  (CHANGE_BINARY_OPERATOR)"
    },
    {
      "question": "Fix the following statement so it is correct: `nupicDistribution = pkg_resources . get_distribution ( distributionName )` (Pattern: SINGLE_TOKEN)"
    },
    {
      "question": "Produce the corrected version of: `dims = max ( category + 1 , len ( inference ) )`  (family: ADD_FUNCTION_AROUND_EXPRESSION)"
    },
    {
      "question": "Given the buggy code: `def load_commands ( path ) : if not os . path . isfile ( path ) : raise IOError`, rewrite it into a correct version. (Bug type: SINGLE_TOKEN)"
    },
    {
      "question": "Produce the corrected version of: `return ( None )`  (family: SINGLE_TOKEN)"
    },
    {
      "question": "Correct the following line while preserving intent: `ret_single = experiment_gbdt ( os . path . join ( temp_path , 'seed{}' . format ( i ) ) , params , 'user_id' , X_train , y_train , X_test )`  (SAME_FUNCTION_LESS_ARGS)"
    },
    {
      "question": "Given the buggy code: `if backfill and published : retrieved = published`, rewrite it into a correct version. (Bug type: MORE_SPECIFIC_IF)"
    },
    {
      "question": "Fix the error in: `path = self . guess_database_dir ( )`. Return only the corrected line. [ADD_FUNCTION_AROUND_EXPRESSION]"
    },
    {
      "question": "Given the buggy code: `return True`, rewrite it into a correct version. (Bug type: SINGLE_TOKEN)"
    },
    {
      "question": "This line is buggy: `if f [ 'name' ] == field : return f [ 'value' ]`. Provide the correct version only. [MORE_SPECIFIC_IF]"
    },
    {
      "question": "Produce the corrected version of: `return lambda_ * np . linalg . norm ( w ) ** 2 + { 'mse' : 1 / ( 2 * len ( y ) ) * sum ( ( y - tx . dot ( w ) ) ** 2 ) , 'rmse' : np . sqrt ( 2 * compute_loss ( y , tx , w ) ) , 'mae' : 1 / len ( y ) * sum ( np . abs ( y - tx . dot ( w ) ) ) , 'logistic' : np . sum ( np . log ( 1. + np . exp ( np . dot ( tx , w ) ) ) ) - np . dot ( y . transpose ( ) , np . dot ( tx , w ) ) } [ loss_function ]`  (family: SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Given the buggy code: `self . add_task ( Task ( task_name , grab = g2 ) )`, rewrite it into a correct version. (Bug type: SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Replace the buggy snippet with a correct one: `self . curl . setopt ( pycurl . PROXYUSERPWD , grab . config [ 'proxy_userpwd' ] )`  [pattern=ADD_FUNCTION_AROUND_EXPRESSION]"
    },
    {
      "question": "Produce the corrected version of: `def trace_distance_bound ( self ) -> float : \"\"\" A maximum on the trace distance between \\`val\\` ' s input and output . Generally this method is used when deciding whether to keep gates , so`  (family: SINGLE_TOKEN)"
    },
    {
      "question": "Identify the issue in `forms = [ ( idx , len ( x . fields ) ) for idx , x in enumerate ( self . tree . forms ) ]` and provide the corrected single-line fix. [ADD_FUNCTION_AROUND_EXPRESSION]"
    },
    {
      "question": "Apply the minimal change that makes this line correct: `g = Grab ( strip_xml_declaration = True , transport = GRAB_TRANSPORT )`  (SAME_FUNCTION_LESS_ARGS)"
    },
    {
      "question": "Apply the minimal change that makes this line correct: `self . assertTrue ( b'\\r\\n' + body_str + b'\\r\\n' in body )`  (ADD_METHOD_CALL)"
    },
    {
      "question": "Identify the issue in `raise SocketError ( e )` and provide the corrected single-line fix. [ADD_FUNCTION_AROUND_EXPRESSION]"
    },
    {
      "question": "Fix the following statement so it is correct: `self . _temperature = None` (Pattern: SINGLE_TOKEN)"
    },
    {
      "question": "Fix the error in: `RE_REFRESH_URL = re . compile ( r'url=[\"\\']*([^\\'\"> ]+)' )`. Return only the corrected line. [SAME_FUNCTION_MORE_ARGS]"
    },
    {
      "question": "Correct the following line while preserving intent: `if task . task_try_count >= self . task_try_limit : logging . debug ( 'Task tries ended: %s / %s' % ( task . name , task . url ) ) return False elif task . network_try_count >= self . network_try_limit :`  (CHANGE_BINARY_OPERATOR)"
    },
    {
      "question": "This line is buggy: `request . GET . get ( \"q\" ) ,`. Provide the correct version only. [SAME_FUNCTION_MORE_ARGS]"
    },
    {
      "question": "This line is buggy: `clubs = sorted ( ( club for club in clubs if club_scores [ club ] > 0 ) , key = club_scores . __getitem__ )`. Provide the correct version only. [SAME_FUNCTION_MORE_ARGS]"
    },
    {
      "question": "Identify the issue in `def test_it_creates_a_database_with_an_original_pin_code ( slow_state , pincode ) : start = time . perf_counter ( )` and provide the corrected single-line fix. [SINGLE_TOKEN]"
    },
    {
      "question": "Apply the minimal change that makes this line correct: `if subparam_name == None : assert effect_info [ param_name ] . value == param_value else : effect_info = dict ( effect_info [ param_name ] . items )`  (CHANGE_BINARY_OPERATOR)"
    },
    {
      "question": "Produce the corrected version of: `length = struct . unpack ( '>Q' , length_buf ) [ 0 ]`  (family: ADD_FUNCTION_AROUND_EXPRESSION)"
    },
    {
      "question": "Replace the buggy snippet with a correct one: `self . change_active_proxy ( task )`  [pattern=SAME_FUNCTION_MORE_ARGS]"
    },
    {
      "question": "Correct the following line while preserving intent: `if an == 0 : raise InputError ( \"Database has no annotations, the whole database would be cleaned\" )`  (MORE_SPECIFIC_IF)"
    },
    {
      "question": "Fix the error in: `if y . size < follow_idx : follow_idx = - 1`. Return only the corrected line. [CHANGE_BINARY_OPERATOR]"
    },
    {
      "question": "Fix the following statement so it is correct: `with open ( lexicon_full_filepath ) as f : self . lexicon_full_filepath = f . read ( )` (Pattern: SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Produce the corrected version of: `temp_d = self . __dict__`  (family: ADD_METHOD_CALL)"
    },
    {
      "question": "This line is buggy: `if len ( kwargs ) > 1 : self . set_from_dict ( ** kwargs ) else : self . id = str ( uuid . uuid4 ( ) )`. Provide the correct version only. [CHANGE_BINARY_OPERATOR]"
    },
    {
      "question": "Produce the corrected version of: `if self . _startpoint is not None : self . add ( self . _startpoint ) self . _startpoint = None`  (family: MORE_SPECIFIC_IF)"
    },
    {
      "question": "Produce the corrected version of: `result = BinaryValue ( )`  (family: SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Fix the following statement so it is correct: `def visit_type_alias_Expr ( self , o ) : return 'TypeAliasExpr({})' . format ( o . type )` (Pattern: SINGLE_TOKEN)"
    },
    {
      "question": "Fix the error in: `return any ( is_subtype ( left , item ) for item in right . items )`. Return only the corrected line. [ADD_FUNCTION_AROUND_EXPRESSION]"
    },
    {
      "question": "This line is buggy: `with open ( path ) as inp : data = inp . read ( )`. Provide the correct version only. [SAME_FUNCTION_MORE_ARGS]"
    },
    {
      "question": "Identify the issue in `sys . stderr . write ( \"att: %s\\n\" % att )` and provide the corrected single-line fix. [ADD_FUNCTION_AROUND_EXPRESSION]"
    },
    {
      "question": "Fix the following statement so it is correct: `plt . text ( label_x , label_y , label_text )` (Pattern: SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Replace the buggy snippet with a correct one: `json . dump ( obj , f )`  [pattern=SAME_FUNCTION_MORE_ARGS]"
    },
    {
      "question": "Given the buggy code: `if partial_types is not None : context = partial_types [ node ] self . msg . fail ( messages . NEED_ANNOTATION_FOR_VAR , context )`, rewrite it into a correct version. (Bug type: MORE_SPECIFIC_IF)"
    },
    {
      "question": "Identify the issue in `super ( ) . __init__ ( )` and provide the corrected single-line fix. [SAME_FUNCTION_MORE_ARGS]"
    },
    {
      "question": "Fix the error in: `if not e . var . is_settable_property : name = e . func . name ( ) for base in e . func . info . mro [ 1 : ] : base_attr = base . names . get ( name )`. Return only the corrected line. [MORE_SPECIFIC_IF]"
    },
    {
      "question": "Replace the buggy snippet with a correct one: `else : self . fail ( 'Argument 1 to disjointclass is not a class' )`  [pattern=SAME_FUNCTION_MORE_ARGS]"
    },
    {
      "question": "Fix the following statement so it is correct: `def visit_disjoitclass_expr ( self , o : 'mypy.nodes.DisjointclassExpr' ) -> T : pass` (Pattern: SINGLE_TOKEN)"
    },
    {
      "question": "Replace the buggy snippet with a correct one: `data_folder = os . path . join ( os . getcwd ( ) , 'data' , game_configuration [ 'shorthand' ] , 'csv' , file_name )`  [pattern=SAME_FUNCTION_LESS_ARGS]"
    },
    {
      "question": "Identify the issue in `streamers = list ( streamers )` and provide the corrected single-line fix. [ADD_FUNCTION_AROUND_EXPRESSION]"
    },
    {
      "question": "Correct the following line while preserving intent: `if expr . kind == MODULE_REF : output . add ( expr . fullname )`  (MORE_SPECIFIC_IF)"
    },
    {
      "question": "Replace the buggy snippet with a correct one: `if len ( o . expanded ) > 1 : if o in o . expanded : print ( 'ERROR: cycle in function expansion; skipping' ) return`  [pattern=MORE_SPECIFIC_IF]"
    },
    {
      "question": "Apply the minimal change that makes this line correct: `R = Point ( 1 , 0 )`  (SAME_FUNCTION_LESS_ARGS)"
    },
    {
      "question": "Identify the issue in `if ( isinstance ( expr , CallExpr ) and isinstance ( expr . callee , NameExpr ) and expr . callee . name == 'super' ) : node = SuperExpr ( name . string ) else :` and provide the corrected single-line fix. [ADD_FUNCTION_AROUND_EXPRESSION]"
    },
    {
      "question": "Identify the issue in `if new_method . info . fullname ( ) != 'builtins.object' : return type_object_type_from_new ( new_method , info , builtin_type )` and provide the corrected single-line fix. [MORE_SPECIFIC_IF]"
    },
    {
      "question": "This line is buggy: `if not isinstance ( expected_item_type , Void ) : self . fail ( messages . YIELD_VALUE_EXPECTED , e )`. Provide the correct version only. [MORE_SPECIFIC_IF]"
    },
    {
      "question": "Replace the buggy snippet with a correct one: `d = np . datetime64 ( 'NaT' )`  [pattern=SAME_FUNCTION_MORE_ARGS]"
    },
    {
      "question": "Fix the error in: `expected = DataArray ( array . to_series ( ) . resample ( '24H' ) )`. Return only the corrected line. [SAME_FUNCTION_MORE_ARGS]"
    },
    {
      "question": "Given the buggy code: `return setattr ( self , self . _compat_mapping [ name ] )`, rewrite it into a correct version. (Bug type: SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "This line is buggy: `if resolve_x_to == \"VALUE_ERROR\" : raise ValueError ( \"Unable to resolve to binary >%s<\" % string ) elif resolve_x_to == \"ZEROS\" : string = string . replace ( char , \"0\" ) elif resolve_x_to == \"ONES\" : string = string . replace ( char , \"1\" ) elif resolve_x_to == \"RANDOM\" : bits = \"{0:b}\" . format ( random . getrandbits ( 1 ) ) string = string . replace ( char , bits )`. Provide the correct version only. [MORE_SPECIFIC_IF]"
    },
    {
      "question": "Fix the following statement so it is correct: `if resolve_x_to == \"VALUE_ERROR\" : raise ValueError ( \"Unable to resolve to binary >%s<\" % string ) elif resolve_x_to == \"ZEROS\" : string = string . replace ( char , \"0\" )` (Pattern: MORE_SPECIFIC_IF)"
    },
    {
      "question": "Fix the following statement so it is correct: `if isinstance ( value , get_python_integer_types ( ) ) and value < 0x7fffffff : simulator . set_signal_val_long ( self . _handle , value ) return` (Pattern: MORE_SPECIFIC_IF)"
    },
    {
      "question": "Given the buggy code: `logger . log_debug ( 'OS: ' + platform . linux_distribution ( ) )`, rewrite it into a correct version. (Bug type: ADD_FUNCTION_AROUND_EXPRESSION)"
    },
    {
      "question": "This line is buggy: `bgr = diffraction_pattern . remove_background ( method = 'h-dome' , ** kwargs )`. Provide the correct version only. [SAME_FUNCTION_LESS_ARGS]"
    },
    {
      "question": "Identify the issue in `data_da = da . from_array ( data_mem )` and provide the corrected single-line fix. [SAME_FUNCTION_MORE_ARGS]"
    },
    {
      "question": "Replace the buggy snippet with a correct one: `scattering_param == '_empty'`  [pattern=CHANGE_BINARY_OPERATOR]"
    },
    {
      "question": "Apply the minimal change that makes this line correct: `meansq_dp = Signal2D ( np . square ( dp . data ) ) . mean ( ( 0 , 1 ) )`  (SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Produce the corrected version of: `def visit_type_alias_Expr ( self , o ) : return 'TypeAliasExpr({})' . format ( o . type )`  (family: SINGLE_TOKEN)"
    },
    {
      "question": "Given the buggy code: `return any ( is_subtype ( left , item ) for item in right . items )`, rewrite it into a correct version. (Bug type: ADD_FUNCTION_AROUND_EXPRESSION)"
    },
    {
      "question": "This line is buggy: `fig = nk . plot_polarbar ( [ 1 , 2 , 3 ] , show = False )`. Provide the correct version only. [SAME_FUNCTION_LESS_ARGS]"
    },
    {
      "question": "Produce the corrected version of: `( _ , txid , acc ) = record . id . split ( \"|\" )`  (family: SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "This line is buggy: `if os . geteuid ( ) == 0 : die ( 'Please do not run this application as root.' )`. Provide the correct version only. [MORE_SPECIFIC_IF]"
    },
    {
      "question": "Fix the error in: `f . write ( '\\n' . join ( dependencies ) )`. Return only the corrected line. [ADD_METHOD_CALL]"
    },
    {
      "question": "This line is buggy: `if not isinstance ( expected_item_type , Void ) : self . fail ( messages . YIELD_VALUE_EXPECTED , e )`. Provide the correct version only. [MORE_SPECIFIC_IF]"
    },
    {
      "question": "Replace the buggy snippet with a correct one: `if partial_types is not None : context = partial_types [ node ] self . msg . fail ( messages . NEED_ANNOTATION_FOR_VAR , context )`  [pattern=MORE_SPECIFIC_IF]"
    },
    {
      "question": "Fix the following statement so it is correct: `super ( ) . __init__ ( )` (Pattern: SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Correct the following line while preserving intent: `if not e . var . is_settable_property : name = e . func . name ( ) for base in e . func . info . mro [ 1 : ] : base_attr = base . names . get ( name )`  (MORE_SPECIFIC_IF)"
    },
    {
      "question": "Fix the error in: `def test_center_direct_beam ( self , diffraction_pattern ) : diffraction_pattern . center_direct_beam ( method = \"Invalid value\" )`. Return only the corrected line. [SINGLE_TOKEN]"
    },
    {
      "question": "Fix the error in: `peakfinder = peakfinder2D_gui . PeakFinderUIIPYW ( )`. Return only the corrected line. [SAME_FUNCTION_MORE_ARGS]"
    },
    {
      "question": "Replace the buggy snippet with a correct one: `node = ast . parse ( node_string )`  [pattern=SAME_FUNCTION_MORE_ARGS]"
    },
    {
      "question": "Fix the following statement so it is correct: `self . file = None` (Pattern: SINGLE_TOKEN)"
    },
    {
      "question": "Fix the error in: `if not opt [ 'default' ] is None : option_declaration += nodes . option_argument ( '' , text = '=' + str ( opt [ 'default' ] ) )`. Return only the corrected line. [MORE_SPECIFIC_IF]"
    },
    {
      "question": "Fix the error in: `conda_build . api . build ( [ os . path . join ( recipes_dir , folder ) ] , config = get_config ( arch , channels ) )`. Return only the corrected line. [SAME_FUNCTION_MORE_ARGS]"
    },
    {
      "question": "This line is buggy: `conda_build . api . build ( [ os . path . join ( recipes_dir , folder ) ] , config = get_config ( arch , channels ) , debug = True )`. Provide the correct version only. [SAME_FUNCTION_LESS_ARGS]"
    },
    {
      "question": "Given the buggy code: `return click . echo ( s , err = False )`, rewrite it into a correct version. (Bug type: SINGLE_TOKEN)"
    },
    {
      "question": "This line is buggy: `for package in data . get ( section ) : if hasattr ( data [ section ] [ package ] , 'keys' ) :`. Provide the correct version only. [SAME_FUNCTION_MORE_ARGS]"
    },
    {
      "question": "Fix the error in: `print ( root_dir )`. Return only the corrected line. [SAME_FUNCTION_MORE_ARGS]"
    },
    {
      "question": "Given the buggy code: `return cls ( index . array , step )`, rewrite it into a correct version. (Bug type: ADD_METHOD_CALL)"
    },
    {
      "question": "Given the buggy code: `self . sched = Scheduler ( scheddaemon . pyro_daemon , scheddaemon )`, rewrite it into a correct version. (Bug type: SAME_FUNCTION_LESS_ARGS)"
    },
    {
      "question": "Produce the corrected version of: `t = TelemetaWavImport ( source_dir , log_file )`  (family: SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Fix the following statement so it is correct: `return self . filter ( items__file__contains = '/' )` (Pattern: ADD_METHOD_CALL)"
    },
    {
      "question": "Replace the buggy snippet with a correct one: `logger . debug ( \"Message buffered: %s\" % message )`  [pattern=ADD_FUNCTION_AROUND_EXPRESSION]"
    },
    {
      "question": "Identify the issue in `timestamp = datetime . strptime ( cert . get_notAfter ( ) , \"%Y%m%d%H%M%SZ\" )` and provide the corrected single-line fix. [ADD_METHOD_CALL]"
    },
    {
      "question": "Produce the corrected version of: `if 'markers' in att [ 'name' ] : for at in att [ 'children' ] : if 'marker' in at [ 'name' ] : time = float ( at [ 'attributes' ] [ 'time' ] . replace ( ',' , '.' ) ) - first_frame_seconds`  (family: MORE_SPECIFIC_IF)"
    },
    {
      "question": "This line is buggy: `proc = encoder ( media , streaming = True )`. Provide the correct version only. [SAME_FUNCTION_MORE_ARGS]"
    },
    {
      "question": "This line is buggy: `proc = encoder ( audio )`. Provide the correct version only. [SAME_FUNCTION_MORE_ARGS]"
    },
    {
      "question": "This line is buggy: `c = MediaCollection ( code = collection_name )`. Provide the correct version only. [SAME_FUNCTION_MORE_ARGS]"
    },
    {
      "question": "Apply the minimal change that makes this line correct: `if not 'sqlite3' in engine : qs = qs . extra ( select = { f : 'IF(media_collections.collector_is_creator, ' 'media_collections.creator, media_collections.collector)' } )`  (MORE_SPECIFIC_IF)"
    },
    {
      "question": "Apply the minimal change that makes this line correct: `files = subprocess . check_output ( [ 'find' , searchDirectory , '-type' , 'f' , '-path' , '*/filter lists/*.txt' ] )`  (ADD_METHOD_CALL)"
    },
    {
      "question": "Identify the issue in `missing_files = [ f for f in metadata_files if not f . is_file ( ) ]` and provide the corrected single-line fix. [ADD_FUNCTION_AROUND_EXPRESSION]"
    },
    {
      "question": "Apply the minimal change that makes this line correct: `self . config [ \"axisOrder\" ] = [ ax . axisTag for ax in font [ \"fvar\" ] . axes ]`  (ADD_FUNCTION_AROUND_EXPRESSION)"
    },
    {
      "question": "Apply the minimal change that makes this line correct: `if axis_tag == \"opsz\" and axis_defaults [ axis_tag ] == fallback . value : axis_value [ \"flags\" ] |= ELIDABLE_AXIS_VALUE_NAME elif fallback . value == axis_reg [ axis_tag ] . default_value : axis_value [ \"flags\" ] |= ELIDABLE_AXIS_VALUE_NAME`  (MORE_SPECIFIC_IF)"
    },
    {
      "question": "Identify the issue in `if data and len ( data ) != cmd_spec [ param ] : raise ValueError ( \"The data provided was not %d bytes long\" % cmd_spec [ param ] )` and provide the corrected single-line fix. [MORE_SPECIFIC_IF]"
    },
    {
      "question": "Fix the following statement so it is correct: `real_url = HTTP . Request ( url + cdn ) . content` (Pattern: ADD_METHOD_CALL)"
    },
    {
      "question": "Fix the following statement so it is correct: `value = ':' . join ( [ str ( '%.2d' % int ( t ) ) for t in analysis [ 0 ] . value . split ( ':' ) ] )` (Pattern: ADD_FUNCTION_AROUND_EXPRESSION)"
    },
    {
      "question": "Identify the issue in `self . process_role ( new , role , leg_id = id , skip_member = True )` and provide the corrected single-line fix. [SAME_FUNCTION_LESS_ARGS]"
    },
    {
      "question": "Correct the following line while preserving intent: `data = await self . _http . get_user_follows ( from_id = str ( self . id ) )`  (SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Replace the buggy snippet with a correct one: `template = Template ( template_text , undefined = StrictUndefined )`  [pattern=SAME_FUNCTION_LESS_ARGS]"
    },
    {
      "question": "Produce the corrected version of: `subparser . add_argument ( '-f' , '--force' , action = 'store_true' , help = 'Force update of the directory' )`  (family: SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Correct the following line while preserving intent: `return redirect ( request , 'state' , abbr = abbr )`  (SAME_FUNCTION_LESS_ARGS)"
    },
    {
      "question": "Fix the error in: `self . context . execute ( 'mkdir' , backup_dir )`. Return only the corrected line. [SAME_FUNCTION_MORE_ARGS]"
    },
    {
      "question": "Identify the issue in `else : date_string_raw = self . release_gpg_contents . decode ( ) . split ( \"Date: \" , 1 )` and provide the corrected single-line fix. [SAME_FUNCTION_MORE_ARGS]"
    },
    {
      "question": "Fix the error in: `if this . print_iter % hdr_frequency == 0 : print ( h , file = stderr )`. Return only the corrected line. [MORE_SPECIFIC_IF]"
    },
    {
      "question": "This line is buggy: `super ( WayHandler ) . __init__ ( )`. Provide the correct version only. [SAME_FUNCTION_MORE_ARGS]"
    },
    {
      "question": "Given the buggy code: `return Http404 ( 'no such district' )`, rewrite it into a correct version. (Bug type: SINGLE_TOKEN)"
    },
    {
      "question": "Fix the following statement so it is correct: `sort = request . GET . get ( 'sort' )` (Pattern: SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Fix the following statement so it is correct: `if chamber : return self . metadata [ 'chambers' ] [ chamber ] [ 'title' ] else : return ''` (Pattern: MORE_SPECIFIC_IF)"
    },
    {
      "question": "Correct the following line while preserving intent: `else : entity_type = None`  (SINGLE_TOKEN)"
    },
    {
      "question": "Correct the following line while preserving intent: `if ua_email : scraper . user_agent += ' ({})' . format ( ua_email )`  (MORE_SPECIFIC_IF)"
    },
    {
      "question": "Given the buggy code: `resp_data = json . loads ( content )`, rewrite it into a correct version. (Bug type: ADD_METHOD_CALL)"
    },
    {
      "question": "Produce the corrected version of: `attrdef = wsattr ( attr )`  (family: ADD_FUNCTION_AROUND_EXPRESSION)"
    },
    {
      "question": "Identify the issue in `raise ValueError ( \"Value '%s' is invalid (should be one of: %s)\" % ( value , ', ' . join ( self . values ) ) )` and provide the corrected single-line fix. [ADD_FUNCTION_AROUND_EXPRESSION]"
    },
    {
      "question": "Apply the minimal change that makes this line correct: `return HttpResponse ( cal . as_string ( ) )`  (SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Given the buggy code: `if bill [ 'bill_id' ] : cal_event . add ( \"%s-RELATED-BILL-ID\" % ( x_name ) , bill [ 'bill_id' ] )`, rewrite it into a correct version. (Bug type: MORE_SPECIFIC_IF)"
    },
    {
      "question": "Fix the following statement so it is correct: `data = [ { 'id' : 'netid%d' % i , 'name' : 'net%d' % i , 'subnets' : [ 'mysubid%d' % i ] } for i in range ( 0 , 10 ) ]` (Pattern: SAME_FUNCTION_LESS_ARGS)"
    },
    {
      "question": "Correct the following line while preserving intent: `return six . text_type ( obj , 'utf8' )`  (SAME_FUNCTION_LESS_ARGS)"
    },
    {
      "question": "Fix the error in: `def __init__ ( self , creature , playercolor , scale = 15 , dead = False , rotate = None , outlined = False , name = None ) : self . creature = creature if creature is None : if name is None :`. Return only the corrected line. [SINGLE_TOKEN]"
    },
    {
      "question": "Apply the minimal change that makes this line correct: `self . _fmt = mticker . ScalarFormatter ( useMathText = useMathText )`  (SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Produce the corrected version of: `return len ( self . _path . vertices )`  (family: ADD_FUNCTION_AROUND_EXPRESSION)"
    },
    {
      "question": "Fix the error in: `self . set_autoscalez_on ( self , b )`. Return only the corrected line. [SAME_FUNCTION_LESS_ARGS]"
    },
    {
      "question": "Produce the corrected version of: `self . _snap_threshold = False`  (family: SINGLE_TOKEN)"
    },
    {
      "question": "Replace the buggy snippet with a correct one: `if not data . startswith ( TAGS_PREFIX ) : return data`  [pattern=ADD_FUNCTION_AROUND_EXPRESSION]"
    },
    {
      "question": "Given the buggy code: `convert = lambda x : x . decode ( 'ascii' , errors = 'replace' )`, rewrite it into a correct version. (Bug type: SAME_FUNCTION_LESS_ARGS)"
    },
    {
      "question": "Replace the buggy snippet with a correct one: `points = np . asanyarray ( points )`  [pattern=ADD_METHOD_CALL]"
    },
    {
      "question": "Correct the following line while preserving intent: `convert = lambda x : x . decode ( 'ascii' )`  (SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Fix the following statement so it is correct: `x = np . round ( x + ox - xd )` (Pattern: CHANGE_BINARY_OPERATOR)"
    },
    {
      "question": "Identify the issue in `value = float ( field . text ( ) )` and provide the corrected single-line fix. [ADD_FUNCTION_AROUND_EXPRESSION]"
    },
    {
      "question": "This line is buggy: `with open ( os . path . join ( WebAggApplication . _mpl_dirs [ 'images' ] , 'matplotlib.png' ) ) as fd : self . write ( fd . read ( ) )`. Provide the correct version only. [SAME_FUNCTION_MORE_ARGS]"
    },
    {
      "question": "Correct the following line while preserving intent: `self . redirect ( self . request . get ( 'state' ) )`  (ADD_FUNCTION_AROUND_EXPRESSION)"
    },
    {
      "question": "Given the buggy code: `if have_gps_fix : if settings . basealtitude == - 1 : settings . basealtitude = m . alt status . last_altitude_announce = 0.0`, rewrite it into a correct version. (Bug type: MORE_SPECIFIC_IF)"
    },
    {
      "question": "Replace the buggy snippet with a correct one: `args = line . split ( \" \" )`  [pattern=SAME_FUNCTION_LESS_ARGS]"
    },
    {
      "question": "Given the buggy code: `'info:doi/%s' % idt [ 'id' ]`, rewrite it into a correct version. (Bug type: ADD_METHOD_CALL)"
    },
    {
      "question": "Replace the buggy snippet with a correct one: `if any ( pull . status != done for pull in last_pulls ) : fail ( \"Failed pulls detected\" )`  [pattern=SINGLE_TOKEN]"
    },
    {
      "question": "Produce the corrected version of: `assert_array_almost_equal ( lars_obj , cd_obj )`  (family: SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Apply the minimal change that makes this line correct: `def __init__ ( self , sampling = \"stratified\" , random_state = 0 ) : self . sampling = sampling self . random_state = random_state`  (SINGLE_TOKEN)"
    },
    {
      "question": "Identify the issue in `form = VideoForm ( request . POST )` and provide the corrected single-line fix. [SAME_FUNCTION_MORE_ARGS]"
    },
    {
      "question": "Apply the minimal change that makes this line correct: `self . labelers . donmez_pick_1 ( train_segs [ new_training ] , 1 )`  (SAME_FUNCTION_LESS_ARGS)"
    },
    {
      "question": "Fix the error in: `proposal . speaker . fullname if proposal . speaker else '(open)' ,`. Return only the corrected line. [SINGLE_TOKEN]"
    },
    {
      "question": "Produce the corrected version of: `self . __call_command ( self , config [ 'command' ] , ssh_path )`  (family: SAME_FUNCTION_LESS_ARGS)"
    },
    {
      "question": "Correct the following line while preserving intent: `return_dict_escaped = dict ( [ ( k + \"|escaped\" , v ) for k , v in return_dict ] )`  (ADD_METHOD_CALL)"
    },
    {
      "question": "Replace the buggy snippet with a correct one: `self [ \"key_green\" ] = StaticText ( \"Restore\" )`  [pattern=ADD_FUNCTION_AROUND_EXPRESSION]"
    },
    {
      "question": "Fix the error in: `if config . usage . show_second_infobar . value == \"3\" : self . skinName = \"SecondInfoBarECM\" else : self . skinName = \"SecondInfoBar\"`. Return only the corrected line. [MORE_SPECIFIC_IF]"
    },
    {
      "question": "This line is buggy: `if self . _condition == 'weather' : url = self . rest . data [ 'icon_url' ] return re . sub ( r'^http://' , 'https://' , url , flags = re . IGNORECASE )`. Provide the correct version only. [MORE_SPECIFIC_IF]"
    },
    {
      "question": "Correct the following line while preserving intent: `return round ( self . _ticker . get ( 'price_usd' ) , 2 )`  (ADD_FUNCTION_AROUND_EXPRESSION)"
    },
    {
      "question": "Produce the corrected version of: `buf = s . read ( )`  (family: ADD_METHOD_CALL)"
    },
    {
      "question": "Fix the following statement so it is correct: `os . write ( fd , p . stdout )` (Pattern: ADD_METHOD_CALL)"
    },
    {
      "question": "Given the buggy code: `self . queue . put ( _FileDescriptorStreamsThreads . QueueItem ( self , None ) )`, rewrite it into a correct version. (Bug type: SINGLE_TOKEN)"
    },
    {
      "question": "This line is buggy: `tmpcookiefile = tempfile . NamedTemporaryFile ( )`. Provide the correct version only. [SAME_FUNCTION_MORE_ARGS]"
    },
    {
      "question": "Given the buggy code: `if mp . config . GetBoolean ( 'repo.worktree' ) : mp . use_git_worktrees = True`, rewrite it into a correct version. (Bug type: MORE_SPECIFIC_IF)"
    },
    {
      "question": "Apply the minimal change that makes this line correct: `buf = buf . decode ( )`  (SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "This line is buggy: `return None`. Provide the correct version only. [SINGLE_TOKEN]"
    },
    {
      "question": "Produce the corrected version of: `config . get ( 'correction_factor' , None ) ,`  (family: SINGLE_TOKEN)"
    },
    {
      "question": "Produce the corrected version of: `completions = get_completions ( conn )`  (family: SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Apply the minimal change that makes this line correct: `size = pos + r . headers . get ( 'content-length' , 0 )`  (ADD_FUNCTION_AROUND_EXPRESSION)"
    },
    {
      "question": "Given the buggy code: `return`, rewrite it into a correct version. (Bug type: SINGLE_TOKEN)"
    },
    {
      "question": "Replace the buggy snippet with a correct one: `lib . call ( \"bin/pip install -r requirements.txt --upgrade\" , cwd = self . directory . install_directory ( self . feature_name ) , output_log_level = logging . DEBUG )`  [pattern=SAME_FUNCTION_MORE_ARGS]"
    },
    {
      "question": "Correct the following line while preserving intent: `self . requirement_set . install ( [ '--prefix=' + self . egg_directory ] )`  (SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Apply the minimal change that makes this line correct: `config = getattr ( self , manifest_type )`  (SINGLE_TOKEN)"
    },
    {
      "question": "Correct the following line while preserving intent: `if not os . path . exists ( os . path . expanduser ( config . get ( 'root_path' ) )  : os . makedirs ( os . path . expanduser ( config [ 'root_path' ] ) )`  (SINGLE_TOKEN)"
    },
    {
      "question": "This line is buggy: `if config . get ( 'write_password_p4settings' ) : p4settings_file . write ( \"\\nP4PASSWD=%s\" % config [ 'password' ] )`. Provide the correct version only. [SAME_FUNCTION_MORE_ARGS]"
    },
    {
      "question": "This line is buggy: `except ValueError as e : self . _present_error_perspective ( _ ( \"Cannot display device SVG\" ) , e )`. Provide the correct version only. [ADD_FUNCTION_AROUND_EXPRESSION]"
    },
    {
      "question": "Given the buggy code: `_ ( \"Macro: {}\" ) . format ( ratbagd_button . macro )`, rewrite it into a correct version. (Bug type: ADD_FUNCTION_AROUND_EXPRESSION)"
    },
    {
      "question": "This line is buggy: `p = _subprocess . Popen ( [ command ] + list ( self . version_options ) , stdin = popen_stdin , stdout = _subprocess . PIPE , stderr = _subprocess . PIPE , close_fds = True , shell = False , universal_newlines = True )`. Provide the correct version only. [SAME_FUNCTION_LESS_ARGS]"
    },
    {
      "question": "Identify the issue in `p = _subprocess . Popen ( [ command ] + list ( self . version_options ) , stdin = popen_stdin , stdout = _subprocess . PIPE , stderr = _subprocess . PIPE , close_fds = True , shell = False , universal_newlines = True )` and provide the corrected single-line fix. [SAME_FUNCTION_LESS_ARGS]"
    },
    {
      "question": "Identify the issue in `p = _subprocess . Popen ( [ command ] + list ( self . version_options ) , stdin = popen_stdin , stdout = _subprocess . PIPE , stderr = _subprocess . PIPE , close_fds = True , shell = False , universal_newlines = True )` and provide the corrected single-line fix. [SAME_FUNCTION_LESS_ARGS]"
    },
    {
      "question": "Identify the issue in `p = _subprocess . Popen ( [ command ] + list ( self . version_options ) , stdin = popen_stdin , stdout = _subprocess . PIPE , stderr = _subprocess . PIPE , close_fds = True , shell = False , universal_newlines = True )` and provide the corrected single-line fix. [SAME_FUNCTION_LESS_ARGS]"
    },
    {
      "question": "Fix the following statement so it is correct: `p = _subprocess . Popen ( [ command ] + list ( self . version_options ) , stdin = popen_stdin , stdout = _subprocess . PIPE , stderr = _subprocess . PIPE , close_fds = True , shell = False , universal_newlines = True )` (Pattern: SAME_FUNCTION_LESS_ARGS)"
    },
    {
      "question": "Fix the following statement so it is correct: `pickle . dump ( dcmhdrs , f )` (Pattern: SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Fix the following statement so it is correct: `workers [ i ] = ClusterWorker ( clusters [ i ] , qs [ i ] , df . columns , kmeans . cluster_centers_ [ i ] )` (Pattern: SAME_FUNCTION_LESS_ARGS)"
    },
    {
      "question": "Produce the corrected version of: `if vals [ 'state' ] : state = vals [ 'state' ] else :`  (family: MORE_SPECIFIC_IF)"
    },
    {
      "question": "Replace the buggy snippet with a correct one: `return [ { 'contents' : progress , 'highlight_group' : [ 'ctrlp.progress' , 'file_name' ] , } , ]`  [pattern=ADD_FUNCTION_AROUND_EXPRESSION]"
    },
    {
      "question": "Fix the error in: `powerline = ShellPowerline ( finish_args ( EmptyArgs ( 'tmux' , args . config_path ) ) )`. Return only the corrected line. [SAME_FUNCTION_MORE_ARGS]"
    },
    {
      "question": "This line is buggy: `cflags = os . environ . get ( 'CFLAGS' , '-O3' )`. Provide the correct version only. [ADD_FUNCTION_AROUND_EXPRESSION]"
    },
    {
      "question": "Correct the following line while preserving intent: `prompt . assert_has_calls ( [ call ( \"please enter your key\" , default = None , secret = False ) , call ( \"please enter your key_with_value\" , default = 'value' , secret = False ) , ] )`  (SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "This line is buggy: `return set ( [ k for k , v in self . _inputs . items ( ) if v . is_empty ( ) ] )`. Provide the correct version only. [SAME_FUNCTION_MORE_ARGS]"
    },
    {
      "question": "This line is buggy: `if force or v . is_empty ( ) : self . get_input ( k , force = force )`. Provide the correct version only. [SAME_FUNCTION_MORE_ARGS]"
    },
    {
      "question": "Identify the issue in `self . __filestore_resource = fs . insert_resource ( 'ZEBRA_HDF51' , self . __read_filepath )` and provide the corrected single-line fix. [SAME_FUNCTION_MORE_ARGS]"
    },
    {
      "question": "Fix the error in: `return [ { 'contents' : str ( unread_count ) , 'highlight_group' : [ 'email_alert_gradient' , 'email_alert' ] , 'gradient_level' : unread_count * 100.0 / max_msgs , } ]`. Return only the corrected line. [ADD_FUNCTION_AROUND_EXPRESSION]"
    },
    {
      "question": "Given the buggy code: `textwidth = getbufvar ( '%' , '&textwidth' )`, rewrite it into a correct version. (Bug type: ADD_FUNCTION_AROUND_EXPRESSION)"
    },
    {
      "question": "Identify the issue in `if name in self . theme_option : mergedicts ( r , self . theme_option [ name ] )` and provide the corrected single-line fix. [MORE_SPECIFIC_IF]"
    },
    {
      "question": "Produce the corrected version of: `raise OSError ( eno , self . os . strerror ( eno ) + extra )`  (family: ADD_FUNCTION_AROUND_EXPRESSION)"
    },
    {
      "question": "Identify the issue in `else : if self . runner . has_failed ( subject ) : has_changed = self . _update_one_status_for_one_subject_if_needed ( subject , \"last run failed\" )` and provide the corrected single-line fix. [SAME_FUNCTION_MORE_ARGS]"
    },
    {
      "question": "Fix the error in: `return s if PY3 or type ( s ) is unicode else unicode ( s , \"unicode_escape\" )`. Return only the corrected line. [ADD_METHOD_CALL]"
    },
    {
      "question": "Fix the following statement so it is correct: `date = date + timezone . utcoffset ( date )` (Pattern: SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Produce the corrected version of: `self . current_component_type . add_children ( Children ( name , type_ , description ) )`  (family: SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Identify the issue in `self . current_component_type . add_children ( Children ( name , type_ , description ) )` and provide the corrected single-line fix. [SAME_FUNCTION_MORE_ARGS]"
    },
    {
      "question": "Fix the following statement so it is correct: `p = _subprocess . Popen ( [ command ] + list ( self . version_options ) , stdin = popen_stdin , stdout = _subprocess . PIPE , stderr = _subprocess . PIPE , close_fds = True , shell = False , universal_newlines = True )` (Pattern: SAME_FUNCTION_LESS_ARGS)"
    },
    {
      "question": "Produce the corrected version of: `else : denom = ( 100 - sum ( [ float ( x [ 1 ] ) for x in expected ] ) )`  (family: ADD_METHOD_CALL)"
    },
    {
      "question": "Replace the buggy snippet with a correct one: `if ( r . status_code >= 400 ) : raise CliError ( \"Request responded a {0} code\" . format ( r . status_code ) )`  [pattern=MORE_SPECIFIC_IF]"
    },
    {
      "question": "Given the buggy code: `_run_slimbam ( er )`, rewrite it into a correct version. (Bug type: SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Fix the error in: `p = get_pbparser ( \"pbcoretools.tasks.pbvalidate\" , \"0.1.0\" , \"pbvalidate\" , \"Run pbvalidate on SubreadSet\" , \"python -m pbcoretools.pbvalidate.main --resolved-tool-contract\" , is_distributed = True , nproc = 1 )`. Return only the corrected line. [SAME_FUNCTION_MORE_ARGS]"
    },
    {
      "question": "This line is buggy: `elif key [ pygame . K_BACKSPACE ] : if len ( string ) > 0 : backspace ( )`. Provide the correct version only. [SAME_FUNCTION_MORE_ARGS]"
    },
    {
      "question": "Apply the minimal change that makes this line correct: `if ds_file . file_type_id == FileTypes . DS_CCS . file_type_id : ccs_files . append ( ds_file . path ) log . info ( \"Exporting %s\" , ds_file . path )`  (MORE_SPECIFIC_IF)"
    },
    {
      "question": "Correct the following line while preserving intent: `def get_privateip ( self ) : conv = self . conversation ( ) return conv . get_remote ( 'private-address' )`  (SINGLE_TOKEN)"
    },
    {
      "question": "Fix the following statement so it is correct: `latex_lexer . LatexIncrementalDecoder . __init__ ( self )` (Pattern: SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Given the buggy code: `sample_count = self . sample_rate * duration`, rewrite it into a correct version. (Bug type: ADD_FUNCTION_AROUND_EXPRESSION)"
    },
    {
      "question": "Replace the buggy snippet with a correct one: `limit = data . get ( \"limit\" , 0 )`  [pattern=ADD_FUNCTION_AROUND_EXPRESSION]"
    },
    {
      "question": "Fix the following statement so it is correct: `def test_models ( user , client_unauthenticated , db_session , api_auth ) : db_session . add ( user ) db_session . commit ( )` (Pattern: SINGLE_TOKEN)"
    },
    {
      "question": "Apply the minimal change that makes this line correct: `journal_file . write ( entry )`  (ADD_FUNCTION_AROUND_EXPRESSION)"
    },
    {
      "question": "This line is buggy: `consts = pdt . Constants ( )`. Provide the correct version only. [SAME_FUNCTION_MORE_ARGS]"
    },
    {
      "question": "Given the buggy code: `interfaces = get_interfaces ( )`, rewrite it into a correct version. (Bug type: ADD_FUNCTION_AROUND_EXPRESSION)"
    },
    {
      "question": "Apply the minimal change that makes this line correct: `else : entity_list , original_text_list = name_detection . detect_entity ( text = message )`  (SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Identify the issue in `df = infer_model . forward_sample ( size = n , return_type = 'dataframe' )` and provide the corrected single-line fix. [SAME_FUNCTION_LESS_ARGS]"
    },
    {
      "question": "Given the buggy code: `continue`, rewrite it into a correct version. (Bug type: SINGLE_TOKEN)"
    },
    {
      "question": "Correct the following line while preserving intent: `mi = self . file [ \"/MovieInfo\" ]`  (ADD_FUNCTION_AROUND_EXPRESSION)"
    },
    {
      "question": "Identify the issue in `metadata = ''` and provide the corrected single-line fix. [SINGLE_TOKEN]"
    },
    {
      "question": "Fix the error in: `rgID = int ( rg [ \"ID\" ] [ : 8 ] , 16 )`. Return only the corrected line. [ADD_FUNCTION_AROUND_EXPRESSION]"
    },
    {
      "question": "Fix the following statement so it is correct: `if ( ( self . pbiFlags & PBI_FLAGS_MAPPED ) and np . all ( ( self . nM == 0 ) & ( self . nMM == 0 ) ) ) : raise IncompatibleFile , \"This bam.pbi file was generated by a version of pbindex with\" \" a bug.  Please rerun pbindex.\"` (Pattern: MORE_SPECIFIC_IF)"
    },
    {
      "question": "This line is buggy: `def get_all ( self , type = None , status = type , start_time = None , end_time = None ) :`. Provide the correct version only. [SINGLE_TOKEN]"
    },
    {
      "question": "Produce the corrected version of: `days_to_owe_d = account . balance / price_per_day`  (family: ADD_FUNCTION_AROUND_EXPRESSION)"
    },
    {
      "question": "Given the buggy code: `wait_and_click ( kc_window , 'next.png' , [ - 700 , 30 , - 400 , 30 ] )`, rewrite it into a correct version. (Bug type: SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Identify the issue in `check_and_click ( kc_window , 'next.png' , WAITLONG , expand_areas ( 'next' ) )` and provide the corrected single-line fix. [SAME_FUNCTION_LESS_ARGS]"
    },
    {
      "question": "This line is buggy: `if edgeValue == None or len ( self . edges . setdefault ( ( src , dst ) , set ( ) ) ) == 0 : self . nodes [ src ] . outgoing . remove ( dst ) self . nodes [ dst ] . incoming . remove ( src )`. Provide the correct version only. [MORE_SPECIFIC_IF]"
    },
    {
      "question": "Replace the buggy snippet with a correct one: `self . are ( '<html>a block</html>' , fragment , debug = True )`  [pattern=SAME_FUNCTION_LESS_ARGS]"
    },
    {
      "question": "Fix the following statement so it is correct: `pages_df = pd . concat ( page_dfs )` (Pattern: ADD_METHOD_CALL)"
    },
    {
      "question": "Identify the issue in `df = get_stock_data ( i , self . start_date , self . end_date )` and provide the corrected single-line fix. [SAME_FUNCTION_MORE_ARGS]"
    },
    {
      "question": "Fix the following statement so it is correct: `return proposal . url_for ( ) + \"#c%d\" % self . id` (Pattern: SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Given the buggy code: `blah = DEBUG or self . verbosity >= 0`, rewrite it into a correct version. (Bug type: CHANGE_BINARY_OPERATOR)"
    },
    {
      "question": "Apply the minimal change that makes this line correct: `self . put_cell ( nr - 1 , 0 , XL_CELL_EMPTY , - 1 )`  (SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Correct the following line while preserving intent: `for x in adict . keys ( ) : adict [ uri + x ] = adict [ x ]`  (ADD_FUNCTION_AROUND_EXPRESSION)"
    },
    {
      "question": "Replace the buggy snippet with a correct one: `nchars /= 2`  [pattern=SINGLE_TOKEN]"
    },
    {
      "question": "Fix the error in: `print ( 'ROW_B2' , rowx , bits1 , has_defaults , file = self . logfile )`. Return only the corrected line. [SAME_FUNCTION_LESS_ARGS]"
    },
    {
      "question": "Fix the following statement so it is correct: `if \"drink\" in self . _data and ( weights := self . _data [ \"drink\" ] [ \"weights\" ] . pop ( ) ) : return float ( weights [ \"change\" ] ) else : return None` (Pattern: MORE_SPECIFIC_IF)"
    },
    {
      "question": "Fix the following statement so it is correct: `def write_ctl_condeml_file ( ctl , seq , tree , out ) :` (Pattern: SINGLE_TOKEN)"
    },
    {
      "question": "Apply the minimal change that makes this line correct: `if d_offset + k < len ( text ) : pairs . append ( ( text [ i : i + k ] , text [ d_offset : d_offset + k ] ) )`  (CHANGE_BINARY_OPERATOR)"
    },
    {
      "question": "Fix the error in: `self . resolved_url = '/' + resolve ( endpoint_path ) . route`. Return only the corrected line. [ADD_METHOD_CALL]"
    },
    {
      "question": "Fix the following statement so it is correct: `def test_autorank_nonnormal_heteroscedactic ( self ) : stds = [ 0.1 , 0.1 , 0.5 , 0.1 , 0.05 , 0.05 ] means = [ 0.9 , 0.9 , 0.9 , 0.9 , 0.9 , 0.9 ] data = pd . DataFrame ( )` (Pattern: SINGLE_TOKEN)"
    },
    {
      "question": "Given the buggy code: `with open ( \"senti_disclosures.pkl\" , \"rb\" ) as handle : sentiments_disclosures = pickle . load ( handle )`, rewrite it into a correct version. (Bug type: SINGLE_TOKEN)"
    },
    {
      "question": "Fix the error in: `data = camelize ( data )`. Return only the corrected line. [ADD_FUNCTION_AROUND_EXPRESSION]"
    },
    {
      "question": "Fix the error in: `summary = Summary ( data , \"Test Location\" , \"Test Page Token\" )`. Return only the corrected line. [SAME_FUNCTION_LESS_ARGS]"
    },
    {
      "question": "This line is buggy: `for mode , source_id in db ( ) . execute ( q , [ self . id ] ) : assert ( mode in ( 'c' , 'm' ) ) name = File ( id = source_id ) . name yield mode , name`. Provide the correct version only. [ADD_METHOD_CALL]"
    },
    {
      "question": "Replace the buggy snippet with a correct one: `return ( status , stdout . strip ( '\\n' ) )`  [pattern=ADD_METHOD_CALL]"
    },
    {
      "question": "Fix the error in: `config [ i ] [ 'password' ] = None`. Return only the corrected line. [SINGLE_TOKEN]"
    },
    {
      "question": "Identify the issue in `t = start_time` and provide the corrected single-line fix. [ADD_FUNCTION_AROUND_EXPRESSION]"
    },
    {
      "question": "Produce the corrected version of: `return ( func ( dti / tdi ) * tdi ) . astype ( 'int64' ) . astype ( ret_type )`  (family: ADD_FUNCTION_AROUND_EXPRESSION)"
    },
    {
      "question": "Fix the following statement so it is correct: `lines = [ a . rstrip ( ) for a in uh . readlines ( ) ]` (Pattern: ADD_METHOD_CALL)"
    },
    {
      "question": "Given the buggy code: `except Exception as e : self . error ( e )`, rewrite it into a correct version. (Bug type: ADD_FUNCTION_AROUND_EXPRESSION)"
    },
    {
      "question": "Correct the following line while preserving intent: `self . error ( \"cannot set non-numeric value:\" , value )`  (ADD_FUNCTION_AROUND_EXPRESSION)"
    },
    {
      "question": "Identify the issue in `data += buf . decode ( )` and provide the corrected single-line fix. [SAME_FUNCTION_MORE_ARGS]"
    },
    {
      "question": "Fix the error in: `time . sleep ( self . timetable [ 'next' ] - time . time ( ) )`. Return only the corrected line. [ADD_FUNCTION_AROUND_EXPRESSION]"
    },
    {
      "question": "Produce the corrected version of: `self . error ( \"Executing command\" , self . command , \"resulted in error:\" , str ( error ) )`  (family: ADD_FUNCTION_AROUND_EXPRESSION)"
    },
    {
      "question": "Produce the corrected version of: `def prepare ( self , request , response , data ) :`  (family: SINGLE_TOKEN)"
    },
    {
      "question": "Given the buggy code: `number_of_jobs = int ( number_of_bases ) / 100`, rewrite it into a correct version. (Bug type: ADD_FUNCTION_AROUND_EXPRESSION)"
    },
    {
      "question": "This line is buggy: `request . environ [ 'bark.useragent_ip' ] = useragent_ip`. Provide the correct version only. [ADD_FUNCTION_AROUND_EXPRESSION]"
    },
    {
      "question": "Fix the error in: `if len ( list ) != 0 : print ( \"You can use these short/long design elements:\\n %s\" ) % sorted ( list )`. Return only the corrected line. [MORE_SPECIFIC_IF]"
    },
    {
      "question": "Given the buggy code: `if len ( higher_list ) != 0 : print ( \"Try %s beads instead.\" % higher_bead_number )`, rewrite it into a correct version. (Bug type: MORE_SPECIFIC_IF)"
    },
    {
      "question": "Produce the corrected version of: `self . assertEqual ( TransitionMatrix ( matrix ) , '[[None]]' )`  (family: ADD_FUNCTION_AROUND_EXPRESSION)"
    },
    {
      "question": "Apply the minimal change that makes this line correct: `self . PIN = self . config . get ( self . NAME , 'sensor_pin' , fallback = self . PIN )`  (ADD_FUNCTION_AROUND_EXPRESSION)"
    },
    {
      "question": "Fix the following statement so it is correct: `expiration ,` (Pattern: ADD_METHOD_CALL)"
    },
    {
      "question": "Fix the error in: `body = { \"title\" : slug , \"content\" : content , \"labels\" : labels if labels else [ ] }`. Return only the corrected line. [ADD_FUNCTION_AROUND_EXPRESSION]"
    },
    {
      "question": "Correct the following line while preserving intent: `body = { \"title\" : slug , \"content\" : content , \"labels\" : labels if labels else [ ] }`  (ADD_FUNCTION_AROUND_EXPRESSION)"
    },
    {
      "question": "Fix the following statement so it is correct: `super ( ) . __init__ ( alphabet , 3 )` (Pattern: SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "This line is buggy: `D [ c ] = np . array ( [ np . nan if cell . value is '' else cell . value for cell in cells ] )`. Provide the correct version only. [CHANGE_BINARY_OPERATOR]"
    },
    {
      "question": "Correct the following line while preserving intent: `self . path = self . configuration . get ( 'path' )`  (SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Fix the following statement so it is correct: `if ( ( 'rotationmeasure' in self . soltab . name ) or ( 'RMextract' in self . soltab . name ) or ( 'clock' in self . soltab . name ) or ( 'faraday' in self . soltab . name ) and ( self . axis == 'freq' )  : self . logger . info ( 'Rotation Measure or clock does not support frequency axis! Switch to time instead.' ) return` (Pattern: SINGLE_TOKEN)"
    },
    {
      "question": "Correct the following line while preserving intent: `if ( 'rotationmeasure' in st . name ) or ( 'RMextract' in st . name ) or ( 'clock' in st . name ) or ( 'faraday' in st . name ) or ( 'tec' in st . name ) : order_new = [ 'time' , 'ant' ] else : order_new = [ 'time' , 'freq' , 'ant' ]`  (MORE_SPECIFIC_IF)"
    },
    {
      "question": "Apply the minimal change that makes this line correct: `file = stream ) print ( file = stream )`  (SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Correct the following line while preserving intent: `super ( ) . __init__ ( self , parent = parent , * args , ** kwargs )`  (SAME_FUNCTION_LESS_ARGS)"
    },
    {
      "question": "Apply the minimal change that makes this line correct: `callback ( ** dict ( p_args . _get_kwargs ( ) ) )`  (ADD_FUNCTION_AROUND_EXPRESSION)"
    },
    {
      "question": "Fix the error in: `self . logger . error ( \"Could not aggregate tags under event data. Reason {0}\" . format ( err ) )`. Return only the corrected line. [SAME_FUNCTION_MORE_ARGS]"
    },
    {
      "question": "Identify the issue in `path = list ( error . path )` and provide the corrected single-line fix. [ADD_FUNCTION_AROUND_EXPRESSION]"
    },
    {
      "question": "Identify the issue in `self . logger . error ( \"Error sending message: {err}\" . format ( err = traceback . format_exc ( ) ) )` and provide the corrected single-line fix. [SAME_FUNCTION_MORE_ARGS]"
    },
    {
      "question": "Apply the minimal change that makes this line correct: `self . _send ( queues [ 0 ] , event )`  (ADD_FUNCTION_AROUND_EXPRESSION)"
    },
    {
      "question": "Fix the following statement so it is correct: `self . assertEqual ( [ '{foo}' ] , rule . ctx_rules . keys ( ) )` (Pattern: ADD_FUNCTION_AROUND_EXPRESSION)"
    },
    {
      "question": "Apply the minimal change that makes this line correct: `sage : _ = E . __dict__ . pop ( '_pari_curve' )`  (SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Fix the error in: `LogisticRegressionWithSGD . train ( rdd_data , iterations = 10000 , numClasses = 2 , step = 0.001 , initialWeights = None if model is None else model . weights )`. Return only the corrected line. [SAME_FUNCTION_LESS_ARGS]"
    },
    {
      "question": "Correct the following line while preserving intent: `tree = ElementTree . fromstring ( html , forbid_dtd = True )`  (ADD_METHOD_CALL)"
    },
    {
      "question": "Identify the issue in `self . _set_objects ( self )` and provide the corrected single-line fix. [ADD_FUNCTION_AROUND_EXPRESSION]"
    },
    {
      "question": "Fix the error in: `if len ( value ) > field . max_length : cleaned_value = value [ : field . max_length ] logger . warn ( 'The attribute \"%s\" was trimmed from \"%s\" to \"%s\"' , attr , value , cleaned_value )`. Return only the corrected line. [MORE_SPECIFIC_IF]"
    },
    {
      "question": "Given the buggy code: `if create and not os . path . exists ( os . path . dirname ( target )  : os . makedirs ( os . path . dirname ( target ) )`, rewrite it into a correct version. (Bug type: SINGLE_TOKEN)"
    },
    {
      "question": "Replace the buggy snippet with a correct one: `search_list = default_search_list`  [pattern=ADD_FUNCTION_AROUND_EXPRESSION]"
    },
    {
      "question": "Replace the buggy snippet with a correct one: `marker_size = to_int ( line_options . get ( 'marker_size' ) )`  [pattern=SAME_FUNCTION_MORE_ARGS]"
    },
    {
      "question": "Apply the minimal change that makes this line correct: `try : return inspect . getsourcelines ( obj ) except ( IOError , TypeError ) , err : try : objinit = obj . __init__ except AttributeError :`  (SINGLE_TOKEN)"
    },
    {
      "question": "Correct the following line while preserving intent: `print name`  (SINGLE_TOKEN)"
    },
    {
      "question": "Fix the following statement so it is correct: `if ( win != None ) : try : name = win . property_get ( \"_NET_WM_NAME\" ) [ 2 ] except TypeError , exc :` (Pattern: MORE_SPECIFIC_IF)"
    },
    {
      "question": "Given the buggy code: `def groupStop ( self , group_id ) : \"\"\"\n     Deletes group with given ID.\n     \"\"\"`, rewrite it into a correct version. (Bug type: SINGLE_TOKEN)"
    },
    {
      "question": "Fix the following statement so it is correct: `stage = self . stages [ axis ]` (Pattern: ADD_FUNCTION_AROUND_EXPRESSION)"
    },
    {
      "question": "Replace the buggy snippet with a correct one: `s = self . formatter . toString ( vtx , self . context , addLabel = addLabel , useThisFormat = useThisFormat , NONE_string = NONE_string , localize = True )`  [pattern=SINGLE_TOKEN]"
    },
    {
      "question": "Replace the buggy snippet with a correct one: `x = ( xmax - xmin ) / 2`  [pattern=CHANGE_BINARY_OPERATOR]"
    },
    {
      "question": "Fix the following statement so it is correct: `if bitten >= 0 and bitten not in protected and ns [ bitten ] [ 1 ] == 0 : ns [ bitten ] = ( ns [ bitten ] [ 0 ] , 2 * day + 1 )` (Pattern: MORE_SPECIFIC_IF)"
    },
    {
      "question": "Fix the following statement so it is correct: `self . assertRaises ( stem . connection . UnreadableCookieFile , self . _check_auth , auth_type , auth_value )` (Pattern: SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "This line is buggy: `heywatch_conf . append ( \"\" . join ( ( \"-> jpg_640x\" , \"$s3/thumbnail/large/\" , video . id , \".jpg\" ) ) )`. Provide the correct version only. [ADD_FUNCTION_AROUND_EXPRESSION]"
    },
    {
      "question": "Apply the minimal change that makes this line correct: `heywatch_conf . append ( \"\" . join ( ( \"-> hls\" , \"$s3/hls/\" , video . id , \".m3u8\" ) ) )`  (ADD_FUNCTION_AROUND_EXPRESSION)"
    },
    {
      "question": "Identify the issue in `response = job . submit ( heywatch_conf )` and provide the corrected single-line fix. [SAME_FUNCTION_MORE_ARGS]"
    },
    {
      "question": "Apply the minimal change that makes this line correct: `output . write ( [ counter ] , [ theta ] , [ theta_dot ] , [ x ] , [ x_dot ] , [ u ] , [ prediction ] )`  (SAME_FUNCTION_LESS_ARGS)"
    },
    {
      "question": "Given the buggy code: `output . write ( [ counter ] , [ theta ] , [ theta_dot ] , [ x ] , [ x_dot ] , [ u ] , [ prediction ] )`, rewrite it into a correct version. (Bug type: SAME_FUNCTION_LESS_ARGS)"
    },
    {
      "question": "Fix the error in: `exc : println ( exc , ERROR )`. Return only the corrected line. [ADD_FUNCTION_AROUND_EXPRESSION]"
    },
    {
      "question": "Fix the following statement so it is correct: `if args . verbose : sys . stdout . write ( test . output . apply_filters ( test_results . getvalue ( ) , * output_filters ) ) println ( ) elif not run_result . failures : println ( \" success (%0.2fs)\" % ( time . time ( ) - start_time ) , SUCCESS ) else : println ( \" failed (%0.2fs)\" % ( time . time ( ) - start_time ) , ERROR )` (Pattern: MORE_SPECIFIC_IF)"
    },
    {
      "question": "Correct the following line while preserving intent: `if not patchset_id : patchset_id = patchsets [ - 1 ] . key ( ) . id ( )`  (MORE_SPECIFIC_IF)"
    },
    {
      "question": "Given the buggy code: `return show ( request , form )`, rewrite it into a correct version. (Bug type: SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Identify the issue in `return show ( request , form )` and provide the corrected single-line fix. [SAME_FUNCTION_MORE_ARGS]"
    },
    {
      "question": "This line is buggy: `return self . instructor + \"- \" + self . question . text + \": \" + self . text`. Provide the correct version only. [ADD_FUNCTION_AROUND_EXPRESSION]"
    },
    {
      "question": "Fix the following statement so it is correct: `if len ( stat_comp ) != 44 and _is_float ( stat_comp [ 13 ] , stat_comp [ 14 ] , stat_comp [ 21 ] ) : exc = IOError ( \"stat file had an unexpected format: %s\" % stat_path ) _log_failure ( parameter , exc ) raise exc` (Pattern: CHANGE_BINARY_OPERATOR)"
    },
    {
      "question": "This line is buggy: `super ( ControllerError , self ) . __init__ ( )`. Provide the correct version only. [SAME_FUNCTION_MORE_ARGS]"
    },
    {
      "question": "Correct the following line while preserving intent: `self . _socket_file = self . _socket . makefile ( )`  (SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Fix the error in: `p = _subprocess . Popen ( [ command ] + list ( self . version_options ) , stdin = popen_stdin , stdout = _subprocess . PIPE , stderr = _subprocess . PIPE , close_fds = True , shell = False , universal_newlines = True )`. Return only the corrected line. [SAME_FUNCTION_LESS_ARGS]"
    },
    {
      "question": "Produce the corrected version of: `for bw_value in sorted ( bw_to_relay . keys ( ) , reverse = True  : for nickname in bw_to_relay [ bw_value ] : expected_line = \"%i. speedyexit (104590 bytes/s)\" % count printed_line = \"%i. %s (%i bytes/s)\" % ( count , nickname , bw_value )`  (family: SINGLE_TOKEN)"
    },
    {
      "question": "Produce the corrected version of: `count = sum ( ( valid_chars [ paren ] if paren in valid_chars else paren for paren in parens ) )`  (family: ADD_FUNCTION_AROUND_EXPRESSION)"
    },
    {
      "question": "Identify the issue in `if profile_modified or force_save : profile . save ( )` and provide the corrected single-line fix. [MORE_SPECIFIC_IF]"
    },
    {
      "question": "Given the buggy code: `_ = dumps ( x )`, rewrite it into a correct version. (Bug type: ADD_FUNCTION_AROUND_EXPRESSION)"
    },
    {
      "question": "Apply the minimal change that makes this line correct: `if z ** ( ord / q ) == one : generator = False break`  (CHANGE_BINARY_OPERATOR)"
    },
    {
      "question": "Produce the corrected version of: `config_policy = stem . exit_policy . get_config_policy ( policy , self . get_info ( 'address' ) )`  (family: SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Replace the buggy snippet with a correct one: `count , length , vectors = qf . _pari_ ( ) . qfminim ( 0 , None )`  [pattern=SAME_FUNCTION_LESS_ARGS]"
    },
    {
      "question": "Identify the issue in `self . primality = [ false ]` and provide the corrected single-line fix. [SINGLE_TOKEN]"
    },
    {
      "question": "Fix the error in: `self . primality = [ false ]`. Return only the corrected line. [SINGLE_TOKEN]"
    },
    {
      "question": "Fix the error in: `self . primality = [ false ]`. Return only the corrected line. [SINGLE_TOKEN]"
    },
    {
      "question": "Produce the corrected version of: `self . primality = [ false ]`  (family: SINGLE_TOKEN)"
    },
    {
      "question": "Replace the buggy snippet with a correct one: `child . expect ( '20\\s+25\\s+30\\s+35\\s+40\\s+45\\s+50\\s+55\\s+60\\s+65' , timeout = None )`  [pattern=SAME_FUNCTION_LESS_ARGS]"
    },
    {
      "question": "Identify the issue in `def set_hased_password ( self , password ) : self . __password = password` and provide the corrected single-line fix. [SINGLE_TOKEN]"
    },
    {
      "question": "Correct the following line while preserving intent: `if 'substitute' in kwds : del kwds [ 'substitute' ] return self . substitute ( dict , ** kwds ) else :`  (MORE_SPECIFIC_IF)"
    },
    {
      "question": "This line is buggy: `s += data + ': ' + self . __skeleton__ [ table ] [ column ] [ data ] + '; '`. Provide the correct version only. [ADD_FUNCTION_AROUND_EXPRESSION]"
    },
    {
      "question": "This line is buggy: `async_request ( worksheet_command ( 'eval' ) , generic_callback , \"save_only=1&id=\" + id + \"&input=\" + cell . value )`. Provide the correct version only. [ADD_FUNCTION_AROUND_EXPRESSION]"
    },
    {
      "question": "Given the buggy code: `coeff = f . dict ( ) . values ( ) [ 0 ] / g . dict ( ) . values ( ) [ 0 ]`, rewrite it into a correct version. (Bug type: ADD_FUNCTION_AROUND_EXPRESSION)"
    },
    {
      "question": "Correct the following line while preserving intent: `raise ValueError ( \"%s is not an outer corner\" % corner )`  (ADD_FUNCTION_AROUND_EXPRESSION)"
    },
    {
      "question": "Fix the error in: `else : M = self . _bsgs ( E ( 0 ) , 1 , ub )`. Return only the corrected line. [SINGLE_TOKEN]"
    },
    {
      "question": "This line is buggy: `sage : os . listdir ( 'notebook-test' )`. Provide the correct version only. [ADD_FUNCTION_AROUND_EXPRESSION]"
    },
    {
      "question": "Fix the error in: `m = __builtin__ . __import__ ( name )`. Return only the corrected line. [SAME_FUNCTION_MORE_ARGS]"
    },
    {
      "question": "Replace the buggy snippet with a correct one: `self . save_snapshot ( username , current )`  [pattern=SAME_FUNCTION_LESS_ARGS]"
    },
    {
      "question": "Produce the corrected version of: `def strip_answer ( self , s ) : \"\"\" Returns the string s with Matlab ' s answer prompt removed . EXAMPLES : :`  (family: SINGLE_TOKEN)"
    },
    {
      "question": "This line is buggy: `if line [ eq - 1 ] in eq_chars or line [ eq + 1 ] in eq_chars : i += 1 continue`. Provide the correct version only. [MORE_SPECIFIC_IF]"
    },
    {
      "question": "Apply the minimal change that makes this line correct: `if stripped_line [ 0 ] == '#' : pos = stripped_line . find ( hint ) if ( pos > - 1 ) and ( stripped_line [ pos + len ( hint ) ] in [ '=' , ':' ] ) :`  (MORE_SPECIFIC_IF)"
    },
    {
      "question": "Apply the minimal change that makes this line correct: `self . assert_ ( self . jobdb . get_job_by_id ( job_id ) . update_time < datetime . datetime . now ( ) )`  (CHANGE_BINARY_OPERATOR)"
    },
    {
      "question": "Apply the minimal change that makes this line correct: `host_info [ 'uptime' ] = int ( uptime [ 0 ] )`  (ADD_FUNCTION_AROUND_EXPRESSION)"
    },
    {
      "question": "Identify the issue in `SAGE : sage . : J = JonesDatabase ( read_only = False )` and provide the corrected single-line fix. [SAME_FUNCTION_LESS_ARGS]"
    },
    {
      "question": "Apply the minimal change that makes this line correct: `return s . replace ( SAGE_BEGIN , '' ) . replace ( SAGE_END , '' ) . replace ( SC )`  (SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Fix the following statement so it is correct: `sage : [ q . facet_normals ( ) for q in fan ]` (Pattern: ADD_FUNCTION_AROUND_EXPRESSION)"
    },
    {
      "question": "Produce the corrected version of: `need : : sage : E . heegner_index ( - 8 , descent_second_limit = 16 )`  (family: SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Identify the issue in `k = max ( [ 3 , g . clique_number ( ) , ceil ( g . order ( ) / len ( g . independent_set ( ) ) ) ] )` and provide the corrected single-line fix. [ADD_FUNCTION_AROUND_EXPRESSION]"
    },
    {
      "question": "Correct the following line while preserving intent: `master : : sage : dev . pull ( ticket_or_remote_branch = \"master\" , branch = \"master\" )`  (SAME_FUNCTION_LESS_ARGS)"
    },
    {
      "question": "Apply the minimal change that makes this line correct: `if self . _inner_shape == [ ] : s = \"Set of strong %s-tableaux\" % self . k s += \" of shape %s\" % self . _outer_shape else :`  (ADD_FUNCTION_AROUND_EXPRESSION)"
    },
    {
      "question": "Fix the following statement so it is correct: `if any ( [ type ( arg ) . __module__ == 'numpy' for arg in args ] ) : raise NotImplementedError ( \"Numpy arrays are not supported as arguments for symbolic expressions\" )` (Pattern: MORE_SPECIFIC_IF)"
    },
    {
      "question": "Correct the following line while preserving intent: `raise TracConnectionError ( e )`  (SAME_FUNCTION_LESS_ARGS)"
    },
    {
      "question": "Identify the issue in `ticket is self . _current_ticket ( )` and provide the corrected single-line fix. [CHANGE_BINARY_OPERATOR]"
    },
    {
      "question": "Given the buggy code: `self . _UI . info ( \"If this is really what you want, use \\`{0}\\` to upload your changes.\" . format ( remote_branch , self . _format_command ( \"upload\" , ticket = ticket , remote_branch = remote_branch , force = True ) ) )`, rewrite it into a correct version. (Bug type: SAME_FUNCTION_LESS_ARGS)"
    },
    {
      "question": "Produce the corrected version of: `bij . ret_rig_con = KRT . rigged_configurations ( ) ( * self . ret_rig_con )`  (family: SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Correct the following line while preserving intent: `csums . append ( h . hexdigest ( ) )`  (ADD_FUNCTION_AROUND_EXPRESSION)"
    },
    {
      "question": "Produce the corrected version of: `return [ i . indexes [ 0 ] . data for i in itertools . chain ( result ) ]`  (family: ADD_FUNCTION_AROUND_EXPRESSION)"
    },
    {
      "question": "Identify the issue in `yield inode [ 'name' ] . replace ( self . _root_path [ 1 : ] + '/' , '' )` and provide the corrected single-line fix. [SAME_FUNCTION_MORE_ARGS]"
    },
    {
      "question": "Produce the corrected version of: `def read_tarmember ( self , member ) : header = '' for field in self . header_fields : value = getattr ( member , field )`  (family: SINGLE_TOKEN)"
    },
    {
      "question": "Replace the buggy snippet with a correct one: `return flask . Response ( generate ( ) , headers = headers )`  [pattern=ADD_FUNCTION_AROUND_EXPRESSION]"
    },
    {
      "question": "Replace the buggy snippet with a correct one: `uuid . uuid4 ( )`  [pattern=ADD_FUNCTION_AROUND_EXPRESSION]"
    },
    {
      "question": "This line is buggy: `union = tuple ( set ( j ) | set ( k ) )`. Provide the correct version only. [ADD_FUNCTION_AROUND_EXPRESSION]"
    },
    {
      "question": "Apply the minimal change that makes this line correct: `return 0.0`  (ADD_FUNCTION_AROUND_EXPRESSION)"
    },
    {
      "question": "Replace the buggy snippet with a correct one: `if self . _startpoint is not None : self . add ( self . _startpoint ) self . _startpoint = None`  [pattern=MORE_SPECIFIC_IF]"
    },
    {
      "question": "Correct the following line while preserving intent: `res . append ( correct_k . data . numpy ( ) . squeeze ( ) . tolist ( ) )`  (ADD_METHOD_CALL)"
    },
    {
      "question": "Fix the following statement so it is correct: `result = BinaryValue ( )` (Pattern: SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Identify the issue in `return setattr ( self , self . _compat_mapping [ name ] )` and provide the corrected single-line fix. [SAME_FUNCTION_MORE_ARGS]"
    },
    {
      "question": "Produce the corrected version of: `if resolve_x_to == \"VALUE_ERROR\" : raise ValueError ( \"Unable to resolve to binary >%s<\" % string ) elif resolve_x_to == \"ZEROS\" : string = string . replace ( char , \"0\" ) elif resolve_x_to == \"ONES\" : string = string . replace ( char , \"1\" ) elif resolve_x_to == \"RANDOM\" : bits = \"{0:b}\" . format ( random . getrandbits ( 1 ) ) string = string . replace ( char , bits )`  (family: MORE_SPECIFIC_IF)"
    },
    {
      "question": "Apply the minimal change that makes this line correct: `if resolve_x_to == \"VALUE_ERROR\" : raise ValueError ( \"Unable to resolve to binary >%s<\" % string ) elif resolve_x_to == \"ZEROS\" : string = string . replace ( char , \"0\" )`  (MORE_SPECIFIC_IF)"
    },
    {
      "question": "Identify the issue in `if isinstance ( value , get_python_integer_types ( ) ) and value < 0x7fffffff : simulator . set_signal_val_long ( self . _handle , value ) return` and provide the corrected single-line fix. [MORE_SPECIFIC_IF]"
    },
    {
      "question": "Produce the corrected version of: `def outlets ( self ) : return [ YMRegion ( region ) for region in self . resp . get ( 'regions' ) ]`  (family: SINGLE_TOKEN)"
    },
    {
      "question": "Fix the error in: `def display ( self , args ) : \"\"\" A magic command to switch between simple display and ASCII art display . - \\`\\` args \\`\\` - - string . The mode ( \\`\\` ascii_art \\`\\` ( and optionally a \\`\\` width \\`\\` ) or \\`\\` simple \\`\\` )`. Return only the corrected line. [SINGLE_TOKEN]"
    },
    {
      "question": "Correct the following line while preserving intent: `bpy . ops . export_scene . fbx ( filepath = _export_file , use_selection = True , check_existing = False , axis_forward = '-Z' , axis_up = 'Y' , filter_glob = \"*.fbx\" , ui_tab = 'MAIN' , global_scale = 1.0 , apply_unit_scale = True , bake_space_transform = False , object_types = { 'MESH' } , use_mesh_modifiers = True , mesh_smooth_type = 'OFF' , use_mesh_edges = False , use_tspace = False , use_custom_props = False , add_leaf_bones = False , primary_bone_axis = 'Y' , secondary_bone_axis = 'X' , use_armature_deform_only = False , bake_anim = True , bake_anim_use_all_bones = True , bake_anim_use_nla_strips = True , bake_anim_use_all_actions = True , bake_anim_force_startend_keying = True , bake_anim_step = 1.0 , bake_anim_simplify_factor = 1.0 , path_mode = 'AUTO' , embed_textures = False , batch_mode = 'OFF' , use_batch_own_dir = True , use_metadata = True )`  (SAME_FUNCTION_LESS_ARGS)"
    },
    {
      "question": "Produce the corrected version of: `data . popup ( None , None , None , 3 , time )`  (family: SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Identify the issue in `return msgpack . packb ( data , use_bin_type = True )` and provide the corrected single-line fix. [SAME_FUNCTION_MORE_ARGS]"
    },
    {
      "question": "Correct the following line while preserving intent: `user = self . create_user ( correo , password = password , )`  (SAME_FUNCTION_LESS_ARGS)"
    },
    {
      "question": "Identify the issue in `nuevo_usuario = Usuario ( username = request . POST . get ( 'nombre_de_usuario' ) , email = request . POST . get ( 'correo' ) )` and provide the corrected single-line fix. [SAME_FUNCTION_MORE_ARGS]"
    },
    {
      "question": "Apply the minimal change that makes this line correct: `else : return self . preview_word ( 0 , length )`  (SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Correct the following line while preserving intent: `self . log = tempfile . NamedTemporaryFile ( prefix = logdir , delete = False )`  (SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Correct the following line while preserving intent: `descriptionsMenuItem . connect ( \"toggled\" , self . setVisibleDescriptions , self . treeview , self . statusIcon , self . builder )`  (SAME_FUNCTION_LESS_ARGS)"
    },
    {
      "question": "Identify the issue in `self . client_id = socket . gethostname ( ) + \"_\" + md5 ( str ( time ( ) + random . randint ( 0 , 10000 ) ) ) . hexdigest ( )` and provide the corrected single-line fix. [ADD_METHOD_CALL]"
    },
    {
      "question": "Replace the buggy snippet with a correct one: `return hashlib . md5 ( key ) . hexdigest ( )`  [pattern=ADD_METHOD_CALL]"
    },
    {
      "question": "Identify the issue in `self . assertEqual ( 2 , self . stats . errors . values ( ) [ 0 ] . occurences )` and provide the corrected single-line fix. [ADD_FUNCTION_AROUND_EXPRESSION]"
    },
    {
      "question": "Given the buggy code: `raise StructureException ( \"Function visibility must be declared (@public or @internal)\" )`, rewrite it into a correct version. (Bug type: SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "This line is buggy: `def _init_ ( self ) : self . enable = False self . value = 0.0 self . pin = 0`. Provide the correct version only. [SINGLE_TOKEN]"
    },
    {
      "question": "Fix the error in: `def test_when_acknowledge_route_is_hit_then_it_return_okay ( app ) : with app . test_client ( ) as test_client : response = test_client . get ( '/' ) assert 'OK' == response . data . decode ( )`. Return only the corrected line. [SINGLE_TOKEN]"
    },
    {
      "question": "This line is buggy: `tmp = i / placement`. Provide the correct version only. [CHANGE_BINARY_OPERATOR]"
    },
    {
      "question": "Correct the following line while preserving intent: `for j in range ( s / 2 , - 1 , - 1 ) : if dp [ n ] [ j ] == True : diff = s - 2 * j break`  (ADD_FUNCTION_AROUND_EXPRESSION)"
    },
    {
      "question": "This line is buggy: `resize_image = misc . imresize ( image , [ resize_size , resize_size ] )`. Provide the correct version only. [SAME_FUNCTION_MORE_ARGS]"
    },
    {
      "question": "Replace the buggy snippet with a correct one: `if rebuild != space_re . sub ( \"\" , tokenizer . clean_text ( answer_raw ) ) : raise ValueError ( rebuild + \" \" + answer_raw )`  [pattern=MORE_SPECIFIC_IF]"
    },
    {
      "question": "This line is buggy: `ret = TestRun . create ( TR_PROJECT_ID , TR_ID . format ( self . build , self . get_current_date ( ) ) , TR_TPL . format ( level ) )`. Provide the correct version only. [ADD_METHOD_CALL]"
    },
    {
      "question": "Identify the issue in `millis_to_seconds = millis / 1000` and provide the corrected single-line fix. [ADD_FUNCTION_AROUND_EXPRESSION]"
    },
    {
      "question": "This line is buggy: `return ( True , None )`. Provide the correct version only. [SINGLE_TOKEN]"
    },
    {
      "question": "Given the buggy code: `EXAMPLES : : sage : a = animate ( [ plot ( x ^ 2 + n ) for n in range ( 4 ) ] , ymin = 0 )`, rewrite it into a correct version. (Bug type: SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Correct the following line while preserving intent: `if isinstance ( self . stmt . targets [ 0 ] , ast . Subscript ) : raise_exception = False if isinstance ( self . stmt . targets [ 0 ] . value , ast . Attribute ) : list_name = \"%s.%s\" % ( self . stmt . targets [ 0 ] . value . value . id , self . stmt . targets [ 0 ] . value . attr )`  (MORE_SPECIFIC_IF)"
    },
    {
      "question": "Fix the following statement so it is correct: `path = self . _chooser_btn . get_uri ( )` (Pattern: ADD_FUNCTION_AROUND_EXPRESSION)"
    },
    {
      "question": "Apply the minimal change that makes this line correct: `self . register ( )`  (SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Produce the corrected version of: `self . populate ( player . current . id )`  (family: SAME_FUNCTION_LESS_ARGS)"
    },
    {
      "question": "Identify the issue in `for track in Objects . albums . get_tracks ( album ) : self . _shuffle_tracks_history . remove ( track )` and provide the corrected single-line fix. [SAME_FUNCTION_MORE_ARGS]"
    },
    {
      "question": "Apply the minimal change that makes this line correct: `return self . _get_default_icon ( size )`  (ADD_FUNCTION_AROUND_EXPRESSION)"
    },
    {
      "question": "Replace the buggy snippet with a correct one: `self . _remove_track ( self , playlist_name , filepath )`  [pattern=SAME_FUNCTION_LESS_ARGS]"
    },
    {
      "question": "Given the buggy code: `for j in range ( s / 2 , - 1 , - 1 ) : if dp [ n ] [ j ] == True : diff = s - 2 * j break`, rewrite it into a correct version. (Bug type: ADD_FUNCTION_AROUND_EXPRESSION)"
    },
    {
      "question": "Fix the error in: `items = Objects [ \"artists\" ] . get_ids ( )`. Return only the corrected line. [SAME_FUNCTION_MORE_ARGS]"
    },
    {
      "question": "Correct the following line while preserving intent: `int_codes = ( int_codes + 1 ) / 2`  (CHANGE_BINARY_OPERATOR)"
    },
    {
      "question": "Fix the following statement so it is correct: `tmp = i / placement` (Pattern: CHANGE_BINARY_OPERATOR)"
    },
    {
      "question": "Given the buggy code: `parser . add_option ( \"--cache-dir\" , dest = \"cache_dir\" , default = \"~/.pex/install\" , help = \"The local cache directory to use for speeding up requirement \" \"lookups; Default: ~/.pex/install\" )`, rewrite it into a correct version. (Bug type: ADD_FUNCTION_AROUND_EXPRESSION)"
    },
    {
      "question": "This line is buggy: `new_model = Model ( model_id , model_name , description , author , model_id , analyzer_rule_set )`. Provide the correct version only. [SAME_FUNCTION_MORE_ARGS]"
    },
    {
      "question": "Given the buggy code: `self . type = typ`, rewrite it into a correct version. (Bug type: ADD_FUNCTION_AROUND_EXPRESSION)"
    },
    {
      "question": "This line is buggy: `if st is not None : if isinstance ( st [ k ] , das . schematypes . Alias ) : return st [ k ] . name`. Provide the correct version only. [MORE_SPECIFIC_IF]"
    },
    {
      "question": "Fix the error in: `0 <= i <= k`. Return only the corrected line. [SINGLE_TOKEN]"
    },
    {
      "question": "Replace the buggy snippet with a correct one: `TemplateBody = template ) template_deployer . deploy_template ( template )`  [pattern=SAME_FUNCTION_MORE_ARGS]"
    },
    {
      "question": "Fix the following statement so it is correct: `dispatcher = MessageDispatcher ( None , None )` (Pattern: SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Correct the following line while preserving intent: `self . processChaptersList ( inputPath + '/' + filename , os . listdir ( inputPath + '/' + filename ) )`  (ADD_FUNCTION_AROUND_EXPRESSION)"
    },
    {
      "question": "Fix the following statement so it is correct: `category = category_string . strip ( \"'\\\"\" )` (Pattern: ADD_FUNCTION_AROUND_EXPRESSION)"
    },
    {
      "question": "This line is buggy: `category = category_string . strip ( \"'\\\"\" )`. Provide the correct version only. [ADD_FUNCTION_AROUND_EXPRESSION]"
    },
    {
      "question": "Fix the error in: `result_repr = display_for_field ( value , f )`. Return only the corrected line. [SAME_FUNCTION_MORE_ARGS]"
    },
    {
      "question": "Given the buggy code: `try : return urllib . request . urlopen ( shortener + \"?\" + urllib . urlencode ( { query : self . unicode2utf8 ( url_to_shorten ) } ) ) . read ( ) except HTTPError as e : raise TwythonError ( \"shortenURL() failed with a %s error code.\" % repr ( e . code ) )`, rewrite it into a correct version. (Bug type: SINGLE_TOKEN)"
    },
    {
      "question": "Fix the following statement so it is correct: `print ( 'DEBUG-- Expected: %s %s; Got: %s %s\\n' ) % ( expected_amount , expected_currency , amount , currency )` (Pattern: ADD_FUNCTION_AROUND_EXPRESSION)"
    },
    {
      "question": "Apply the minimal change that makes this line correct: `function = func_model . search ( [ ( \"name\" , \"=\" , channel_method_name ) ] )`  (SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Fix the error in: `with open ( p ) as f : reader = csv . reader ( f ) for i , r in enumerate ( reader ) : if ( i == 0 ) :`. Return only the corrected line. [SAME_FUNCTION_MORE_ARGS]"
    },
    {
      "question": "Correct the following line while preserving intent: `args = [ sys . executable ] + [ os . path . join ( base_path , __file__ ) ] + sys . argv [ 1 : ]`  (ADD_FUNCTION_AROUND_EXPRESSION)"
    },
    {
      "question": "Fix the error in: `if movie_year < datetime . datetime . now ( ) . year - 3 and not year_name . get ( 'year' , None ) : if size > 3000 : log . info ( 'Quality was missing in name, assuming it\\'s a DVD-R based on the size: %s' , ( size ) ) found [ 'dvdr' ] = True`. Return only the corrected line. [MORE_SPECIFIC_IF]"
    },
    {
      "question": "Correct the following line while preserving intent: `else : frappe . msgprint ( \"Please select fiscal year before selecting Quarter\" )`  (SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Identify the issue in `if actual [ 0 ] [ 0 ] >= limit : frappe . throw ( ( \"Template Limit reached. Set Limit = {0} whereas total \\\n \t\t\t\tnumber of variants = {1} increase the limit to save the variant\" ) . format ( limit , actual [ 0 ] [ 0 ] ) )` and provide the corrected single-line fix. [CHANGE_BINARY_OPERATOR]"
    },
    {
      "question": "Identify the issue in `out_tensor = tf . reduce_mean ( self . out_tensor )` and provide the corrected single-line fix. [SAME_FUNCTION_MORE_ARGS]"
    },
    {
      "question": "Replace the buggy snippet with a correct one: `num_batches = max_index / self . batch_size`  [pattern=CHANGE_BINARY_OPERATOR]"
    },
    {
      "question": "Apply the minimal change that makes this line correct: `server . listen ( config [ 'port' ] )`  (SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Fix the following statement so it is correct: `if self . check ( ) and self . conf ( 'automatic' ) and not self . updater . update_failed : if self . updater . doUpdate ( ) :` (Pattern: MORE_SPECIFIC_IF)"
    },
    {
      "question": "Fix the error in: `Inject . initialize ( options )`. Return only the corrected line. [SAME_FUNCTION_MORE_ARGS]"
    },
    {
      "question": "Given the buggy code: `NetCreds ( ) . start ( 'venet0:0' , '172.30.96.18' , None )`, rewrite it into a correct version. (Bug type: SAME_FUNCTION_LESS_ARGS)"
    },
    {
      "question": "Produce the corrected version of: `self . nameservers = config [ 'nameservers' ]`  (family: ADD_METHOD_CALL)"
    },
    {
      "question": "Fix the following statement so it is correct: `return 'generated' , random . choice ( list ( net ) )` (Pattern: ADD_FUNCTION_AROUND_EXPRESSION)"
    },
    {
      "question": "Identify the issue in `return differ . get_diff_stream ( ) . render ( 'html' )` and provide the corrected single-line fix. [SAME_FUNCTION_MORE_ARGS]"
    },
    {
      "question": "Correct the following line while preserving intent: `UserMessage . query . filter ( UserMessage . id . in_ ( to_delete ) ) . delete ( )`  (SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Apply the minimal change that makes this line correct: `if self . _timer and self . _timer . is_alive ( ) : return`  (MORE_SPECIFIC_IF)"
    },
    {
      "question": "Fix the following statement so it is correct: `self . _default_action . visible = ( new_view_id is not None )` (Pattern: SINGLE_TOKEN)"
    },
    {
      "question": "Correct the following line while preserving intent: `data . sort_values ( by = [ xname ] )`  (SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Identify the issue in `data_range = beads_channels . ix [ channel ] [ '$PnR' ]` and provide the corrected single-line fix. [ADD_FUNCTION_AROUND_EXPRESSION]"
    },
    {
      "question": "Produce the corrected version of: `for group in data [ self . by ] . itertuples ( index = False ) : if isinstance ( stat . index , pd . MultiIndex ) : s = stat . xs ( group , level = self . by , drop_level = False ) else :`  (family: SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Identify the issue in `name = toUnicode ( link . contents [ 0 ] . encode ( 'ISO-8859-1' ) ) . strip ( )` and provide the corrected single-line fix. [ADD_FUNCTION_AROUND_EXPRESSION]"
    },
    {
      "question": "Produce the corrected version of: `req = requests . post ( url , data = args , files = files )`  (family: SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Fix the error in: `plt . bar ( bin_edges [ : - 1 ] , hist , linewidth = 0 )`. Return only the corrected line. [SAME_FUNCTION_MORE_ARGS]"
    },
    {
      "question": "Correct the following line while preserving intent: `return { x : pd . Series ( self . data [ x ] . unique ( ) ) . sort_values ( ) for x in self . data if self . metadata [ x ] [ 'type' ] == \"condition\" }`  (ADD_METHOD_CALL)"
    },
    {
      "question": "Fix the error in: `return IterWrapper ( [ ] , [ ] )`. Return only the corrected line. [ADD_FUNCTION_AROUND_EXPRESSION]"
    },
    {
      "question": "Replace the buggy snippet with a correct one: `prev_layer = layers . CombineMeanStd ( [ self . _embedding_mean , self . _embedding_stddev ] )`  [pattern=SAME_FUNCTION_MORE_ARGS]"
    },
    {
      "question": "Fix the following statement so it is correct: `if ( doc . item_code ) : ic_existing = doc . item_code [ : ( len ( doc . item_code ) - 4 ) ] if ic_existing != ic_check :` (Pattern: MORE_SPECIFIC_IF)"
    },
    {
      "question": "Given the buggy code: `return partial ( igraph . Graph . community_multilevel , ensure_undirected ( ctx [ 'graph' ] , ctx ) , weights = ctx [ 'weight' ] )`, rewrite it into a correct version. (Bug type: SAME_FUNCTION_LESS_ARGS)"
    },
    {
      "question": "Correct the following line while preserving intent: `if res . a : results [ str ( res . a . contents [ 0 ] ) ] . insert ( 0 , res . a [ 'href' ] )`  (MORE_SPECIFIC_IF)"
    },
    {
      "question": "Identify the issue in `self . conn = ssl . wrap_socket ( self . sock )` and provide the corrected single-line fix. [SAME_FUNCTION_MORE_ARGS]"
    },
    {
      "question": "Fix the following statement so it is correct: `if movie . category and movie . category . destination and len ( movie . category . destination ) > 0 : destination = movie . category . destination log . debug ( 'Setting category destination for \"%s\": %s' % ( movie_title , destination ) ) else :` (Pattern: MORE_SPECIFIC_IF)"
    },
    {
      "question": "Produce the corrected version of: `url = ss ( url )`  (family: ADD_FUNCTION_AROUND_EXPRESSION)"
    },
    {
      "question": "Replace the buggy snippet with a correct one: `ignore_file = fnmatch . filter ( ignore_files , '%s.%s.ignore' % ( os . path . splitext ( tag_file ) [ 0 ] , tag if tag else '*' ) )`  [pattern=ADD_FUNCTION_AROUND_EXPRESSION]"
    },
    {
      "question": "Produce the corrected version of: `srcnn = SRCNN ( session , config . batch_size , config . image_size , config . color_channels , config . learning_rate )`  (family: SAME_FUNCTION_MORE_ARGS)"
    },
    {
      "question": "Correct the following line while preserving intent: `fname = os . path . join ( path , chrom + \".fa\" )`  (SAME_FUNCTION_LESS_ARGS)"
    },
    {
      "question": "Replace the buggy snippet with a correct one: `super ( ) . __init__ ( * args , ** kwargs )`  [pattern=SAME_FUNCTION_MORE_ARGS]"
    },
    {
      "question": "Identify the issue in `def get_all_view_names ( self , urlpatterns , parent_regex = None ) : for pattern in urlpatterns : if isinstance ( pattern , RegexURLResolver ) : regex = '' if pattern . _regex == \"^\" else pattern . _regex` and provide the corrected single-line fix. [SINGLE_TOKEN]"
    }
  ]
}